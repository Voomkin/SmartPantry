[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "SmartPantry/App.js",
    "content": "import { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nimport { NativeBaseProvider } from 'native-base'\r\nimport { Alert } from \"react-native\";\r\n\r\nimport React, { Component, useState, useEffect} from \"react\";\r\nimport {Icon, Button} from 'react-native-elements';\r\nimport Amplify from 'aws-amplify';\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport awsconfig from './src/aws-exports';\r\nimport { withAuthenticator } from 'aws-amplify-react-native';\r\n\r\nimport { getPantry } from \"./queries.js\";\r\nimport { updatePantry } from \"./mutations.js\";\r\n\r\nimport Home from './screens/Home'\r\nimport Profile from './screens/Profile'\r\nimport ShoppingList from './screens/Shopping'\r\nimport Help from './screens/Help'\r\nimport Settings from './screens/Settings'\r\nimport customTheme from './screens/Theme'\r\nimport SmartPantry from './screens/SmartPantry'\r\n\r\nimport WelcomeScreen from './screens/Welcome';\r\nimport AppLoading from 'expo-app-loading'\r\nimport { useFonts } from 'expo-font'\r\nimport MyInfoScreen from './screens/MyInfo';\r\nimport CustomDrawer from './components/CustomDrawer'\r\nimport Ionicons from 'react-native-vector-icons/Ionicons';\r\n\r\nconst Drawer = createDrawerNavigator();\r\n\r\n/*const HandleSignOut = () => {\r\n  Alert.alert(\"Sign Out\", \"Do you want to sign out?\", [\r\n    {\r\n      text: \"Yes\",\r\n      onPress: () => Auth.signOut(),\r\n    },\r\n    {\r\n      text: \"No\",\r\n      style: \"cancel\",\r\n    },\r\n  ]);\r\n  return null;\r\n}*/\r\n\r\n/**\r\n * @author Jonathan Malcomb\r\n * @author Shannon Biega\r\n * @param props \r\n * @returns Creates a drawer that the user can use to navigate throughout the application.\r\n */\r\nconst HeaderDrawer = (props) => {\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      <Drawer.Navigator drawerContent={props => <CustomDrawer {...props} />}\r\n      screenOptions={{headerShown: true, drawerActiveBackgroundColor:'#3D405B', drawerActiveTintColor: '#fff'}}>\r\n        <Drawer.Screen name=\"Welcome\" component={WelcomeScreen} options={{\r\n          drawerIcon: ({color}) => (\r\n            <Ionicons name=\"hand-left-outline\" size={22} color={color} />\r\n          ),\r\n          headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff'\r\n        }}/>\r\n        <Drawer.Screen name=\"My Pantry\" component={Home} options={{\r\n          drawerIcon: ({color}) => (\r\n            <Ionicons name=\"home-outline\" size={22} color={color} />\r\n          ),\r\n          headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff'\r\n        }}/>\r\n        <Drawer.Screen name=\"Shopping List\" component={ShoppingList} options={{\r\n          drawerIcon: ({color}) => (\r\n            <Ionicons name=\"cart-outline\" size={22} color={color} />\r\n          ),\r\n          headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff'\r\n        }}/>\r\n        <Drawer.Screen name=\"My Profile\" component={MyInfoScreen} options={{\r\n          drawerIcon: ({color}) => (\r\n            <Ionicons name=\"person-outline\" size={22} color={color} />\r\n          ),\r\n          headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff'\r\n        }}/>\r\n        <Drawer.Screen name=\"Help\" component={Help} options={{\r\n          drawerIcon: ({color}) => (\r\n            <Ionicons name=\"help-outline\" size={22} color={color} />\r\n          ),\r\n          headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff'\r\n        }}/>\r\n        <Drawer.Screen name=\"Settings\" component={Settings} options={{\r\n          drawerIcon: ({color}) => (\r\n            <Ionicons name=\"settings-outline\" size={22} color={color} />\r\n          ),\r\n          headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff'\r\n        }}/>\r\n      {/*  <Drawer.Screen name=\"Logout\" component={HandleSignOut} options={{\r\n          drawerIcon: ({color}) => (\r\n            <Ionicons name=\"log-out-outline\" size={22} color={color} />\r\n          ),\r\n          headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff'\r\n        }}/>*/}\r\n      </Drawer.Navigator>\r\n    </NavigationContainer>\r\n    /*\r\n    <NavigationContainer>\r\n      <Drawer.Navigator screenOptions={{\r\n        drawerStyle: {\r\n          backgroundColor: '#3D405B',\r\n          width: 240,\r\n        },\r\n        contentOptions: {\r\n          labelStyle: {\r\n            color: '#fff',\r\n          },\r\n        }\r\n      }}>\r\n        <Drawer.Screen name=\"My Pantry\" component={Home} options={{  headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff'}}/>\r\n        <Drawer.Screen name=\"Shopping List\" component={ShoppingList} options={{ headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff' }}/>\r\n        <Drawer.Screen name=\"My Profile\" component={MyInfoScreen} options={{ headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff' }}/>\r\n        <Drawer.Screen name=\"Help\" component={Help} options={{ headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff' }}/>\r\n        <Drawer.Screen name=\"Settings\" component={Settings} options={{ headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff' }}/>\r\n        <Drawer.Screen name=\"Logout\"  component={HandleSignOut} options={{ headerStyle: {backgroundColor: '#3D405B'}, headerTintColor: '#fff' }}/>\r\n      </Drawer.Navigator>\r\n    </NavigationContainer>\r\n    */\r\n  );\r\n}\r\n\r\n  /**\r\n   * @author Kollin Labowski\r\n   * @param new_pref - The preference value to change the user's notification preference to.\r\n   */\r\nconst updateNotifFreq = async ( new_pref ) => {\r\n  const user = await Auth.currentAuthenticatedUser();\r\n\r\n  const pantryData = await API.graphql(\r\n    graphqlOperation(getPantry, { id: user.username.toString() })\r\n  );\r\n\r\n  const update = {\r\n    id: user.username.toString(),\r\n    notiffreq: new_pref,\r\n  }\r\n\r\n  const u = await API.graphql(graphqlOperation(updatePantry, {input: update}));\r\n  \r\n}\r\n\r\n/**\r\n * @author Kollin Labowski\r\n */\r\nconst notificationUpdate = async () => {\r\n  const user = await Auth.currentAuthenticatedUser();\r\n\r\n  const pantryData = await API.graphql(\r\n    graphqlOperation(getPantry, { id: user.username.toString() })\r\n  );\r\n\r\n  if(pantryData == null) {\r\n    Alert.alert(\"Notifications\", \"You must create a pantry before you can change your notification preferences.\");\r\n  }\r\n  else {\r\n    const current_preference = pantryData.data.getPantry.notiffreq;\r\n    let preference_response = \"\";\r\n\r\n    if(current_preference == 60) {\r\n      preference_response = \"once a minute\";\r\n    }\r\n    else if(current_preference == 86400 / 24) {\r\n      preference_response = \"once an hour\";\r\n    }\r\n    else if(current_preference == 86400 / 12) {\r\n      preference_response = \"every two hours\";\r\n    }\r\n    else if(current_preference == 86400 / 3) {\r\n      preference_response = \"every eight hours\";\r\n    }\r\n    else if(current_preference == 86400 / 2) {\r\n      preference_response = \"every twelve hours\";\r\n    }\r\n    else if(current_preference == 86400) {\r\n      preference_response = \"every day\";\r\n    }\r\n    else if(current_preference == 86400 * 2) {\r\n      preference_response = \"every two days\";\r\n    }\r\n    else if(current_preference == 86400 * 7) {\r\n      preference_response = \"every week\";\r\n    }\r\n    else if(current_preference == 86400 * 14) {\r\n      preference_response = \"every two weeks\";\r\n    }\r\n    else if(current_preference == 86400 * 30) {\r\n      preference_response = \"every month\";\r\n    }\r\n    else if(current_preference == 86400 * 90) {\r\n      preference_response = \"every 3 months\";\r\n    }\r\n\r\n    Alert.alert(\r\n      \"Notifications\",\r\n      \"You will receive a notification \" + preference_response + \". Would you like to change your notification preference?\",\r\n      [\r\n        {\r\n          text: \"Yes\",\r\n          onPress: () => {\r\n            Alert.alert(\"Notifications\",\r\n            \"What would you like to change your notification preference to? (You will have more options in the notification page in Settings)\",\r\n            [\r\n              {\r\n                text: \"Hourly\",\r\n                onPress: () => {\r\n                  updateNotifFreq(86400 / 24);\r\n                  Alert.alert(\"Notifications\", \"You will now recieve notifications at most every hour.\")\r\n                }\r\n              },\r\n              {\r\n                text: \"Daily\",\r\n                onPress: () => {\r\n                  updateNotifFreq(86400);\r\n                  Alert.alert(\"Notifications\", \"You will now recieve notifications at most every day.\")\r\n                }\r\n              },\r\n              {\r\n                text: \"Weekly\",\r\n                onPress: () => {\r\n                  updateNotifFreq(86400 * 7);\r\n                  Alert.alert(\"Notifications\", \"You will now recieve notifications at most every week.\")\r\n                }\r\n              }\r\n            ]);\r\n\r\n          }\r\n        },\r\n        {\r\n          text: \"No\",\r\n          style: \"cancel\"\r\n        }\r\n      ]\r\n    );\r\n  }\r\n}\r\n\r\n// Main App function\r\n/**\r\n * @author Ryan Mraz\r\n * @returns Creates a tool bar for the user to user to navigate the app. Note, newer versions of the app use the drawer as the main form of navigation.\r\n */\r\nconst App = () => {\r\n\r\n  const [email, setEmail]= useState(\"\");\r\n  //const [phoneNumber, setPhoneNumber]= useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetchInfo()\r\n  }, [])\r\n\r\n  const fetchInfo = async () => {\r\n      console.log(\"HERE\") \r\n      // alert(email);\r\n      try {\r\n          const user = await Auth.currentAuthenticatedUser();\r\n          // console.log(user);\r\n\r\n          // const email = user.attributes.email;\r\n          // const phone_number = user.attributes.phone_number;\r\n\r\n          //setEmail(user.attributes.email); \r\n          //setPhoneNumber([user.attributes.phone_number.substring(0,2), '-', user.attributes.phone_number.substring(2,5),'-',user.attributes.phone_number.substring(5,8),'-',user.attributes.phone_number.substring(8,12)]);\r\n\r\n          await AsyncStorage.setItem('@userEmail', user.attributes.email)\r\n          // alert(phone_number);\r\n          //const pantryStats = getPantryInfo(user);\r\n          // return (<Text style={{fontSize: 17, textAlign: 'center', margin: 10}}>{email}</Text>)\r\n          \r\n      } catch (err) {\r\n          console.log(err);\r\n      }\r\n  }\r\n\r\n\r\n  console.log(email)\r\n\r\n  let [areFontsLoaded] = useFonts({\r\n    'Lato-Black': require('./assets/fonts/Lato/Lato-Black.ttf'),\r\n    'Lato-BlackItalic': require('./assets/fonts/Lato/Lato-BlackItalic.ttf'),\r\n    'Lato-Bold': require('./assets/fonts/Lato/Lato-Bold.ttf'),\r\n    'Lato-BoldItalic': require('./assets/fonts/Lato/Lato-BoldItalic.ttf'),\r\n    'Lato-Italic': require('./assets/fonts/Lato/Lato-Italic.ttf'),\r\n    'Lato-Light': require('./assets/fonts/Lato/Lato-Light.ttf'),\r\n    'Lato-LightItalic': require('./assets/fonts/Lato/Lato-LightItalic.ttf'),\r\n    'Lato-Regular': require('./assets/fonts/Lato/Lato-Regular.ttf'),\r\n    'Lato-Thin': require('./assets/fonts/Lato/Lato-Thin.ttf'),\r\n    'Lato-ThinItalic': require('./assets/fonts/Lato/Lato-ThinItalic.ttf')\r\n  });\r\n\r\n  if (!areFontsLoaded) {\r\n    return <AppLoading />\r\n  }\r\n\r\n  return (\r\n    <NativeBaseProvider theme={customTheme}>\r\n      <HeaderDrawer />\r\n    </NativeBaseProvider>\r\n  )\r\n\r\n  return (\r\n    // Entire app wrapped in a NavigationContainer and uses the bottom tab navigator for screens\r\n    <NavigationContainer>\r\n      <Tab.Navigator\r\n        screenOptions={{\r\n          headerStyle: {\r\n            backgroundColor: \"#769353\",\r\n            color: 'red'\r\n          },\r\n        }}\r\n      >\r\n        <Tab.Screen\r\n          name=\"Home\"\r\n          component={HomeStackScreen}\r\n          options={({ navigation }) => ({\r\n            title: \"Home\",\r\n            // Sets up header buttons for notifications and sign out\r\n            headerRight: () => (\r\n              <Button\r\n                icon={\r\n                  <Icon name=\"circle-notifications\" size={25} color=\"#000000\" />}\r\n                  onPress={notificationUpdate}\r\n                type=\"clear\"\r\n              ></Button>\r\n            ),\r\n            headerLeft: () => (\r\n              <View>\r\n                <Button\r\n                  icon={<Icon name=\"logout\" size={25} color=\"#000000\" />}\r\n                  onPress={signOutAlert}\r\n                  type=\"clear\"\r\n                ></Button>\r\n              </View>\r\n            ),\r\n            // sets the icon for the home bottom tab screen\r\n            tabBarIcon: () => {\r\n              return <Icon name=\"home\" />;\r\n            },\r\n            headerShown: true,\r\n          })}\r\n        />\r\n        <Tab.Screen\r\n          name=\"Shopping\"\r\n          component={ShoppingStackScreen}\r\n          options={{\r\n            tabBarIcon: () => {\r\n              return <Icon name=\"store\" />;\r\n            },\r\n            headerShown: true,\r\n          }}\r\n        />\r\n        {/* <Tab.Screen\r\n          name=\"Profile\"\r\n          component={ProfileScreen}\r\n          options={{\r\n            title: \"Profile\",\r\n            tabBarIcon: () => {\r\n              return <Icon name=\"account-box\" />;\r\n            },\r\n            headerShown: true,\r\n          }}\r\n        /> */}\r\n        {/* <Tab.Screen\r\n          name=\"Pantry\"\r\n          component={PantryStackScreen}\r\n          options={{\r\n            tabBarIcon: () => {\r\n              return <Icon name=\"store\" />;\r\n            },\r\n            headerShown: true,\r\n          }}\r\n        /> */}\r\n        <Tab.Screen\r\n          name=\"Settings\"\r\n          component={SettingsStackScreen}\r\n          options={{\r\n            tabBarIcon: () => {\r\n              return <Icon name=\"settings\" />;\r\n            },\r\n            headerShown: true,\r\n          }}\r\n        />\r\n      </Tab.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\nexport default withAuthenticator(App)",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "Drawer",
    "memberof": "SmartPantry/App.js",
    "static": true,
    "longname": "SmartPantry/App.js~Drawer",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "HeaderDrawer",
    "memberof": "SmartPantry/App.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/App.js~HeaderDrawer",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/App.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Jonathan Malcomb"
      },
      {
        "tagName": "@author",
        "tagValue": "Shannon Biega"
      },
      {
        "tagName": "@returns",
        "tagValue": "Creates a drawer that the user can use to navigate throughout the application."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Creates a drawer that the user can use to navigate throughout the application."
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "updateNotifFreq",
    "memberof": "SmartPantry/App.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/App.js~updateNotifFreq",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/App.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "new_pref",
        "description": "The preference value to change the user's notification preference to."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "notificationUpdate",
    "memberof": "SmartPantry/App.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/App.js~notificationUpdate",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/App.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "App",
    "memberof": "SmartPantry/App.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/App.js~App",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/App.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Ryan Mraz"
      },
      {
        "tagName": "@returns",
        "tagValue": "Creates a tool bar for the user to user to navigate the app. Note, newer versions of the app use the drawer as the main form of navigation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Creates a tool bar for the user to user to navigate the app. Note, newer versions of the app use the drawer as the main form of navigation."
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "SmartPantry/babel.config.js",
    "content": "module.exports = function(api) {\r\n  api.cache(true);\r\n  return {\r\n    presets: ['babel-preset-expo'],\r\n    plugins: [\r\n      \"react-native-reanimated/plugin\",  \r\n      [\r\n        \"module-resolver\",\r\n        {\r\n          alias: {\r\n            \"@native-base/icons\": \"@native-base/icons/lib\",\r\n          },\r\n        },\r\n      ], \r\n    ],\r\n    env: {\r\n      production: {\r\n        plugins: ['react-native-paper/babel'],\r\n      },\r\n    },\r\n  };\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/babel.config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "exports",
    "memberof": "SmartPantry/babel.config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/babel.config.js~exports",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/babel.config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "api",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"presets\": *, \"plugins\": *, \"env\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "SmartPantry/components/Card.js",
    "content": "\r\nimport { StyleSheet, Text, View } from 'react-native'\r\nimport React from 'react'\r\n\r\nimport { Flex, useTheme } from 'native-base'\r\n\r\nimport ClockSVG from '../assets/svgs/clock.svg'\r\n\r\n// Apply conditional render to the SVG for different cards\r\n\r\n// ClockSVG style={styles.svgCenter} width='50%' height='50%' color='red'/>\r\n\r\nconst Card = (props) => {\r\n\r\n  const {\r\n    colors,\r\n    fonts\r\n  } = useTheme()\r\n\r\n  return (\r\n    <View style={styles.container} backgroundColor='white'>\r\n      <Flex width='80%' direction='row' alignItems='center' justify='center'>\r\n        <Flex style={styles.cardFlex_left} >\r\n          <ClockSVG color='white' />\r\n        </Flex>\r\n        <Flex style={styles.cardFlex_right}> \r\n          <Text>Oreo Cookies</Text> \r\n          <Text>1 lb</Text>\r\n        </Flex>\r\n      </Flex> \r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  cardFlex_left: {\r\n    flex: 1,\r\n    height: '100%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    borderWidth: 1,\r\n    borderColor: 'black',\r\n    borderRadius: 10,\r\n    backgroundColor: 'black',\r\n  },\r\n  cardFlex_right: {\r\n    flex: 1,\r\n    height: '100%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexShrink: 1,\r\n  },\r\n  svgCenter: {\r\n    display: 'flex',\r\n    alignContent: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    padding: 5, \r\n    backgroundColor: '#FFFFFF',\r\n    shadowColor: \"#000\",\r\n    shadowOpacity: 1,\r\n    shadowRadius: 1,\r\n    shadowOffset: {\r\n      height: 0,\r\n      width: 0\r\n    },\r\n    borderRadius: 10,\r\n  },\r\n})\r\n\r\n\r\nexport default Card",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/components/Card.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/components/Card.js",
    "static": true,
    "longname": "SmartPantry/components/Card.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/components/Card.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "Card",
    "memberof": "SmartPantry/components/Card.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/components/Card.js~Card",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/components/Card.js",
    "importStyle": "Card",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "SmartPantry/components/CustomDrawer.js",
    "content": "import React, { useEffect, useState } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  ImageBackground,\r\n  Image,\r\n  TouchableOpacity,\r\n} from 'react-native';\r\nimport {\r\n  DrawerContentScrollView,\r\n  DrawerItemList,\r\n} from '@react-navigation/drawer';\r\n\r\nimport Ionicons from 'react-native-vector-icons/Ionicons';\r\nimport FontAwesome5 from 'react-native-vector-icons/FontAwesome5';\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport {Alert } from \"react-native\";\r\nimport { withAuthenticator } from 'aws-amplify-react-native';\r\nimport MyInfoScreen from '../screens/MyInfo';\r\n\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n\r\nconst HandleSignOut = () => {\r\n    Alert.alert(\"Sign Out\", \"Do you want to sign out?\", [\r\n      {\r\n        text: \"Yes\",\r\n        onPress: () => Auth.signOut(),\r\n      },\r\n      {\r\n        text: \"No\",\r\n        style: \"cancel\",\r\n      },\r\n    ]);\r\n    return null;\r\n  }\r\n\r\nconst CustomDrawer = props => {\r\n\r\n    const [userEmail, setUserEmail] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n    const getData = async () => {\r\n        try {\r\n          setUserEmail(await AsyncStorage.getItem('@userEmail'))\r\n        } catch(e) {\r\n          // error reading value\r\n        }\r\n    }\r\n      \r\n\r\n  return (\r\n    <View style={{flex: 1}}>\r\n      <DrawerContentScrollView\r\n        {...props}\r\n        style={{backgroundColor: '#b5e48c'}}\r\n\r\n        contentContainerStyle={{backgroundColor: '#3D405B'}}>\r\n        <ImageBackground\r\n          source={require('../assets/images/food.png')}\r\n          style={{padding: 20}}>\r\n          <Image\r\n            source={require('../assets/images/foodicon.png')}\r\n            style={{height: 80, width: 80, borderRadius: 40, marginBottom: 10, tintColor:'white', shadowColor: 'black',\r\n            shadowOpacity: 1,\r\n            shadowRadius: 5\r\n        }}\r\n          />\r\n          <Text\r\n            style={{\r\n              color: '#fff',\r\n              textShadowRadius: 5,\r\n              textShadowColor: 'black',\r\n              fontSize: 18,\r\n              fontFamily: 'Lato-Black',\r\n              marginBottom: 5,\r\n            }}>\r\n            SMART{'\\n'}PANTRY{'\\n'}APPLICATION{'\\n'}\r\n            {userEmail}\r\n          </Text>\r\n        </ImageBackground>\r\n        <View style={{ backgroundColor: '#b5e48c', paddingTop: 10}}>\r\n          <DrawerItemList {...props} />\r\n        </View>\r\n      </DrawerContentScrollView >\r\n      <View style={{padding: 20, borderTopWidth: 2, borderTopColor: '#3D405B', backgroundColor: '#b5e48c'}}> \r\n      \r\n        \r\n        <TouchableOpacity onPress={() => {HandleSignOut()}} style={{paddingVertical: 15, paddingTop:0}}>\r\n          <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n            <Ionicons name=\"exit-outline\" size={22} color= '#343a40'\r\n/>\r\n            <Text\r\n              style={{\r\n                fontSize: 15,\r\n                fontFamily: 'Lato-Regular',\r\n                marginLeft: 5,\r\n                color: '#343a40'\r\n              }}>\r\n              Sign Out\r\n            </Text>\r\n          </View>\r\n        </TouchableOpacity>\r\n        <Text style={{color: '#3D405B', fontSize: 13, textAlign: 'left'}}>© Group 3 : CSEE 481{'\\n'}</Text>\r\n\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default CustomDrawer;",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/components/CustomDrawer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "HandleSignOut",
    "memberof": "SmartPantry/components/CustomDrawer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/components/CustomDrawer.js~HandleSignOut",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/components/CustomDrawer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "CustomDrawer",
    "memberof": "SmartPantry/components/CustomDrawer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/components/CustomDrawer.js~CustomDrawer",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/components/CustomDrawer.js",
    "importStyle": "CustomDrawer",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "SmartPantry/components/Header.js",
    "content": "\r\nimport { View, StyleSheet } from 'react-native'\r\nimport React from 'react'\r\n\r\nimport { StatusBar, Box, HStack, IconButton, Text, Icon } from 'native-base'\r\nimport { Entypo } from '@native-base/icons'\r\n\r\n\r\n\r\n\r\n// Test responsiveness later\r\nconst Header = (navigation) => {\r\n\r\n  return (\r\n    <View>\r\n        <StatusBar style={hStyles.primaryColor} barStyle=\"light-content\" />\r\n        <Box safeAreaTop style={hStyles.primaryColor}  />\r\n        <HStack style={hStyles.primaryColor} px=\"1\" py=\"3\" justifyContent=\"space-between\" alignItems=\"center\" w=\"100%\">\r\n          <View style={{ flex: 1, paddingLeft: 10 }}>\r\n            <IconButton _icon={{ as: Entypo, name: \"menu\", color: \"white\" }} />\r\n          </View>\r\n          <View style={{ flex: 1 }}>\r\n            <Text style={{ textAlign:'center' }} color=\"white\" fontSize=\"20\" fontWeight=\"bold\">Home</Text>\r\n          </View>\r\n          <View style={{ flex: 1, paddingRight: 10 }} />\r\n        </HStack>\r\n    </View>\r\n  )\r\n}\r\n\r\nlet hStyles = StyleSheet.create({\r\n    primaryColor: {\r\n        backgroundColor: \"#002855\",\r\n    },\r\n})\r\n\r\nexport default Header;",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/components/Header.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "hStyles",
    "memberof": "SmartPantry/components/Header.js",
    "static": true,
    "longname": "SmartPantry/components/Header.js~hStyles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/components/Header.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "Header",
    "memberof": "SmartPantry/components/Header.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/components/Header.js~Header",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/components/Header.js",
    "importStyle": "Header",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "navigation",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "SmartPantry/components/Heading.js",
    "content": "\r\nimport { StyleSheet, Text, View } from 'react-native'\r\nimport React from 'react'\r\n\r\nconst Heading = () => {\r\n  return (\r\n    <View>\r\n      <Text>Heading</Text>\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default Heading\r\n\r\nconst styles = StyleSheet.create({})",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/components/Heading.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/components/Heading.js",
    "static": true,
    "longname": "SmartPantry/components/Heading.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/components/Heading.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "Heading",
    "memberof": "SmartPantry/components/Heading.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/components/Heading.js~Heading",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/components/Heading.js",
    "importStyle": "Heading",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "SmartPantry/e2e/environment.js",
    "content": "const {\n  DetoxCircusEnvironment,\n  SpecReporter,\n  WorkerAssignReporter,\n} = require('detox/runners/jest-circus');\n\nclass CustomDetoxEnvironment extends DetoxCircusEnvironment {\n  constructor(config, context) {\n    super(config, context);\n\n    // Can be safely removed, if you are content with the default value (=300000ms)\n    this.initTimeout = 300000;\n\n    // This takes care of generating status logs on a per-spec basis. By default, Jest only reports at file-level.\n    // This is strictly optional.\n    this.registerListeners({\n      SpecReporter,\n      WorkerAssignReporter,\n    });\n  }\n}\n\nmodule.exports = CustomDetoxEnvironment;\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/e2e/environment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "DetoxCircusEnvironment",
    "memberof": "SmartPantry/e2e/environment.js",
    "static": true,
    "longname": "SmartPantry/e2e/environment.js~DetoxCircusEnvironment",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/e2e/environment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "CustomDetoxEnvironment",
    "memberof": "SmartPantry/e2e/environment.js",
    "static": true,
    "longname": "SmartPantry/e2e/environment.js~CustomDetoxEnvironment",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/e2e/environment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "DetoxCircusEnvironment"
    ],
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "SmartPantry/e2e/environment.js~CustomDetoxEnvironment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "SmartPantry/e2e/environment.js~CustomDetoxEnvironment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "initTimeout",
    "memberof": "SmartPantry/e2e/environment.js~CustomDetoxEnvironment",
    "static": false,
    "longname": "SmartPantry/e2e/environment.js~CustomDetoxEnvironment#initTimeout",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "SmartPantry/e2e/firstTest.e2e.js",
    "content": "describe('Example', () => {\n  beforeAll(async () => {\n    await device.launchApp();\n  });\n\n  beforeEach(async () => {\n    await device.reloadReactNative();\n  });\n\n  it('should have welcome screen', async () => {\n    await expect(element(by.id('welcome'))).toBeVisible();\n  });\n\n  it('should show hello screen after tap', async () => {\n    await element(by.id('hello_button')).tap();\n    await expect(element(by.text('Hello!!!'))).toBeVisible();\n  });\n\n  it('should show world screen after tap', async () => {\n    await element(by.id('world_button')).tap();\n    await expect(element(by.text('World!!!'))).toBeVisible();\n  });\n});",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/e2e/firstTest.e2e.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "SmartPantry/metro.config.js",
    "content": "\r\nconst { getDefaultConfig } = require('metro-config')\r\n\r\nmodule.exports = (async () => {\r\n    const {\r\n        resolver: { sourceExts, assetExts },\r\n    } = await getDefaultConfig()\r\n    return {\r\n        transformer: {\r\n            babelTransformerPath: require.resolve('react-native-svg-transformer'),\r\n        },\r\n        resolver: {\r\n            assetExts: assetExts.filter(ext => ext !== 'svg'),\r\n            sourceExts: [...sourceExts, 'svg'],\r\n        },\r\n    };\r\n})()",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/metro.config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "getDefaultConfig",
    "memberof": "SmartPantry/metro.config.js",
    "static": true,
    "longname": "SmartPantry/metro.config.js~getDefaultConfig",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/metro.config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "SmartPantry/mutations.js",
    "content": "/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createPantry = /* GraphQL */ `\n  mutation CreatePantry(\n    $input: CreatePantryInput!\n    $condition: ModelPantryConditionInput\n  ) {\n    createPantry(input: $input, condition: $condition) {\n      id\n      name\n      owner\n      items {\n        nextToken\n      }\n      notiffreq\n      collabId\n      notifPending\n      notifTime\n      email\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updatePantry = /* GraphQL */ `\n  mutation UpdatePantry(\n    $input: UpdatePantryInput!\n    $condition: ModelPantryConditionInput\n  ) {\n    updatePantry(input: $input, condition: $condition) {\n      id\n      name\n      owner\n      items {\n        nextToken\n      }\n      notiffreq\n      collabId\n      notifPending\n      notifTime\n      email\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deletePantry = /* GraphQL */ `\n  mutation DeletePantry(\n    $input: DeletePantryInput!\n    $condition: ModelPantryConditionInput\n  ) {\n    deletePantry(input: $input, condition: $condition) {\n      id\n      name\n      owner\n      items {\n        nextToken\n      }\n      notiffreq\n      collabId\n      notifPending\n      notifTime\n      email\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const createItem = /* GraphQL */ `\n  mutation CreateItem(\n    $input: CreateItemInput!\n    $condition: ModelItemConditionInput\n  ) {\n    createItem(input: $input, condition: $condition) {\n      id\n      name\n      pantry {\n        id\n        name\n        owner\n        notiffreq\n        collabId\n        notifPending\n        notifTime\n        email\n        createdAt\n        updatedAt\n      }\n      list {\n        id\n        createdAt\n        updatedAt\n      }\n      imagePath\n      weight\n      currWeight\n      quantity\n      origQuantity\n      expDate\n      weight_flag\n      createdAt\n      updatedAt\n      pantryItemsId\n      shoppingListItemsId\n    }\n  }\n`;\nexport const updateItem = /* GraphQL */ `\n  mutation UpdateItem(\n    $input: UpdateItemInput!\n    $condition: ModelItemConditionInput\n  ) {\n    updateItem(input: $input, condition: $condition) {\n      id\n      name\n      pantry {\n        id\n        name\n        owner\n        notiffreq\n        collabId\n        notifPending\n        notifTime\n        email\n        createdAt\n        updatedAt\n      }\n      list {\n        id\n        createdAt\n        updatedAt\n      }\n      imagePath\n      weight\n      currWeight\n      quantity\n      origQuantity\n      expDate\n      weight_flag\n      createdAt\n      updatedAt\n      pantryItemsId\n      shoppingListItemsId\n    }\n  }\n`;\nexport const deleteItem = /* GraphQL */ `\n  mutation DeleteItem(\n    $input: DeleteItemInput!\n    $condition: ModelItemConditionInput\n  ) {\n    deleteItem(input: $input, condition: $condition) {\n      id\n      name\n      pantry {\n        id\n        name\n        owner\n        notiffreq\n        collabId\n        notifPending\n        notifTime\n        email\n        createdAt\n        updatedAt\n      }\n      list {\n        id\n        createdAt\n        updatedAt\n      }\n      imagePath\n      weight\n      currWeight\n      quantity\n      origQuantity\n      expDate\n      weight_flag\n      createdAt\n      updatedAt\n      pantryItemsId\n      shoppingListItemsId\n    }\n  }\n`;\nexport const createShoppingList = /* GraphQL */ `\n  mutation CreateShoppingList(\n    $input: CreateShoppingListInput!\n    $condition: ModelShoppingListConditionInput\n  ) {\n    createShoppingList(input: $input, condition: $condition) {\n      id\n      items {\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateShoppingList = /* GraphQL */ `\n  mutation UpdateShoppingList(\n    $input: UpdateShoppingListInput!\n    $condition: ModelShoppingListConditionInput\n  ) {\n    updateShoppingList(input: $input, condition: $condition) {\n      id\n      items {\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteShoppingList = /* GraphQL */ `\n  mutation DeleteShoppingList(\n    $input: DeleteShoppingListInput!\n    $condition: ModelShoppingListConditionInput\n  ) {\n    deleteShoppingList(input: $input, condition: $condition) {\n      id\n      items {\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const createWeightBuffer = /* GraphQL */ `\n  mutation CreateWeightBuffer(\n    $input: CreateWeightBufferInput!\n    $condition: ModelWeightBufferConditionInput\n  ) {\n    createWeightBuffer(input: $input, condition: $condition) {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateWeightBuffer = /* GraphQL */ `\n  mutation UpdateWeightBuffer(\n    $input: UpdateWeightBufferInput!\n    $condition: ModelWeightBufferConditionInput\n  ) {\n    updateWeightBuffer(input: $input, condition: $condition) {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteWeightBuffer = /* GraphQL */ `\n  mutation DeleteWeightBuffer(\n    $input: DeleteWeightBufferInput!\n    $condition: ModelWeightBufferConditionInput\n  ) {\n    deleteWeightBuffer(input: $input, condition: $condition) {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const createNewWeight = /* GraphQL */ `\n  mutation CreateNewWeight(\n    $input: CreateNewWeightInput!\n    $condition: ModelNewWeightConditionInput\n  ) {\n    createNewWeight(input: $input, condition: $condition) {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateNewWeight = /* GraphQL */ `\n  mutation UpdateNewWeight(\n    $input: UpdateNewWeightInput!\n    $condition: ModelNewWeightConditionInput\n  ) {\n    updateNewWeight(input: $input, condition: $condition) {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteNewWeight = /* GraphQL */ `\n  mutation DeleteNewWeight(\n    $input: DeleteNewWeightInput!\n    $condition: ModelNewWeightConditionInput\n  ) {\n    deleteNewWeight(input: $input, condition: $condition) {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/mutations.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "createPantry",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~createPantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{createPantry}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "updatePantry",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~updatePantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{updatePantry}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "deletePantry",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~deletePantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{deletePantry}",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "createItem",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~createItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{createItem}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "updateItem",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~updateItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{updateItem}",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "deleteItem",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~deleteItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{deleteItem}",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "createShoppingList",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~createShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{createShoppingList}",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "updateShoppingList",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~updateShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{updateShoppingList}",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "deleteShoppingList",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~deleteShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{deleteShoppingList}",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "createWeightBuffer",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~createWeightBuffer",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{createWeightBuffer}",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "updateWeightBuffer",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~updateWeightBuffer",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{updateWeightBuffer}",
    "description": null,
    "lineNumber": 246,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "deleteWeightBuffer",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~deleteWeightBuffer",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{deleteWeightBuffer}",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "createNewWeight",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~createNewWeight",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{createNewWeight}",
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "updateNewWeight",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~updateNewWeight",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{updateNewWeight}",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "deleteNewWeight",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~deleteNewWeight",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{deleteNewWeight}",
    "description": null,
    "lineNumber": 302,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "SmartPantry/queries.js",
    "content": "/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getPantry = /* GraphQL */ `\n  query GetPantry($id: ID!) {\n    getPantry(id: $id) {\n      id\n      name\n      owner\n      items {\n        nextToken\n      }\n      notiffreq\n      collabId\n      notifPending\n      notifTime\n      email\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listPantries = /* GraphQL */ `\n  query ListPantries(\n    $filter: ModelPantryFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listPantries(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        name\n        owner\n        notiffreq\n        collabId\n        notifPending\n        notifTime\n        email\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const getItem = /* GraphQL */ `\n  query GetItem($id: ID!) {\n    getItem(id: $id) {\n      id\n      name\n      pantry {\n        id\n        name\n        owner\n        notiffreq\n        collabId\n        notifPending\n        notifTime\n        email\n        createdAt\n        updatedAt\n      }\n      list {\n        id\n        createdAt\n        updatedAt\n      }\n      imagePath\n      weight\n      currWeight\n      quantity\n      origQuantity\n      expDate\n      weight_flag\n      createdAt\n      updatedAt\n      pantryItemsId\n      shoppingListItemsId\n    }\n  }\n`;\nexport const listItems = /* GraphQL */ `\n  query ListItems(\n    $filter: ModelItemFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listItems(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        name\n        imagePath\n        weight\n        currWeight\n        quantity\n        origQuantity\n        expDate\n        weight_flag\n        createdAt\n        updatedAt\n        pantryItemsId\n        shoppingListItemsId\n      }\n      nextToken\n    }\n  }\n`;\nexport const getShoppingList = /* GraphQL */ `\n  query GetShoppingList($id: ID!) {\n    getShoppingList(id: $id) {\n      id\n      items {\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listShoppingLists = /* GraphQL */ `\n  query ListShoppingLists(\n    $filter: ModelShoppingListFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listShoppingLists(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const getWeightBuffer = /* GraphQL */ `\n  query GetWeightBuffer($id: ID!) {\n    getWeightBuffer(id: $id) {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listWeightBuffers = /* GraphQL */ `\n  query ListWeightBuffers(\n    $filter: ModelWeightBufferFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listWeightBuffers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        upload_time\n        weight_data\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const getNewWeight = /* GraphQL */ `\n  query GetNewWeight($id: ID!) {\n    getNewWeight(id: $id) {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listNewWeights = /* GraphQL */ `\n  query ListNewWeights(\n    $filter: ModelNewWeightFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listNewWeights(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        upload_time\n        weight_data\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/queries.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "getPantry",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~getPantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{getPantry}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "listPantries",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~listPantries",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{listPantries}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "getItem",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~getItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{getItem}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "listItems",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~listItems",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{listItems}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "getShoppingList",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~getShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{getShoppingList}",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "listShoppingLists",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~listShoppingLists",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{listShoppingLists}",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "getWeightBuffer",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~getWeightBuffer",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{getWeightBuffer}",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "listWeightBuffers",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~listWeightBuffers",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{listWeightBuffers}",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "getNewWeight",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~getNewWeight",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{getNewWeight}",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "listNewWeights",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~listNewWeights",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{listNewWeights}",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "SmartPantry/react-native.config.js",
    "content": "\r\nmodule.export = {\r\n    project: {\r\n        ios: {},\r\n        android: {},\r\n    },\r\n    assets: ['./assets/fonts/Lato'],\r\n};",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/react-native.config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "SmartPantry/screens/About.js",
    "content": "import React, { Component } from \"react\";\r\nimport {\r\n  View,\r\n  ScrollView,\r\n  Text,\r\n  FlatList,\r\n  StyleSheet,\r\n} from \"react-native\";\r\n\r\n/**\r\n * @author Shannon Biega\r\n * @author Matthew Winston\r\n * @author Kollin Labowski\r\n * @param navigation - handles navigation from the Settings stack.\r\n * @returns The text and styling for the about page and its information.\r\n */\r\nconst AboutScreen = ({ navigation }) => {\r\n  return (\r\n    <ScrollView style={{backgroundColor: '#b5e48c', }}>\r\n      <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>What is The Smart Pantry app?</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      </View>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 20}}>Powered by hardware and software, The Smart Pantry app allows users to track food items stored in their kitchen pantry.</Text>\r\n\r\n      <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>What is the Smart Pantry mission?</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      </View>\r\n      <Text style={{fontSize: 25, textAlign: 'center', marginHorizontal: 10}}>★</Text>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 50}}>Aid elders in remembering their food items and living more independently​.</Text>\r\n\r\n      <Text style={{fontSize: 25, textAlign: 'center', marginHorizontal: 10}}>★</Text>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 20}}>Reduce food waste and malnutrition among elders.</Text>\r\n\r\n\r\n      <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>What does The Smart Pantry app do?</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      </View>\r\n\r\n      <Text style={{fontSize: 30, textAlign: 'center', marginHorizontal: 10}}>①</Text>\r\n      <Text style={{fontSize: 18, fontWeight:'bold', textAlign: 'center', marginHorizontal: 15}}>Food Tracking</Text>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 15}}>Allows a user to create a pantry and track food items stored in their pantry</Text>\r\n\r\n      <Text style={{fontSize: 30, textAlign: 'center', margin: 10}}>②</Text>\r\n      <Text style={{fontSize: 18, fontWeight:'bold', textAlign: 'center', marginHorizontal: 15}}>Add Items</Text>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 50}}>Allows a user to add an item to the pantry by scanning its barcode or manually adding the information</Text>\r\n      \r\n      <Text style={{fontSize: 30, textAlign: 'center', margin: 10}}>③</Text>\r\n      <Text style={{fontSize: 18, fontWeight:'bold', textAlign: 'center', marginHorizontal: 15}}>Remove Items</Text>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 30}}>Allows a user to remove an item from the pantry (when it has run out or is no longer wanted)</Text>\r\n\r\n      <Text style={{fontSize: 30, textAlign: 'center', margin: 10}}>④</Text>\r\n      <Text style={{fontSize: 18, fontWeight:'bold', textAlign: 'center', marginHorizontal: 15}}>Notifications</Text>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 35}}>Notify users when an item's quantity is running low or expiration date is near{'\\n'}</Text>\r\n      \r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  paddedHeading : {\r\n    fontWeight: 'bold',\r\n    fontSize: 19,\r\n    textAlign: 'center',\r\n    margin: 20\r\n  },\r\n  bullets: {\r\n    paddingVertical: 20,\r\n    fontSize: 18\r\n  },\r\n  default: {\r\n    flex: 1, \r\n    alignItems: \"flex-start\", \r\n    justifyContent: \"flex-start\", \r\n    marginTop: 15, \r\n    marginLeft: 25, \r\n    marginRight: 25,\r\n    fontSize: 18\r\n  }\r\n});\r\n\r\nexport default AboutScreen;\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/About.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/screens/About.js",
    "static": true,
    "longname": "SmartPantry/screens/About.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/About.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "AboutScreen",
    "memberof": "SmartPantry/screens/About.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/About.js~AboutScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/About.js",
    "importStyle": "AboutScreen",
    "description": "",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Shannon Biega"
      },
      {
        "tagName": "@author",
        "tagValue": "Matthew Winston"
      },
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@returns",
        "tagValue": "The text and styling for the about page and its information."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "handles navigation from the Settings stack."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The text and styling for the about page and its information."
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "SmartPantry/screens/Accounts.js",
    "content": "import { UserAgent } from \"amazon-cognito-identity-js\";\r\nimport React, { Component, useState, useEffect } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  Alert,\r\n  ScrollView,\r\n  Linking,\r\n  StyleSheet\r\n} from \"react-native\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport { updatePantry } from \"../mutations\";\r\nimport { getPantry, listPantries, listItems,getShoppingList } from \"../queries\";\r\nimport { Button, Input } from \"react-native-elements\";\r\nimport qs from 'qs';\r\nimport { deletePantry, deleteShoppingList, deleteItem } from \"../mutations\";\r\n\r\n\r\n// Imports to be used if the QR code method is used for this part\r\n// import ReactDOM from \"react-dom\";\r\n// import QRCode from 'qrcode';\r\n\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <DisplayQRCode text=\"Enter String Here :)\" />\r\n//   </React.StrictMode>\r\n// );\r\n\r\n//This is the ID for one of my accounts (Kollin) used for testing functionality of collaborator accounts\r\nconst testID = \"0350bfeb-7f0f-45b3-b699-3a6607446a12\";\r\n\r\n/**\r\n * @author Kollin Labowski\r\n * @param {String} userToAdd - The email address of the user to add as a collaborator for the current user's pantry.\r\n */\r\nconst addStringToDatabase = async (userToAdd) => {\r\n  try {\r\n    const user = await Auth.currentAuthenticatedUser();\r\n\r\n    const pantryData = await API.graphql(\r\n      graphqlOperation(getPantry, { id: user.username.toString() })\r\n    );\r\n\r\n    if (pantryData.data.getPantry == null) {\r\n      Alert.alert(\"Collaborator Error\", \"You must create a pantry before you can add a collaborator\")\r\n      return null;\r\n    }\r\n\r\n    const update = {\r\n      id: user.username.toString(),\r\n      collabId: userToAdd,\r\n    }\r\n\r\n    const u = await API.graphql(graphqlOperation(updatePantry, {input: update}));\r\n\r\n    Alert.alert(\"Add Collaborator\", \"Successfully added collaborator \\\"\" + userToAdd + \"\\\". Would you like to send them an email to let them know?\", [\r\n      {\r\n        text: \"Yes\",\r\n        onPress: async () => {\r\n          sendEmail(\r\n            userToAdd,\r\n               'SMART PANTRY Collaboration Notification',\r\n            'I just added you as a collaborator to my pantry! This means that you can view my pantry on your account with the Smart Pantry app. Please email SmartPantryGerontech@gmail.com with any questions you may have!',\r\n          { cc: 'SmartPantryGerontech@gmail.com' }\r\n          ).then(() => {\r\n            console.log('Message sent successfully!');\r\n          });\r\n        }\r\n      },\r\n      {\r\n        text: \"No\",\r\n        style: \"cancel\",\r\n      }\r\n    ])\r\n\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n/**\r\n * @return Deletes the current user's pantry, shopping list, and all of their items.\r\n */\r\nconst deleteUserPantry = async () => {\r\n  try {\r\n    console.log(\"DELTE\")\r\n    const user = await Auth.currentAuthenticatedUser();\r\n\r\n    const pantryData = await API.graphql(\r\n      graphqlOperation(getPantry, { id: user.username.toString() })\r\n    );\r\n\r\n      // if the getPantry query does not return a null value, sets pantry exists to true\r\n      // otherwise sets it to false because they don't have a pantry yet\r\n      if (pantryData.data.getPantry == null) {\r\n        Alert.alert(\"Delete Pantry\", \"You do not have a pantry\");\r\n      }\r\n      else {\r\n\r\n      // Grabs the id field from the pantry data\r\n      const pantryId = pantryData.data.getPantry.id;\r\n\r\n      // Grabs the items that are related to the id of the pantry\r\n      const itemsList = await API.graphql(\r\n        graphqlOperation(listItems, {\r\n          filter: {\r\n            pantryItemsId: {\r\n              eq: pantryId.toString(),\r\n            },\r\n          },\r\n        })\r\n      );\r\n\r\n      // stores the value of the items returned\r\n      const b = itemsList.data.listItems.items;\r\n      // alert(JSON.stringify(itemsList.data.listItems.items));\r\n      const deleteAllItems = b.map( async (item) => {\r\n        const deletionId = {\r\n          id: item.id,\r\n        };\r\n        const delPantryItem = await API.graphql(graphqlOperation(deleteItem, { input: deletionId }));\r\n      });\r\n\r\n      const shoppingListData = await API.graphql(\r\n        graphqlOperation(getShoppingList, { id: user.username.toString() })\r\n      );\r\n\r\n      const shoppingListId = shoppingListData.data.getShoppingList.id;\r\n\r\n      const shoppingItemsList = await API.graphql(\r\n        graphqlOperation(listItems, {\r\n          filter: {\r\n            shoppingListItemsId: {\r\n              eq: shoppingListId.toString(),\r\n            },\r\n          },\r\n        })\r\n      );\r\n\r\n      const c = shoppingItemsList.data.listItems.items;\r\n\r\n      const deleteAllShoppingItems = c.map( async (item) => {\r\n        const deletionId = {\r\n          id: item.id,\r\n        };\r\n        const delPantryItem = await API.graphql(graphqlOperation(deleteItem, { input: deletionId }));\r\n      });\r\n\r\n      const delId = {\r\n        id: user.username.toString()\r\n      }\r\n\r\n      const delPantry = await API.graphql(graphqlOperation(deletePantry, { input: delId }));\r\n\r\n      const delShopping = await API.graphql(graphqlOperation(deleteShoppingList, { input: delId }));\r\n\r\n      Alert.alert(\"Delete Pantry\", \"Your pantry and has been deleted\");\r\n    }\r\n\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n// checks whether or not a user has a pantry yet\r\nconst checkIfPantryExists = async () => {\r\n  try {\r\n    const user = await Auth.currentAuthenticatedUser(); // grabs current user's information\r\n\r\n    // Performs the getPantry query based on user's id\r\n    const pantryData = await API.graphql(\r\n      graphqlOperation(getPantry, { id: user.username.toString() })\r\n    );\r\n\r\n    // If it's null, we want to render the create pantry button\r\n    // otherwise, we want to hide it\r\n    if (pantryData.data.getPantry == null) {\r\n      setCreatePantryButton(true);\r\n    } else {\r\n      setCreatePantryButton(null);\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n/**\r\n * \r\n * @param navigation - Navigation from the Settings screen \r\n * @returns All frontend data for the Accounts page, including user information, adding collaborators, and deleting user pantries.\r\n */\r\nconst AccountsScreen = ({ navigation }) => {\r\n  useEffect(() => {\r\n    const unsubscribe = navigation.addListener(\"focus\", () => {\r\n      getPantryInfo();\r\n    });\r\n    return unsubscribe;\r\n  }, [navigation]);\r\n\r\n  const [userText, setUserText] = useState(\"\");\r\n  const [pantryName, setPantryName] = useState(\"\");\r\n  const [pantryCreateDate, setpantryCreateDate] = useState(\"\");\r\n  const [pantryUpdateDate, setpantryUpdateDate] = useState(\"\");\r\n  var [pantrySize, setpantrySize] = useState();\r\n  const [pantryID, setpantryID] = useState(\"\");\r\n\r\n\r\n  const getPantryInfo = async () => {\r\n    try {\r\n        const user = await Auth.currentAuthenticatedUser();\r\n        const pantryData = await API.graphql(\r\n            graphqlOperation(getPantry, { id: user.username.toString() })\r\n        );\r\n\r\n        if (pantryData.data.getPantry == null) {\r\n          setPantryExists(false);\r\n      }\r\n      else{\r\n        setPantryName(pantryData.data.getPantry.name);\r\n        setpantryCreateDate([pantryData.data.getPantry.createdAt.substring(5,10),'-',pantryData.data.getPantry.createdAt.substring(0,4)]);\r\n        setpantryUpdateDate([pantryData.data.getPantry.createdAt.substring(5,10),'-',pantryData.data.getPantry.createdAt.substring(0,4)]);\r\n        setpantryID(pantryData.data.getPantry.id);\r\n        setPantryExists(true);\r\n        const pantryId = pantryData.data.getPantry.id;\r\n\r\n        const itemsList = await API.graphql(\r\n        graphqlOperation(listItems, {\r\n          filter: {\r\n            pantryItemsId: {\r\n            eq: pantryId.toString(),\r\n            },\r\n          },\r\n        })\r\n        );\r\n\r\n            const b = itemsList.data.listItems.items;\r\n\r\n            let itemCount = 0;\r\n\r\n            const countItems = b.map( async (item) => {\r\n                itemCount += 1;\r\n            });\r\n        setpantrySize(itemCount);\r\n          }\r\n    } catch(err) {\r\n        console.log(\"made it\");\r\n    }\r\n}\r\n  const [pantryExists, setPantryExists] = useState(false);\r\n  const [createPantryButton, setCreatePantryButton] = useState(null);\r\n\r\n\r\n  return (\r\n    <ScrollView style={{backgroundColor: '#b5e48c'}}>\r\n        {!pantryExists && <Text style={[styles.body]}>You must create a pantry before you can manage it.</Text>}\r\n\r\n        {pantryExists && (\r\n          <View\r\n            style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}\r\n          >\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        <View><Text style={[styles.paddedHeading, styles.width_pantryName]}>Pantry Name</Text></View>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        </View> \r\n        <Text style={{fontSize: 17, textAlign: 'center', margin: 10}}>{pantryName}</Text>\r\n\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        <View><Text style={[styles.paddedHeading, styles.width_createDate]}>Pantry Create Date</Text></View>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        </View> \r\n        <Text style={{fontSize: 17, textAlign: 'center', margin: 10}}>{pantryCreateDate}</Text>\r\n\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        <View><Text style={[styles.paddedHeading, styles.width_updateDate]}>Pantry Last Update Date</Text></View>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        </View> \r\n        <Text style={{fontSize: 17, textAlign: 'center', margin: 10}}>{pantryUpdateDate}</Text>\r\n\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        <View><Text style={[styles.paddedHeading, styles.width_size]}>Pantry Size</Text></View>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        </View> \r\n        <Text style={{fontSize: 17, textAlign: 'center', margin: 10}}>{pantrySize}</Text>\r\n\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        <View><Text style={[styles.paddedHeading, styles.width_ID]}>Pantry ID</Text></View>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        </View> \r\n        <Text style={{fontSize: 17, textAlign: 'center', margin: 10}}>{pantryID}</Text>\r\n\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        <View><Text style={[styles.paddedHeading, styles.width_addCollaborator]}>Add Collaborator to Your Pantry</Text></View>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        </View> \r\n        <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 15}}>{'\\n'}Add a collaborator to your pantry by inputting their email in the space below.\r\n        Collaborators will be able to view the contents of your pantry, but can not modify it in any way.{'\\n'}</Text>      \r\n      \r\n      <Input\r\n        placeholder=\"Enter Collaborator Email\"\r\n        containerStyle={{ width: \"100%\" }}\r\n        textAlign={'center'}\r\n        onChangeText={(value) => setUserText(value)}\r\n      />\r\n\r\n      <Button buttonStyle={{ marginTop:10,\r\n        paddingTop:15,\r\n        paddingBottom:15,\r\n        marginLeft:90,\r\n        marginRight:90,\r\n        marginBottom: 50,\r\n        backgroundColor:'#3D405B',\r\n        borderRadius:10,\r\n        borderWidth: 1,\r\n        borderColor: '#ffffff' }}\r\n        onPress={ async () => {\r\n          Alert.alert(\"Add Collaborator\", \"Add collaborator with ID \\\"\" + userText + \"\\\" to your pantry? Doing so will remove your current collaborator if you have one.\", [\r\n            {\r\n              text: \"Yes\",\r\n              onPress: async () => {\r\n                //NOTE: The userText field should be the ID of the user to add. Want to implement a QR code generator/scanner\r\n                //to make this process seamless and not tedious.\r\n                await addStringToDatabase(userText);\r\n              }\r\n            },\r\n            {\r\n              text: \"No\",\r\n              style: \"cancel\",\r\n            }\r\n          ])\r\n        }}\r\n        title=\"Add Collaborator to Pantry\"\r\n        color=\"orange\"\r\n        accessibilityLabel=\"Click here to add this collaborator to your pantry\"\r\n\r\n      \r\n      />\r\n\r\n      <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        <View><Text style={[styles.paddedHeading, styles.width_createDate]}>Delete Your Pantry</Text></View>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      </View>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 15}}>Click the below button to delete your pantry.{'\\n'}</Text>  \r\n\r\n      <Button buttonStyle={{ marginTop:10,\r\n        paddingTop:15,\r\n        paddingBottom:15,\r\n        marginLeft:145,\r\n        marginRight:145,\r\n        marginBottom: 50,\r\n        backgroundColor:'#3D405B',\r\n        borderRadius:10,\r\n        borderWidth: 1,\r\n        borderColor: '#ffffff' }}\r\n        onPress={ async () => {\r\n          Alert.alert(\"Delete Pantry\", \"Would you like to delete your pantry? This will also delete your Shopping List.\", [\r\n            {\r\n              text: \"Yes\",\r\n              onPress: async () => {\r\n                await deleteUserPantry();\r\n              }\r\n            },\r\n            {\r\n              text: \"No\",\r\n              style: \"cancel\",\r\n            }\r\n          ])\r\n          }}\r\n        \r\n        title=\"Delete Pantry\"\r\n        color=\"orange\"\r\n        accessibilityLabel=\"Click here to delete your pantry\"\r\n\r\n      \r\n      />\r\n      </View>\r\n        )}\r\n\r\n      {/* <Button\r\n        onPress={ async () => {\r\n            // Alert.alert(\"View Other Pantry\", \"This will take you to view another user's pantry, assuming you have access\");\r\n            viewOtherPantry();\r\n        }}\r\n        title=\"Click here to view another pantry\"\r\n        color=\"purple\"\r\n        accessibilityLabel=\"Click here to view another pantry\"\r\n      /> */}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\n/**\r\n * \r\n * @param {String} to - The email address to send the email to.\r\n * @param {String} subject - The subject header to use for the email.\r\n * @param {String} body - The body of the email message.\r\n * @param {String} options - Options for cc or bcc line of message.\r\n * @returns URL for the query to open the user's email application.\r\n */\r\nexport async function sendEmail(to, subject, body, options = {}) {\r\n  const { cc, bcc } = options;\r\n\r\n  let url = `mailto:${to}`;\r\n\r\n  // Create email link query\r\n  const query = qs.stringify({\r\n      subject: subject,\r\n      body: body,\r\n      cc: cc,\r\n      bcc: bcc\r\n  });\r\n\r\n  if (query.length) {\r\n      url += `?${query}`;\r\n  }\r\n\r\n  // check if we can use this link\r\n  const canOpen = await Linking.canOpenURL(url);\r\n\r\n  if (!canOpen) {\r\n      throw new Error('Provided URL can not be handled');\r\n  }\r\n\r\n  return Linking.openURL(url);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  paddedHeading : {\r\n    fontWeight: 'bold',\r\n    fontSize: 19,\r\n    textAlign: 'center',\r\n    margin: 20\r\n  },\r\n  body:{\r\n    fontSize: 18,\r\n    textAlign: 'center',\r\n    margin: 75,\r\n  },\r\n  width_pantryName:{\r\n      width: 125,\r\n  },\r\n  width_createDate:{\r\n      width: 175,\r\n  },\r\n  width_updateDate:{\r\n      width: 150,\r\n  },\r\n  width_ID:{\r\n    width: 90,\r\n  },\r\n  width_addCollaborator:{\r\n    width: 289,\r\n  }\r\n});\r\n\r\n\r\n\r\nexport default AccountsScreen;",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/Accounts.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "testID",
    "memberof": "SmartPantry/screens/Accounts.js",
    "static": true,
    "longname": "SmartPantry/screens/Accounts.js~testID",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Accounts.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "addStringToDatabase",
    "memberof": "SmartPantry/screens/Accounts.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Accounts.js~addStringToDatabase",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Accounts.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "userToAdd",
        "description": "The email address of the user to add as a collaborator for the current user's pantry."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "deleteUserPantry",
    "memberof": "SmartPantry/screens/Accounts.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Accounts.js~deleteUserPantry",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Accounts.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 85,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Deletes the current user's pantry, shopping list, and all of their items."
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "checkIfPantryExists",
    "memberof": "SmartPantry/screens/Accounts.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Accounts.js~checkIfPantryExists",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Accounts.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "sendEmail",
    "memberof": "SmartPantry/screens/Accounts.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Accounts.js~sendEmail",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Accounts.js",
    "importStyle": "{sendEmail}",
    "description": "",
    "lineNumber": 407,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "URL for the query to open the user's email application."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "The email address to send the email to."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The subject header to use for the email."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The body of the email message."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options for cc or bcc line of message."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "URL for the query to open the user's email application."
    }
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/screens/Accounts.js",
    "static": true,
    "longname": "SmartPantry/screens/Accounts.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Accounts.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 434,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "AccountsScreen",
    "memberof": "SmartPantry/screens/Accounts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Accounts.js~AccountsScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Accounts.js",
    "importStyle": "AccountsScreen",
    "description": "",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "All frontend data for the Accounts page, including user information, adding collaborators, and deleting user pantries."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "Navigation from the Settings screen"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "All frontend data for the Accounts page, including user information, adding collaborators, and deleting user pantries."
    }
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "SmartPantry/screens/AddItem.js",
    "content": "import React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, View, Text, Alert } from \"react-native\";\r\nimport { Button, Input } from \"react-native-elements\";\r\nimport {Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport { createItem } from \"../mutations\";\r\nimport { listNewWeights, getNewWeight } from \"../queries\";\r\n\r\n\r\n/**\r\n * @author Ryan Mraz\r\n * @author Kollin Labowski\r\n * @author Matthew Winston\r\n * @param navigation - Used for navigating from the Home stack. \r\n * @returns - Returns inputs and buttons for getting information about an item to add. Will return immediately if an input expiration date is the wrong format.\r\n */\r\nconst AddItemScreen = ({ navigation }) => {\r\n\r\n\r\n  \r\nconst [nameText, setNameText] = useState(\"\");\r\nconst [weightText, setWeightText] = useState(\"\");\r\nconst [quantityText, setQuantityText] = useState(\"\");\r\nconst [expirationText, setExpirationText] = useState(\"\");\r\n\r\nconst theWeightBuffer = async () => {\r\n  const weightsList = await API.graphql(graphqlOperation(listNewWeights));\r\n  \r\n\r\n  const b = weightsList.data.listNewWeights.items;\r\n  // console.log(b);\r\n  if(b.length > 0) {\r\n    // console.log(b[0].id);\r\n    let most_recent = 0;\r\n\r\n    const viewItems = b.map( async (item) => {\r\n      if(item.id > most_recent)\r\n        most_recent = item.id;\r\n\r\n      const json_string = item.weight_data;\r\n      const item_weight = parseFloat(json_string.substring(json_string.indexOf(\"value\") + \"value\\\":\".length, json_string.indexOf(\"}\")));\r\n      console.log(item_weight);\r\n    });\r\n\r\n    console.log(\"ITEM TO ADD: \" + most_recent);\r\n\r\n    const weightData = await API.graphql(\r\n      graphqlOperation(getNewWeight, { id: most_recent })\r\n    );\r\n\r\n    let weight_to_add = weightData.data.getNewWeight.weight_data;\r\n    weight_to_add = parseFloat(weight_to_add.substring(weight_to_add.indexOf(\"value\") + \"value\\\":\".length, weight_to_add.indexOf(\"}\")));\r\n    console.log(weight_to_add);\r\n\r\n    addPantryItem(weight_to_add);\r\n  }\r\n  else {\r\n    console.log(\"Not in DB\");\r\n  }\r\n}\r\n\r\nconst addPantryItem = async (scale_weight) => {\r\n\r\n  if (nameText == \"\") {\r\n    Alert.alert(\"Add Item\", \"Please add a name for your item\")\r\n    return;\r\n  }\r\n\r\n  const user = await Auth.currentAuthenticatedUser();\r\n\r\n  let input_date = expirationText;\r\n  console.log(\"expirationText \" + input_date);\r\n  if(input_date != \"\" && (input_date.length != 10 || input_date.charAt(2) != '/' || input_date.charAt(5) != '/')) {\r\n    Alert.alert(\"Add Item\", \"Date must be in a numerical format, ex: 02/11/2023\");\r\n    return;\r\n  }\r\n\r\n  input_date = input_date.replace(\"/\", \"\");\r\n  input_date = input_date.replace(\"/\", \"\");\r\n\r\n  for(let i = 0; i < input_date.length; i++) {\r\n    if(input_date.charAt(i) < '0' || input_date.charAt(i) > '9') {\r\n      Alert.alert(\"Add Item\", \"Date must be in a numerical format, ex: 02/11/2023\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  if((input_date.charAt(0) > '1' || input_date.charAt(2) > '3' || input_date.charAt(4) < '2') && input_date != \"\") {\r\n    Alert.alert(\"Add Item\", \"Expiration date must be a valid date in the future\");\r\n    return;\r\n  }\r\n\r\n  console.log(\"New Exp Date \" + input_date);\r\n\r\n  let add_weight = 0;\r\n  if(scale_weight == null || scale_weight == 0) {\r\n    add_weight = parseFloat(weightText);\r\n    console.log(\"Normal add\");\r\n  }\r\n  else {\r\n    add_weight = scale_weight;\r\n    console.log(\"Scale add\");\r\n  }\r\n\r\n  const itemInput = {\r\n    name: nameText,\r\n    imagePath: \"default_img\",\r\n    weight: add_weight,\r\n    currWeight: add_weight,\r\n    quantity: parseInt(quantityText),\r\n    origQuantity: parseInt(quantityText),\r\n    expDate: parseInt(input_date),\r\n    pantryItemsId: user.username.toString(),\r\n  };\r\n  const inputItem = await API.graphql(\r\n    graphqlOperation(createItem, { input: itemInput })\r\n  );\r\n\r\n  //TODO: Here, add a function to delete remaining weighed items if scale_weight != null\r\n\r\n  navigation.navigate(\"HomeStack\");\r\n};\r\n  \r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\", backgroundColor: '#b5e48c'}}>\r\n      <Input\r\n        placeholder=\"Name (i.e. bananas)\"\r\n        containerStyle={{ width: 250 }}\r\n        onChangeText={(value) => setNameText(value)}\r\n      />\r\n      <Input\r\n        placeholder=\"Weight (lbs.) (optional)\"\r\n        containerStyle={{ width: 250 }}\r\n        onChangeText={(value) => setWeightText(value)}\r\n      />\r\n      <Input\r\n        placeholder=\"Quantity (optional)\"\r\n        containerStyle={{ width: 250 }}\r\n        onChangeText={(value) => setQuantityText(value)}\r\n      />\r\n      <Input\r\n        placeholder=\"Expiration Date (optional)\"\r\n        containerStyle={{ width: 250 }}\r\n        onChangeText={(value) => setExpirationText(value)}\r\n      />\r\n      <Text>Format for expiration date: MM/DD/YYYY</Text>\r\n      <Button\r\n        title=\"Barcode Add\"\r\n        buttonStyle={{ marginTop:10,\r\n          paddingTop:15,\r\n          paddingBottom:15,\r\n          backgroundColor:'#3D405B',\r\n          borderRadius:10,\r\n          borderWidth: 1,\r\n          borderColor: '#fff' }}\r\n        onPress={() => {\r\n          navigation.navigate(\"BarcodeAdd\");\r\n        }}\r\n      ></Button>\r\n      <Button\r\n        title=\"Use Scale\"\r\n        buttonStyle={{ marginTop:10,\r\n          paddingTop:15,\r\n          paddingBottom:15,\r\n          backgroundColor:'#3D405B',\r\n          borderRadius:10,\r\n          borderWidth: 1,\r\n          borderColor: '#fff' }}\r\n        onPress={() => {\r\n          Alert.alert(\"Weigh Item\", \"Please place the item you would like to weigh on the scale and wait a few seconds\");\r\n          setTimeout(theWeightBuffer, 5000);\r\n        }}\r\n      ></Button>\r\n      <Button\r\n        buttonStyle={{ marginTop:10,\r\n          paddingTop:15,\r\n          paddingBottom:15,\r\n          backgroundColor:'#3D405B',\r\n          borderRadius:10,\r\n          borderWidth: 1,\r\n          borderColor: '#fff' }}\r\n        title=\"Submit\"\r\n        onPress={() => {\r\n          addPantryItem(null);\r\n        }}\r\n      ></Button>\r\n    </View>\r\n  );\r\n};\r\n\r\n\r\nexport default AddItemScreen;\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/AddItem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "AddItemScreen",
    "memberof": "SmartPantry/screens/AddItem.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/AddItem.js~AddItemScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/AddItem.js",
    "importStyle": "AddItemScreen",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Ryan Mraz"
      },
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@author",
        "tagValue": "Matthew Winston"
      },
      {
        "tagName": "@returns",
        "tagValue": "- Returns inputs and buttons for getting information about an item to add. Will return immediately if an input expiration date is the wrong format."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "Used for navigating from the Home stack."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Returns inputs and buttons for getting information about an item to add. Will return immediately if an input expiration date is the wrong format."
    }
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "SmartPantry/screens/AddShoppingListItem.js",
    "content": "import React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, View, Text, Alert } from \"react-native\";\r\nimport { Button, Input } from \"react-native-elements\";\r\nimport {Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport { createItem } from \"../mutations\";\r\n\r\n/**\r\n * @author Kollin Labowski\r\n * @param navigate - Used for navigating from the Shopping List stack \r\n * @returns An input and a button for getting a name for the item to add to the shopping list.\r\n */\r\nconst AddShoppingListItemScreen = ({ navigation }) => {\r\n  \r\nconst [nameText, setNameText] = useState(\"\");\r\n\r\nconst addShoppingListItem = async () => {\r\n  if (nameText == \"\") {\r\n    return;\r\n  }\r\n\r\n  const user = await Auth.currentAuthenticatedUser();\r\n  const itemInput = {\r\n    name: nameText,\r\n    imagePath: \"default_img\",\r\n    shoppingListItemsId: user.username.toString(),\r\n  };\r\n  const inputItem = await API.graphql(\r\n    graphqlOperation(createItem, { input: itemInput })\r\n  );\r\n//   navigation.navigate(\"HomeStack\");\r\nAlert.alert(\"Shopping List\", \"Added \" + nameText + \" to your Shopping List\"); // Temporary fix, unless we prefer this method\r\n};\r\n  \r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\", backgroundColor: '#b5e48c'}}>\r\n      <Input\r\n        placeholder=\"Name (i.e. bananas)\"\r\n        containerStyle={{ width: 250 }}\r\n        onChangeText={(value) => setNameText(value)}\r\n      />\r\n\r\n      <Button\r\n        buttonStyle={{ marginTop:10,\r\n        paddingTop:15,\r\n        paddingBottom:15,\r\n        marginLeft:30,\r\n        marginRight:30,\r\n        backgroundColor:'#3D405B',\r\n        borderRadius:10,\r\n        borderWidth: 1,\r\n        borderColor: '#fff' }}\r\n        title=\"Submit\"\r\n        onPress={() => {\r\n          addShoppingListItem();\r\n        }}\r\n      ></Button>\r\n    </View>\r\n  );\r\n};\r\n\r\n\r\nexport default AddShoppingListItemScreen;\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/AddShoppingListItem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "AddShoppingListItemScreen",
    "memberof": "SmartPantry/screens/AddShoppingListItem.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/AddShoppingListItem.js~AddShoppingListItemScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/AddShoppingListItem.js",
    "importStyle": "AddShoppingListItemScreen",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@returns",
        "tagValue": "An input and a button for getting a name for the item to add to the shopping list."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigate",
        "description": "Used for navigating from the Shopping List stack"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "An input and a button for getting a name for the item to add to the shopping list."
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "SmartPantry/screens/BarcodeAdd.js",
    "content": "import React, {useState, useEffect } from \"react\";\r\nimport { Input, Button } from \"react-native-elements\";\r\nimport { View, Text, StyleSheet, Alert, Modal} from \"react-native\";\r\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\r\nimport { createItem } from \"../mutations\";\r\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\r\nimport { listNewWeights, getNewWeight } from \"../queries\";\r\n\r\n/**\r\n * @author Ryan Mraz\r\n * @param navigation - Used to navigate on the Home stack. \r\n * @returns Inputs and buttons for allowing the user to continue on to add the item into the database after scanning it.\r\n */\r\n \r\n\r\nconst BarcodeAddScreen = ({ navigation }) => {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const handleModal = () => setIsModalVisible(() => !isModalVisible);\r\n\r\n  const [nameText, setNameText] = useState(\"\");\r\n  const [weightText, setWeightText] = useState(\"\");\r\n  const [quantityText, setQuantityText] = useState(\"\");\r\n\r\n  const addPantryItem = async (scale_weight) => {\r\n    if (nameText == \"\") {\r\n      return;\r\n    }\r\n\r\n    console.log(\"HERE!!!\");\r\n\r\n    let add_weight = 0;\r\n\r\n    if(scale_weight != null || scale_weight == 0) {\r\n      console.log(\"READING: \" + scale_weight);\r\n      add_weight = scale_weight;\r\n    } \r\n    else {\r\n      add_weight = parseFloat(weightText);\r\n    }\r\n\r\n    const user = await Auth.currentAuthenticatedUser();\r\n    const itemInput = {\r\n      name: nameText,\r\n      imagePath: \"default_img\",\r\n      weight: add_weight,\r\n      currWeight: add_weight,\r\n      quantity: parseInt(quantityText),\r\n      pantryItemsId: user.username.toString(),\r\n    };\r\n    const inputItem = await API.graphql(\r\n      graphqlOperation(createItem, { input: itemInput })\r\n    );\r\n    navigation.navigate(\"AddItem\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === \"granted\");\r\n    })();\r\n  }, []);\r\n\r\n  const theWeightBuffer = async () => {\r\n    console.log(\"TEST THIS\");\r\n    const weightsList = await API.graphql(graphqlOperation(listNewWeights));\r\n    \r\n  \r\n    const b = weightsList.data.listNewWeights.items;\r\n    // console.log(b);\r\n    if(b.length > 0) {\r\n      // console.log(b[0].id);\r\n      let most_recent = 0;\r\n  \r\n      const viewItems = b.map( async (item) => {\r\n        if(item.id > most_recent)\r\n          most_recent = item.id;\r\n  \r\n        const json_string = item.weight_data;\r\n        const item_weight = parseFloat(json_string.substring(json_string.indexOf(\"value\") + \"value\\\":\".length, json_string.indexOf(\"}\")));\r\n        console.log(item_weight);\r\n      });\r\n  \r\n      console.log(\"ITEM TO ADD: \" + most_recent);\r\n  \r\n      const weightData = await API.graphql(\r\n        graphqlOperation(getNewWeight, { id: most_recent })\r\n      );\r\n  \r\n      let weight_to_add = weightData.data.getNewWeight.weight_data;\r\n      weight_to_add = parseFloat(weight_to_add.substring(weight_to_add.indexOf(\"value\") + \"value\\\":\".length, weight_to_add.indexOf(\"}\")));\r\n      console.log(\"WRITING: \" + weight_to_add);\r\n  \r\n      addPantryItem(weight_to_add);\r\n    }\r\n    else {\r\n      console.log(\"Not in DB\");\r\n    }\r\n  }\r\n\r\n  // test api call with edamam\r\n  const fetchApiCall = (upcCode) => {\r\n    fetch(\r\n      \"https://api.edamam.com/api/food-database/v2/parser?app_id=a82b5608&app_key=0024069e0841f1b87a40123aeefab05c&upc=\" + `${upcCode}` + \"&nutrition-type=cooking\",\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        try {\r\n\r\n          // response.hints[0].food.label -> name of the food item\r\n          // Alert.alert(response.hints[0].food.label);\r\n          setNameText(response.hints[0].food.label);\r\n          handleModal();\r\n        } catch (err) {\r\n          Alert.alert('Couldn\\'t find barcode, please manually add');\r\n          navigation.navigate(\"AddItem\");\r\n        } \r\n      });\r\n  };\r\n\r\n  if (hasPermission === null) {\r\n    return <Text style={{textAlign: \"center\"}}>{'\\n'}Requesting for camera permissions</Text>;\r\n  }\r\n\r\n  if (hasPermission === false) {\r\n    return <Text style={{textAlign: \"center\"}}>{'\\n'}No access to camera!</Text>;\r\n  }\r\n\r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\",backgroundColor: '#b5e48c' }}>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={\r\n          scanned\r\n            ? undefined\r\n            : ({ data }) => {\r\n                setScanned(true);\r\n                fetchApiCall(data);\r\n              }\r\n        }\r\n        style={StyleSheet.absoluteFillObject}\r\n      />\r\n      <Modal visible={isModalVisible} animationType=\"slide\">\r\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\",backgroundColor: '#b5e48c' }}>\r\n          <Text style={{width: 250}}>{nameText}</Text>\r\n          <Input\r\n            placeholder=\"Weight (lbs.) (optional)\"\r\n            containerStyle={{ width: 250 }}\r\n            onChangeText={(value) => setWeightText(value)}\r\n          />\r\n          <Input\r\n            placeholder=\"Quantity (optional)\"\r\n            containerStyle={{ width: 250 }}\r\n            onChangeText={(value) => setQuantityText(value)}\r\n          />\r\n          <Button\r\n            buttonStyle={{ \r\n              marginLeft:50,\r\n              marginRight:50,\r\n              backgroundColor:'#3D405B',\r\n              borderRadius:10,\r\n              borderWidth: 1,\r\n              width: 100,\r\n              borderColor: '#fff' }} \r\n            title=\"Use Scale\"\r\n            onPress={() => {\r\n              Alert.alert(\"Weigh Item\", \"Please place the item you would like to weigh on the scale and wait a few seconds\");\r\n              setTimeout(theWeightBuffer, 5000);\r\n            }}\r\n          ></Button>\r\n          <Button\r\n            buttonStyle={{ \r\n              marginLeft:50,\r\n              marginRight:50,\r\n              marginTop:10,\r\n              backgroundColor:'#3D405B',\r\n              borderRadius:10,\r\n              borderWidth: 1,\r\n              width: 100,\r\n              borderColor: '#fff' }} \r\n            title=\"Submit\"\r\n            onPress={() => {\r\n              addPantryItem(null);\r\n            }}\r\n          ></Button>\r\n          <Button buttonStyle={{ \r\n            marginLeft:50,\r\n            marginRight:50,\r\n            marginTop: 10,\r\n            backgroundColor:'#3D405B',\r\n            borderRadius:10,\r\n            borderWidth: 1,\r\n            width: 100,\r\n            borderColor: '#fff' }}  title=\"Go Back\" onPress={handleModal}></Button>\r\n        </View>\r\n      </Modal>\r\n      {scanned && (\r\n        <Button\r\n          title={\"Tap to Scan again\"}buttonStyle={{ \r\n            marginLeft:50,\r\n            marginRight:50,\r\n            backgroundColor:'#3D405B',\r\n            borderRadius:10,\r\n            borderWidth: 1,\r\n            width: 200,\r\n            borderColor: '#fff' }} \r\n          onPress={() => setScanned(false)}\r\n        ></Button>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default BarcodeAddScreen;\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/BarcodeAdd.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "BarcodeAddScreen",
    "memberof": "SmartPantry/screens/BarcodeAdd.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/BarcodeAdd.js~BarcodeAddScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/BarcodeAdd.js",
    "importStyle": "BarcodeAddScreen",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Ryan Mraz"
      },
      {
        "tagName": "@returns",
        "tagValue": "Inputs and buttons for allowing the user to continue on to add the item into the database after scanning it."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "Used to navigate on the Home stack."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Inputs and buttons for allowing the user to continue on to add the item into the database after scanning it."
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "SmartPantry/screens/CreatePantry.js",
    "content": "import React, { useState } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport {Input, Button} from \"react-native-elements\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport { createPantry, createShoppingList } from \"../mutations\";\r\n\r\n/**\r\n * @author Ryan Mraz\r\n * @author Kollin Labowski\r\n * @author Shannon Biega\r\n * @param navigation - Used for navigating on the Home stack \r\n * @returns The input and button used to get and set the name of the pantry to be created.\r\n */\r\nconst CreatePantryScreen = ({ navigation }) => {\r\n    const [inputText, setInputText] = useState(\"\");\r\n    \r\n    const createNewPantry = async () => {\r\n        const user = await Auth.currentAuthenticatedUser();\r\n        const pantryInput = {\r\n            id: user.username.toString(),\r\n            name: inputText.toString(),\r\n            owner: user.username.toString(),\r\n            notiffreq: 86400,\r\n            notifPending: false,\r\n            notifTime: Math.floor(Date.now() / 1000),\r\n            email: user.attributes.email,\r\n        };\r\n        const p = await API.graphql(graphqlOperation(createPantry, {input: pantryInput}))\r\n\r\n        const shoppingInput = {\r\n            id: user.username.toString()\r\n        }\r\n\r\n        const q = await API.graphql(graphqlOperation(createShoppingList, {input: shoppingInput}))\r\n        navigation.navigate(\"HomeStack\");\r\n    }\r\n    \r\n    return (\r\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\", backgroundColor: '#b5e48c' }}>\r\n            <Input placeholder=\"Name of Pantry\" containerStyle={{width: 250}} textAlign={'center'} onChangeText={value => setInputText(value)} />\r\n            <Button title=\"Submit\" buttonStyle={{ \r\n            marginLeft:120,\r\n            marginRight:120,\r\n            backgroundColor:'#3D405B',\r\n            borderRadius:10,\r\n            borderWidth: 1,\r\n            width: 100,\r\n            borderColor: '#fff' }}  \r\n            onPress={() => {\r\n              createNewPantry();\r\n            }}               \r\n           ></Button>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default CreatePantryScreen;\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/CreatePantry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "CreatePantryScreen",
    "memberof": "SmartPantry/screens/CreatePantry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/CreatePantry.js~CreatePantryScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/CreatePantry.js",
    "importStyle": "CreatePantryScreen",
    "description": "",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Ryan Mraz"
      },
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@author",
        "tagValue": "Shannon Biega"
      },
      {
        "tagName": "@returns",
        "tagValue": "The input and button used to get and set the name of the pantry to be created."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "Used for navigating on the Home stack"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The input and button used to get and set the name of the pantry to be created."
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "SmartPantry/screens/Credits.js",
    "content": "import React, { Component } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Image\r\n} from \"react-native\";\r\n\r\n/**\r\n * @author Shannon Biega\r\n * @param navigation - Used for navigating the Settings stack. \r\n * @returns Displays the credits information to the screen for the user to view, including styling.\r\n */\r\nconst CreditsScreen = ({ navigation }) => {\r\n  return (\r\n    <ScrollView style={{backgroundColor: '#b5e48c'}}>\r\n      <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>Meet the Developers of Your App</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      </View>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 15}}>Over the course of the 2021-2022 school year, the below team members of Group 3 designed and implemented a Smart Pantry application.{'\\n'}</Text>\r\n\r\n      <View style={styles1.container}>\r\n        <Image source={require(\"../assets/images/Ryan.png\")} style={styles1.logo}/>\r\n      </View>\r\n      <Text style={{fontSize: 18, fontWeight:'bold', textAlign: 'center', marginHorizontal: 15}}>Ryan Mraz</Text>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 15}}>Computer Science (B.S.){'\\n'}</Text>\r\n\r\n      <View style={styles1.container}>\r\n        <Image source={require(\"../assets/images/Matt.png\")} style={styles1.logo}/>\r\n      </View>\r\n      <Text style={{fontSize: 18, fontWeight:'bold', textAlign: 'center', marginHorizontal: 15}}>Matthew Winston</Text>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 15}}>Computer Science (B.S.){'\\n'}</Text>\r\n      \r\n      <View style={styles1.container}>\r\n        <Image source={require(\"../assets/images/Kollin.png\")} style={styles1.logo}/>\r\n      </View>\r\n      <Text style={{fontSize: 18, fontWeight:'bold', textAlign: 'center', marginHorizontal: 15}}>Kollin Labowski</Text>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 15}}>Computer Science (B.S.) with a minor in Mathematics and Area of Emphasis in Cybersecurity{'\\n'}</Text>\r\n    \r\n      <View style={styles1.container}>\r\n        <Image source={require(\"../assets/images/Jon.png\")} style={styles1.logo}/>\r\n      </View>\r\n      <Text style={{fontSize: 18, fontWeight:'bold', textAlign: 'center', marginHorizontal: 15}}>Jonathan Malcomb</Text>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 15}}>Computer Science (B.S.){'\\n'}</Text>\r\n      \r\n      <View style={styles1.container}>\r\n        <Image source={require(\"../assets/images/Shannon.png\")} style={styles1.logo}/>\r\n      </View>\r\n      <Text style={{fontSize: 18, fontWeight:'bold', textAlign: 'center', marginHorizontal: 15}}>Shannon Biega</Text>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 15}}>Computer Science (B.S.) and Spanish (B.A.) with an Area of Emphasis in Cybersecurity{'\\n'}</Text>\r\n\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  paddedHeading : {\r\n    fontWeight: 'bold',\r\n    fontSize: 19,\r\n    textAlign: 'center',\r\n    margin: 20\r\n  },\r\n});\r\n\r\nconst styles1 = StyleSheet.create({\r\n  container: {\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  logo: {\r\n    width: 100,\r\n    height: 100,\r\n    borderRadius: 200 / 2,  \r\n    borderWidth: 2\r\n  },\r\n});\r\n\r\nexport default CreditsScreen;",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/Credits.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/screens/Credits.js",
    "static": true,
    "longname": "SmartPantry/screens/Credits.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Credits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "styles1",
    "memberof": "SmartPantry/screens/Credits.js",
    "static": true,
    "longname": "SmartPantry/screens/Credits.js~styles1",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Credits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "CreditsScreen",
    "memberof": "SmartPantry/screens/Credits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Credits.js~CreditsScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Credits.js",
    "importStyle": "CreditsScreen",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Shannon Biega"
      },
      {
        "tagName": "@returns",
        "tagValue": "Displays the credits information to the screen for the user to view, including styling."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "Used for navigating the Settings stack."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Displays the credits information to the screen for the user to view, including styling."
    }
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "SmartPantry/screens/GlobalText.js",
    "content": "import { Text, StyleSheet } from 'react-native'\r\nimport React from 'react'\r\nimport { useFonts } from 'expo-font';\r\nimport AppLoading from 'expo-app-loading';\r\n\r\n/**\r\n * @author Jonathan Malcomb\r\n * @author Shannon Biega\r\n * @param props \r\n * @returns The appropriate text style depending on the user's preference\r\n */\r\nconst GlobalText = (props) => {\r\n\r\n    let [fontsLoaded] = useFonts({\r\n        'Lato-Black': require('../assets/fonts/Lato/Lato-Black.ttf'),\r\n      });\r\n    \r\n      if (!fontsLoaded) {\r\n        return <AppLoading />;\r\n      } else {\r\n       return <Text style={styles.text}>{props.children}</Text>\r\n      }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n        text: {\r\n            fontFamily: 'Lato-Black'\r\n        }\r\n})\r\n\r\nexport default GlobalText",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/GlobalText.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/screens/GlobalText.js",
    "static": true,
    "longname": "SmartPantry/screens/GlobalText.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/GlobalText.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "GlobalText",
    "memberof": "SmartPantry/screens/GlobalText.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/GlobalText.js~GlobalText",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/GlobalText.js",
    "importStyle": "GlobalText",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Jonathan Malcomb"
      },
      {
        "tagName": "@author",
        "tagValue": "Shannon Biega"
      },
      {
        "tagName": "@returns",
        "tagValue": "The appropriate text style depending on the user's preference"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The appropriate text style depending on the user's preference"
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "SmartPantry/screens/Help.js",
    "content": "import React, { Component } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  ScrollView,\r\n  StyleSheet,\r\n} from \"react-native\";\r\nimport { Heading } from 'native-base'\r\n\r\n/**\r\n * @author Shannon Biega\r\n * @param navigation - Used for navigation from the Settings stack. \r\n * @returns Displays the help information to the screen, including how the user can complete various tasks on the Smart Pantry app.\r\n */\r\nconst HelpScreen = ({ navigation }) => {\r\n  return (\r\n    <ScrollView style={{backgroundColor: '#b5e48c'}}>\r\n    \r\n    <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>Tips and Tricks</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n    </View>\r\n  \r\n    <Text style={{fontSize: 17, paddingTop: '3%', textAlign: 'center', marginHorizontal: 40}}>See below tutorials for assistance with common Smart Pantry app functionality.{'\\n'}</Text>    \r\n    \r\n    <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>How To Create a Pantry</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n    </View>\r\n    <Text>\r\n      <Text style={styles.body}>➀{'\\n'}Navigate to</Text>\r\n      <Text style={[styles.body, {fontStyle: 'italic'}]}> My Pantry</Text>\r\n      <Text style={styles.body}>{'\\n'}➁{'\\n'}Click \"Create Pantry\"</Text> \r\n      <Text style={styles.body}>{'\\n'}➂{'\\n'}Type the name of your pantry</Text>\r\n      <Text style={styles.body}>{'\\n'}➃{'\\n'}Click \"Submit\"</Text>\r\n    </Text>  \r\n\r\n    <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>How To Add Pantry Items</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n    </View>\r\n    <Text style={styles.body}>An an item to your pantry by...</Text>\r\n      \r\n  \r\n    <Text style={{fontSize: 25, textAlign: 'center', marginHorizontal: 10}}>➊</Text>\r\n    <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>Manually Add Pantry Item</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n    </View>\r\n    <Text>\r\n      <Text style={styles.body}>➀{'\\n'}Navigate to</Text>\r\n      <Text style={[styles.body, {fontStyle: 'italic'}]}> My Pantry</Text>\r\n      <Text style={styles.body}>{'\\n'}➁{'\\n'}Click \"Add Item\"</Text> \r\n      <Text style={styles.body}>{'\\n'}➂{'\\n'}Type the name of the food item</Text>\r\n      <Text style={styles.body}>{'\\n'}➃{'\\n'}Weigh the food item (\"Use Scale\") or input its quantity</Text>\r\n      <Text style={styles.body}>{'\\n'}➄{'\\n'}Click \"Submit\"</Text>      \r\n    </Text>\r\n\r\n\r\n    <Text style={{fontSize: 25, textAlign: 'center', marginHorizontal: 10}}>{'\\n'}➋</Text>\r\n    <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>Barcode Add Pantry Item</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n    </View>\r\n    <Text>\r\n      <Text style={styles.body}>➀{'\\n'}Navigate to</Text>\r\n      <Text style={[styles.body, {fontStyle: 'italic'}]}> My Pantry</Text>\r\n      <Text style={styles.body}>{'\\n'}➁{'\\n'}Click \"Add Item\"</Text> \r\n      <Text style={styles.body}>{'\\n'}➂{'\\n'}Click \"Barcode Add\"</Text>\r\n      <Text style={styles.body}>{'\\n'}➃{'\\n'}Scan item's barcode using device camera</Text>\r\n      <Text style={styles.body}>{'\\n'}➄{'\\n'}Click \"Submit\"</Text>      \r\n    </Text>\r\n\r\n    <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>How To Update Pantry Items' Quantities</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n    </View>\r\n    <Text>\r\n      <Text style={styles.body}>➀{'\\n'}Navigate to</Text>\r\n      <Text style={[styles.body, {fontStyle: 'italic'}]}> My Pantry</Text>\r\n      <Text style={styles.body}>{'\\n'}➁{'\\n'}Locate item and click \"Update Item\"</Text> \r\n      <Text style={styles.body}>{'\\n'}➂{'\\n'}Enter new item weight or quantity</Text>\r\n      <Text style={styles.body}>{'\\n'}➃{'\\n'}Click \"Submit\"</Text>\r\n    </Text>\r\n\r\n    <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>How To Remove Pantry Items</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n    </View>\r\n    <Text>\r\n      <Text style={styles.body}>➀{'\\n'}Navigate to</Text>\r\n      <Text style={[styles.body, {fontStyle: 'italic'}]}> My Pantry</Text>\r\n      <Text style={styles.body}>{'\\n'}➁{'\\n'}Locate item and click \"Delete\"</Text> \r\n      <Text style={styles.body}>{'\\n'}➂{'\\n'}Click Submit</Text>\r\n    </Text>\r\n\r\n    <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>How To Add a Collaborator to Your Pantry</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n    </View>\r\n    <Text>\r\n      <Text style={styles.body}>➀{'\\n'}Navigate to</Text>\r\n      <Text style={[styles.body, {fontStyle: 'italic'}]}> Settings</Text>\r\n      <Text style={styles.body}>{'\\n'}➁{'\\n'}Click \"Manage My Pantry\"</Text> \r\n      <Text style={styles.body}>{'\\n'}➂{'\\n'}Enter Collaborator Email</Text>\r\n      <Text style={styles.body}>{'\\n'}➃{'\\n'}Click \"Add Collaborator to Pantry\"{'\\n'}</Text>\r\n    </Text> \r\n\r\n    <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>How To Delete Your Pantry</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n    </View>\r\n    <Text>\r\n      <Text style={styles.body}>➀{'\\n'}Navigate to</Text>\r\n      <Text style={[styles.body, {fontStyle: 'italic'}]}> Settings</Text>\r\n      <Text style={styles.body}>{'\\n'}➁{'\\n'}Click \"Manage My Pantry\"</Text> \r\n      <Text style={styles.body}>{'\\n'}➂{'\\n'}Click \"Delete My Pantry\"{'\\n'}</Text>\r\n    </Text>       \r\n    </ScrollView>\r\n    \r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  paddedHeading : {\r\n    fontWeight: 'bold',\r\n    fontSize: 19,\r\n    textAlign: 'center',\r\n    margin: 10\r\n  },\r\n  body:{\r\n    fontSize: 18,\r\n    textAlign: 'center',\r\n    margin: 10\r\n  }\r\n});\r\n\r\n\r\nexport default HelpScreen;",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/Help.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/screens/Help.js",
    "static": true,
    "longname": "SmartPantry/screens/Help.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Help.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "HelpScreen",
    "memberof": "SmartPantry/screens/Help.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Help.js~HelpScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Help.js",
    "importStyle": "HelpScreen",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Shannon Biega"
      },
      {
        "tagName": "@returns",
        "tagValue": "Displays the help information to the screen, including how the user can complete various tasks on the Smart Pantry app."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "Used for navigation from the Settings stack."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Displays the help information to the screen, including how the user can complete various tasks on the Smart Pantry app."
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "SmartPantry/screens/Home.js",
    "content": "import React, { useState, useEffect, useRef } from \"react\";\r\nimport {Text,View ,ScrollView, Modal, Alert, Animated, PanResponder} from \"react-native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport {Icon, Input} from 'react-native-elements';\r\nimport { Button } from \"react-native-elements\";\r\nimport { getPantry } from \"../queries\";\r\nimport CreatePantryScreen from \"./CreatePantry\";\r\nimport AddItemScreen from \"./AddItem\";\r\nimport ManualAddScreen from \"./ManualAdd\";\r\nimport { listItems, getItem, getNewWeight, listNewWeights } from \"../queries.js\";\r\nimport { createItem, deleteItem, updateItem, createShoppingList, updatePantry } from \"../mutations\";\r\nimport BarcodeAddScreen from \"./BarcodeAdd\";\r\nimport * as Notifications from 'expo-notifications';\r\nimport Constants from 'expo-constants';\r\n\r\n\r\n// Creates a stack navigator object\r\nconst HomeStack = createStackNavigator();\r\n\r\n// Allows the nesting of bottom tab and stack navigation\r\n// Contains all the screens that are reachable/within the bottom tab home screen\r\n\r\n/**\r\n * @author Ryan Mraz\r\n * @returns Manages the Home stack, including AddItemScreen, CreatePantryScreen, ManualAddScreen, and BarcodeAddScreen\r\n */\r\nconst HomeStackScreen = () => {\r\n    return (\r\n      <HomeStack.Navigator screenOptions={{\r\n        headerBackTitleVisible: false\r\n      }}>\r\n        <HomeStack.Screen\r\n          options={{ headerShown: false }}\r\n          name=\"HomeStack\"\r\n          component={HomeScreen}\r\n        />\r\n        <HomeStack.Screen\r\n          options={{ headerShown: true, title: \"Create Pantry\", headerStyle: {backgroundColor: '#b5e48c'}}}\r\n          name=\"CreatePantry\"\r\n          component={CreatePantryScreen}\r\n        />\r\n        <HomeStack.Screen\r\n          options={{ headerShown: true, title: \"Add Item\", headerStyle: {backgroundColor: '#b5e48c'}\r\n        }}\r\n          name=\"AddItem\"\r\n          component={AddItemScreen}\r\n        />\r\n        <HomeStack.Screen\r\n          options={{ headerShown: true, title: \"Manual Add\" , headerStyle: {backgroundColor: '#b5e48c'}}}\r\n          name=\"ManualAdd\" \r\n          component={ManualAddScreen}\r\n        />\r\n        <HomeStack.Screen\r\n          options={{ headerShown: true, title: \"Barcode Add\", headerStyle: {backgroundColor: '#b5e48c'} }}\r\n          name=\"BarcodeAdd\"\r\n          component={BarcodeAddScreen}\r\n        />\r\n      </HomeStack.Navigator>\r\n    );\r\n}\r\n\r\n\r\n// The actual home screen rendering\r\n/**\r\n * @author Ryan Mraz\r\n * @author Kollin Labowski\r\n * @param navigation - used for navigating from the Home stack. \r\n * @returns Displays items and related information for the current user's pantry, AND manages notifications for the user's device.\r\n */\r\nconst HomeScreen = ({ navigation }) => {\r\n\r\n  //NOTIFICATION STUFF\r\n  try {\r\n    const [expoPushToken, setExpoPushToken] = useState('');\r\n    const [notification, setNotification] = useState(false);\r\n    const notificationListener = useRef();\r\n    const responseListener = useRef();\r\n\r\n    useEffect( () => {\r\n      registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n\r\n      notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n        setNotification(notification);\r\n      });\r\n\r\n      responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n        console.log(\"User has clicked notification\");\r\n        //If we ever want the notification page to redirect the user to a particular screen, we could do that here\r\n        // console.log(response);\r\n        console.log(response.notification.request.content.data.data);\r\n      });\r\n\r\n      return () => {\r\n        Notifications.removeNotificationSubscription(notificationListener.current);\r\n        Notifications.removeNotificationSubscription(responseListener.current);\r\n      };\r\n    }, []);\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n\r\n  //NOTE: There are still occaisionally some weird bugs where the user will receive double notifications,\r\n  //but to fix could comment out the following lines. However, the trade-off is that the user will not\r\n  //have their notifications renewed unless they actually click a button on the home page. May make more\r\n  //updates in the next few days (4/12/2022)\r\n\r\n  if(Date.now() % 5 == 0) {\r\n    schedulePushNotification();  \r\n  }\r\n  //END NOTIFICATION STUFF\r\n\r\n  // useState variables to track whether to render the create pantry button\r\n  // the value of the pantry items, and if a user has a pantry.\r\n  const [createPantryButton, setCreatePantryButton] = useState(null);\r\n  const [items, setItems] = useState([]);\r\n  const [pantryExists, setPantryExists] = useState(false);\r\n  const [pantryName, setPantryName] = useState(\"\");\r\n  const [nameText, setNameText] = useState(\"\");\r\n  const [weightText, setWeightText] = useState(\"\");\r\n  const [quantityText, setQuantityText] = useState(\"\");\r\n  const [itemId, setItemId] = useState(null);\r\n\r\n   const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n   const handleModal = () => setIsModalVisible(() => !isModalVisible);\r\n\r\n  // Loads when you come back to this screen\r\n  // refreshes each time you go back to the screen\r\n  // Checks if a pantry exists and fetches the user's items on every load\r\n  useEffect(() => {\r\n    const unsubscribe = navigation.addListener(\"focus\", () => {\r\n      checkIfPantryExists();\r\n      fetchItems();\r\n    });\r\n    return unsubscribe;\r\n  }, [navigation, items]);\r\n\r\n  // fetches just the items of the pantry that belongs to the current authenticated user\r\n  const fetchItems = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // returns cognito user JSON\r\n\r\n      // Performs the getPantry query based on the id, which is the user's username\r\n      const pantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      // if the getPantry query does not return a null value, sets pantry exists to true\r\n      // otherwise sets it to false because they don't have a pantry yet\r\n      if (pantryData.data.getPantry == null) {\r\n        setPantryExists(false);\r\n      } else {\r\n        setPantryExists(true);\r\n        setPantryName(pantryData.data.getPantry.name);\r\n\r\n        // Grabs the id field from the pantry data\r\n        const pantryId = pantryData.data.getPantry.id;\r\n\r\n        // Grabs the items that are related to the id of the pantry\r\n        const itemsList = await API.graphql(\r\n          graphqlOperation(listItems, {\r\n            filter: {\r\n              pantryItemsId: {\r\n                eq: pantryId.toString(),\r\n              },\r\n            },\r\n          })\r\n        );\r\n\r\n        // stores the value of the items returned\r\n        const b = itemsList.data.listItems.items;\r\n\r\n        // changes the value of useState items value\r\n        setItems(b);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const getScaleWeight = async () => {\r\n    const weightsList = await API.graphql(graphqlOperation(listNewWeights));\r\n    \r\n  \r\n    const b = weightsList.data.listNewWeights.items;\r\n    // console.log(b);\r\n    if(b.length > 0) {\r\n      // console.log(b[0].id);\r\n      let most_recent = 0;\r\n  \r\n      const viewItems = b.map( async (item) => {\r\n        if(item.id > most_recent)\r\n          most_recent = item.id;\r\n  \r\n        const json_string = item.weight_data;\r\n        const item_weight = parseFloat(json_string.substring(json_string.indexOf(\"value\") + \"value\\\":\".length, json_string.indexOf(\"}\")));\r\n        console.log(item_weight);\r\n      });\r\n  \r\n      console.log(\"ITEM TO ADD: \" + most_recent);\r\n  \r\n      const weightData = await API.graphql(\r\n        graphqlOperation(getNewWeight, { id: most_recent })\r\n      );\r\n  \r\n      let weight_to_add = weightData.data.getNewWeight.weight_data;\r\n      weight_to_add = parseFloat(weight_to_add.substring(weight_to_add.indexOf(\"value\") + \"value\\\":\".length, weight_to_add.indexOf(\"}\")));\r\n      console.log(weight_to_add);\r\n  \r\n      updatePantryItem(weight_to_add);\r\n    }\r\n    else {\r\n      console.log(\"Not in DB\");\r\n    }\r\n  }\r\n\r\n  // Update item\r\n  const updatePantryItem = async (scale_weight) => {\r\n\r\n    const item = await API.graphql(graphqlOperation(getItem, {id: itemId}));\r\n\r\n    if(scale_weight == null) {\r\n\r\n    }\r\n\r\n    // if item is updated to have 0 or less quantity, the item will automatically be deleted\r\n    if (!(item.data.getItem.quantity == null) && parseInt(quantityText) <= 0) {\r\n      deletePantryItem(itemId);\r\n      handleModal();\r\n      return;\r\n    }\r\n\r\n    // if item percentage goes to 0 or below, item automatically delete\r\n    if (\r\n      !(item.data.getItem.weight == null) &&\r\n      (parseFloat(weightText) / parseFloat(item.data.getItem.weight)) <= 0\r\n    )\r\n    {\r\n      deletePantryItem(itemId);\r\n      handleModal();\r\n      return;\r\n    }\r\n      try {\r\n        // Perform\r\n        const update = {\r\n          id: itemId,\r\n          name: nameText ? nameText : item.name,\r\n          currWeight: weightText && (scale_weight == null || scale_weight == 0) ? parseFloat(weightText): (scale_weight ? scale_weight : item.data.getItem.currWeight),\r\n          quantity: quantityText\r\n            ? parseInt(quantityText)\r\n            : item.data.getItem.quantity,\r\n        };\r\n\r\n        const u = await API.graphql(\r\n          graphqlOperation(updateItem, { input: update })\r\n        );\r\n        setNameText(\"\");\r\n        setWeightText(\"\");\r\n        setQuantityText(\"\");\r\n        fetchItems();\r\n        handleModal();\r\n        console.log(item.data.getItem.quantity)\r\n        console.log(item.data.getItem.origQuantity)\r\n        if((update.quantity <= 2 ||update.quantity < item.data.getItem.origQuantity * 0.3)  || (update.currWeight < item.data.getItem.weight * 0.3) ){\r\n          schedulePushNotification();\r\n          Alert.alert(\"Shopping List\", \"Would you like to add the item to your shopping list?\", [\r\n            {\r\n              text: \"Yes\",\r\n              onPress: () => {\r\n                const itemID = update.id;\r\n                const name = item.data.getItem.name;\r\n                Alert.alert(\"Shopping List\", \"Adding to shopping list: \" + name);\r\n                addToShoppingList(itemID, name);\r\n              }\r\n            },\r\n            {\r\n             text: \"No\",\r\n             onPress: () => {\r\n               deletePantryItem(item.id);\r\n             },\r\n            },\r\n        ] );        }\r\n      } catch (err) {}\r\n  }\r\n\r\n  // delete item\r\n  const deletePantryItem = async (deleteId) => {\r\n    try {\r\n      const id = {\r\n        id: deleteId\r\n      }\r\n      const d = await API.graphql(graphqlOperation(deleteItem,{input: id} ));\r\n      fetchItems();\r\n    } catch (err) { \r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  // add an item to the shopping list upon deleting it from the pantry, if the user wishes\r\n  const addToShoppingList = async (itemID, name) => {\r\n    try {\r\n      console.log(itemID)\r\n      console.log(name)\r\n      const user = await Auth.currentAuthenticatedUser();\r\n\r\n      const id = {\r\n        name: name,\r\n        imagePath: \"default_img\",\r\n        shoppingListItemsId: user.username.toString()\r\n      }\r\n      const d = await API.graphql(graphqlOperation(createItem,{input: id} ));\r\n    } catch (err) { \r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const modalScreen = (\r\n    <Modal visible={isModalVisible} animationType=\"slide\">\r\n      <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\", backgroundColor: '#b5e48c'}}>\r\n        <Text style={{fontSize: 25, fontWeight: \"bold\", margin: 10}}>Edit Your Item</Text>\r\n        <Input\r\n          placeholder=\"Name\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setNameText(value)}\r\n        />\r\n        <Input\r\n          placeholder=\"Current Weight (optional)\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setWeightText(value)}\r\n        />\r\n        <Input\r\n          placeholder=\"Quantity (optional)\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setQuantityText(value)}\r\n        />\r\n        <Button\r\n          buttonStyle={{ marginTop:10,\r\n            paddingTop:5,\r\n            paddingBottom:10,\r\n            backgroundColor:'#3D405B',\r\n            borderRadius:10,\r\n            borderWidth: 1,\r\n            borderColor: '#fff' }}\r\n          title=\"Use Scale\"\r\n          onPress={() => {\r\n            Alert.alert(\"Weigh Item\", \"Please place the item you would like to weigh on the scale and wait a few seconds\");\r\n            setTimeout(getScaleWeight, 5000);\r\n          }}\r\n        ></Button>\r\n        <Button\r\n          buttonStyle={{ marginTop:10,\r\n            paddingTop:5,\r\n            paddingBottom:10,\r\n            backgroundColor:'#3D405B',\r\n            borderRadius:10,\r\n            borderWidth: 1,\r\n            borderColor: '#fff' }}\r\n          title=\"Submit\"\r\n          onPress={() => {\r\n            updatePantryItem(null);\r\n          }}\r\n        ></Button>\r\n        <Button buttonStyle={{ marginTop:10,\r\n                paddingTop:5,\r\n                paddingBottom:10,\r\n                backgroundColor:'#3D405B',\r\n                borderRadius:10,\r\n                borderWidth: 1,\r\n                borderColor: '#fff' }}\r\n                title=\"Go back\" onPress={handleModal}></Button>\r\n      </View>\r\n    </Modal>\r\n  );\r\n\r\n  // list of items from pantry\r\n  const listOfItems = items.map((item) => {\r\n    let percentage = (parseFloat(item.currWeight) / parseFloat(item.weight) * 100).toFixed(2);\r\n    return (\r\n      <View key={item.id}>\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            paddingHorizontal: 20,\r\n            paddingBottom: 20,\r\n            paddingTop: 20,\r\n          }}\r\n        >\r\n          <Text\r\n            style={{paddingLeft: 15, width: \"50%\", flexDirection: \"column\", fontSize: 18 }}\r\n          >\r\n            {item.name + '\\n'}\r\n            {item.quantity && <Text style={{fontSize: 15, fontWeight: 'bold'}}>Quantity: {item.quantity + \"\\n\"}</Text>}\r\n            {item.weight && <Text style={{fontSize: 15, fontWeight: 'bold'}}>Weight: {item.currWeight + \" lbs\\n\"}</Text>}\r\n            {item.weight && <Text style={{fontSize: 15, fontWeight: \"bold\"}}>Percentage left: {percentage + \"%\\n\"}</Text>}\r\n            {item.expDate && <Text style={{fontSize: 15, fontWeight: \"bold\"}}>Expiration date: {item.expDate.substring(item.expDate.length - 8, item.expDate.length - 6) + \"/\" + item.expDate.substring(item.expDate.length - 6, item.expDate.length - 4) + \"/\" + item.expDate.substring(item.expDate.length - 4, item.expDate.length)}</Text>}\r\n          </Text>\r\n          <Button buttonStyle={{ marginTop:10,\r\n                paddingTop:5,\r\n                paddingBottom:10,\r\n                backgroundColor:'#808080',\r\n                borderRadius:10,\r\n                borderWidth: 1,\r\n                marginRight: 5,\r\n                borderColor: '#fff' }} title=\"Update\" onPress={() => {\r\n            setItemId(item.id);\r\n            handleModal();\r\n            schedulePushNotification();\r\n          }}>\r\n          </Button>\r\n          <Button  buttonStyle={{ marginTop:10,\r\n                paddingTop:5,\r\n                paddingBottom:10,\r\n                backgroundColor:'#ff686b',\r\n                borderRadius:10,\r\n                borderWidth: 1,\r\n                borderColor: '#fff' }} title=\"Delete\" onPress={() => {\r\n             Alert.alert(\"Delete Item\", \"Are you sure you want to delete item?\", [\r\n               {\r\n                 text: \"Yes\",\r\n                 onPress: () => { \r\n                  schedulePushNotification();\r\n                   Alert.alert(\"Shopping List\", \"Would you like to add the item to your shopping list?\", [\r\n                     {\r\n                       text: \"Yes\",\r\n                       onPress: () => {\r\n                         const itemID = item.id;\r\n                         const name = item.name;\r\n                         Alert.alert(\"Shopping List\", \"Adding to shopping list: \" + name);\r\n                         deletePantryItem(item.id);\r\n                         addToShoppingList(itemID, name);\r\n                       }\r\n                     },\r\n                     {\r\n                      text: \"No\",\r\n                      onPress: () => {\r\n                        deletePantryItem(item.id);\r\n                      },\r\n                     },\r\n                 ] );\r\n                },\r\n               },\r\n               {\r\n                 text: \"No\",\r\n                 style: \"cancel\",\r\n               },\r\n               \r\n             ]);\r\n          }}></Button>\r\n        </View>\r\n        <View style={{ height: 1.2, backgroundColor: \"grey\" }} />\r\n      </View>\r\n    );\r\n  });\r\n\r\n\r\n  // checks whether or not a user has a pantry yet\r\n  const checkIfPantryExists = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // grabs current user's information\r\n\r\n      // Performs the getPantry query based on user's id\r\n      const pantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      // If it's null, we want to render the create pantry button\r\n      // otherwise, we want to hide it\r\n      if (pantryData.data.getPantry == null) {\r\n        setCreatePantryButton(true);\r\n      } else {\r\n        setCreatePantryButton(null);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <ScrollView\r\n        contentContainerStyle={{\r\n           flexGrow: 1,\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          backgroundColor: '#b5e48c'\r\n        }}\r\n      >\r\n        {!pantryExists}\r\n        {/* Conditional render based on the value of createPantryButton and pantryExists */}\r\n        {createPantryButton && (         \r\n          <Button\r\n              buttonStyle={{                  \r\n                backgroundColor:'#3D405B',\r\n                borderRadius:10,\r\n                borderWidth: 1,\r\n                borderColor: '#fff' }}\r\n              title=\"Create Pantry\"\r\n              onPress={() => {\r\n                navigation.navigate(\"CreatePantry\");\r\n                schedulePushNotification();              }}\r\n            ></Button>\r\n        )}\r\n        {pantryExists && (\r\n          <View\r\n            style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}\r\n          >\r\n            <Text style={{ fontSize: 25, margin: 15, fontWeight: 'bold' }}>{pantryName}</Text>\r\n            <Button\r\n              buttonStyle={{ marginTop:10,\r\n                paddingTop:12,\r\n                paddingBottom:12,\r\n                marginLeft:30,\r\n                marginRight:30,\r\n                backgroundColor:'#3D405B',\r\n                borderRadius:10,\r\n                borderWidth: 1,\r\n                borderColor: '#fff' }}\r\n              title=\"Add Item\"\r\n              onPress={() => {\r\n                navigation.navigate(\"AddItem\");\r\n                schedulePushNotification();\r\n              }}\r\n            ></Button>\r\n\r\n\r\n            \r\n            <View>{listOfItems}</View>\r\n            <View>{modalScreen}</View>\r\n          </View>\r\n        )}\r\n      </ScrollView>\r\n  );\r\n};\r\n\r\n/**\r\n * @author Kollin Labowski\r\n * @returns An expo token for the user to show that the user has registered for notifications through Expo\r\n */\r\nasync function registerForPushNotificationsAsync() {\r\n  let token;\r\n  if (Constants.isDevice) {\r\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Notifications.requestPermissionsAsync();\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== 'granted') {\r\n      alert('Failed to get push token for push notification!');\r\n      return;\r\n    }\r\n    token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    console.log(token);\r\n  } else {\r\n    alert('Must use physical device for Push Notifications');\r\n  }\r\n\r\n  if (Platform.OS === 'android') {\r\n    Notifications.setNotificationChannelAsync('default', {\r\n      name: 'default',\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: '#FF231F7C',\r\n    });\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\nasync function schedulePushNotification() {\r\n\r\n  const user = await Auth.currentAuthenticatedUser(); // grabs current user's information\r\n\r\n  const pantryData = await API.graphql(\r\n    graphqlOperation(getPantry, { id: user.username.toString() })\r\n  );\r\n\r\n  if (pantryData.data.getPantry == null) {\r\n    console.log(\"User has no pantry\");\r\n  }\r\n  else {\r\n    //NOTE: The frequency update field stores the number of seconds between timestamps\r\n\r\n    //MAKE CHANGE HERE!!! Convert from string to long, then do Math.floor(notifTime / 1000)\r\n    if(Math.floor(parseInt(pantryData.data.getPantry.notifTime) / 1000) + pantryData.data.getPantry.notiffreq < Math.floor(Date.now() / 1000) && pantryData.data.getPantry.notifPending) {\r\n      console.log(\"Allowing notifications again\");\r\n      const pantryInput = {\r\n        id: user.username.toString(),\r\n        notifPending: false,\r\n        notifTime: Math.floor(Date.now() / 1000),\r\n      };\r\n      const p = await API.graphql(graphqlOperation(updatePantry, {input: pantryInput}))\r\n    }\r\n\r\n    let itemsExpiring = 0;\r\n    const today = new Date();\r\n\r\n    //HERE: Check if there are any items expiring in the current user's pantry\r\n    // Grabs the id field from the pantry data\r\n    const pantryId = pantryData.data.getPantry.id;\r\n\r\n    // Grabs the items that are related to the id of the pantry\r\n    const itemsList = await API.graphql(\r\n      graphqlOperation(listItems, {\r\n        filter: {\r\n          pantryItemsId: {\r\n            eq: pantryId.toString(),\r\n          },\r\n        },\r\n      })\r\n    );\r\n\r\n    const b = itemsList.data.listItems.items;\r\n\r\n    const checkExpirations = b.map( async (item) => {\r\n      //NOTE: For some reason, the JavaScipt Date function is outputting the wrong date for me. I can calibrate it to be accurate\r\n      //      but I don't want to do that until closer to when we demo our project.\r\n      // console.log(\"DATE: \" + item.expDate);\r\n      // console.log(\"MONTH: \" + today.getMonth() + \" \" + today.getDay() + \" \" + today.getFullYear());\r\n      const exp_date = item.expDate;\r\n      if(exp_date != null) {\r\n\r\n        let month = 0;\r\n        let day = 0;\r\n        let year = 0;\r\n        // console.log(\"EXP DATE: \" + exp_date);\r\n        if(exp_date.length == 7) {\r\n          month = parseInt(exp_date.charAt(0));\r\n          day = parseInt(exp_date.substring(1,3));\r\n          year = parseInt(exp_date.substring(3,7));\r\n          // console.log(month + \" \" + day + \" \" + year);\r\n        }\r\n        else if(exp_date.length == 8) {\r\n          month = parseInt(exp_date.substring(0,2));\r\n          day = parseInt(exp_date.substring(2,4));\r\n          year = parseInt(exp_date.substring(4,8));\r\n          // console.log(month + \" \" + day + \" \" + year);\r\n        }\r\n        // console.log(\"FULL YEAR\", today.getFullYear() + \" \" + year);\r\n\r\n        //Handle if at the end of a year\r\n        if(today.getMonth() == 12) {\r\n          if(month == 12) {\r\n            if(today.getDay() <= day) {\r\n              itemsExpiring += 1;\r\n            }\r\n          }\r\n          if(month == 1 && today.getFullYear() + 1 == year) {\r\n            if(day <= 15) {\r\n              itemsExpiring += 1;\r\n            }\r\n          }\r\n        }//Next handle the general case\r\n        else if(today.getFullYear() == year) {\r\n          if(today.getMonth() == month && today.getDay() <= day) {\r\n            itemsExpiring += 1;\r\n          }\r\n          else if(today.getMonth() + 1 == month && today.getDay() > 15 && day <= 15) {\r\n            itemsExpiring += 1;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    let runningLow = 0;\r\n\r\n    // console.log(\"CHECKING ITEMS\");\r\n    const checkRunningLow = b.map( async (item) => {\r\n      // console.log(\"ITEM: \" + item.name);\r\n      let alreadyCounted = false;\r\n\r\n      if(item.weight != null) {\r\n        if(item.currWeight < item.weight * 0.3) {\r\n          runningLow += 1;\r\n          alreadyCounted = true;\r\n          // console.log(\"WEIGHT RUNNING LOW\");\r\n        }\r\n      }\r\n      if(item.quantity != null && !alreadyCounted) {\r\n        if(item.quantity <= 2 || item.quantity < item.origQuantity * 0.3) {\r\n          runningLow += 1;\r\n          // console.log(\"QUANTITY RUNNING LOW\");\r\n        }\r\n      }\r\n    });\r\n    console.log(\"RL: \" + runningLow)\r\n    if(!pantryData.data.getPantry.notifPending && (itemsExpiring > 0 || runningLow > 0)) {\r\n      console.log(\"Scheduling notification\");\r\n\r\n      const newestPantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      const curr_time = Date.now();\r\n\r\n      let test = \"\" + curr_time;\r\n\r\n      // console.log(\"curr_time: \" + test);\r\n\r\n      const pantryInput = {\r\n        id: user.username.toString(),\r\n        notifPending: true,\r\n        notifTime: test,\r\n      };\r\n\r\n      const old_time = newestPantryData.data.getPantry.notifTime\r\n      // console.log(\"OLD: \" + old_time + \" NEW: \" + test);\r\n\r\n      if(parseInt(old_time) + 1000 < curr_time) { // The purpose here is to prevent the user from getting multiple notifications at once\r\n        \r\n        const p = await API.graphql(graphqlOperation(updatePantry, {input: pantryInput}))\r\n        // console.log(\"NEW TIME: \" + test);\r\n        // console.log(\"ADDING\");\r\n        // console.log(\"Scheduling notification\");\r\n        // console.log(newestPantryData.data.getPantry.notifTime + ' ' + curr_time);\r\n\r\n        if(itemsExpiring > 0 && runningLow <= 0) {\r\n          await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n              title: \"SMART PANTRY\",\r\n              body: 'You have ' + itemsExpiring + ' item(s) expiring soon! Click here to view them.',\r\n              data: { data: 'View home menu' },\r\n            },\r\n            trigger: { seconds: pantryData.data.getPantry.notiffreq },\r\n          });\r\n        }\r\n        else if(itemsExpiring <= 0 && runningLow > 0) {\r\n          await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n              title: \"SMART PANTRY\",\r\n              body: 'You have ' + runningLow + ' item(s) running low! Click here to view them.',\r\n              data: { data: 'View home menu' },\r\n            },\r\n            trigger: { seconds: pantryData.data.getPantry.notiffreq },\r\n          });\r\n        }\r\n        else {\r\n          await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n              title: \"SMART PANTRY\",\r\n              body: 'You have ' + itemsExpiring + ' item(s) expiring soon and ' + runningLow + ' item(s) running low! Click here to view them.',\r\n              data: { data: 'View home menu' },\r\n            },\r\n            trigger: { seconds: pantryData.data.getPantry.notiffreq },\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default HomeStackScreen;\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/Home.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "HomeStack",
    "memberof": "SmartPantry/screens/Home.js",
    "static": true,
    "longname": "SmartPantry/screens/Home.js~HomeStack",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "HomeScreen",
    "memberof": "SmartPantry/screens/Home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Home.js~HomeScreen",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Home.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Ryan Mraz"
      },
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@returns",
        "tagValue": "Displays items and related information for the current user's pantry, AND manages notifications for the user's device."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "used for navigating from the Home stack."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Displays items and related information for the current user's pantry, AND manages notifications for the user's device."
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "registerForPushNotificationsAsync",
    "memberof": "SmartPantry/screens/Home.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Home.js~registerForPushNotificationsAsync",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Home.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 541,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@returns",
        "tagValue": "An expo token for the user to show that the user has registered for notifications through Expo"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "An expo token for the user to show that the user has registered for notifications through Expo"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "schedulePushNotification",
    "memberof": "SmartPantry/screens/Home.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Home.js~schedulePushNotification",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 572,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "HomeStackScreen",
    "memberof": "SmartPantry/screens/Home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Home.js~HomeStackScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Home.js",
    "importStyle": "HomeStackScreen",
    "description": "",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Ryan Mraz"
      },
      {
        "tagName": "@returns",
        "tagValue": "Manages the Home stack, including AddItemScreen, CreatePantryScreen, ManualAddScreen, and BarcodeAddScreen"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Manages the Home stack, including AddItemScreen, CreatePantryScreen, ManualAddScreen, and BarcodeAddScreen"
    },
    "params": []
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "SmartPantry/screens/Home2.js",
    "content": "import React, { useState, useEffect, useRef } from \"react\";\r\nimport {Text,View ,ScrollView, Modal, Alert, Animated, PanResponder} from \"react-native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport {Icon, Input} from 'react-native-elements';\r\nimport { Button } from \"react-native-elements\";\r\nimport { getPantry, getShoppingList } from \"../queries\";\r\nimport CreatePantryScreen from \"./CreatePantry\";\r\nimport AddItemScreen from \"./AddItem\";\r\nimport ManualAddScreen from \"./ManualAdd\";\r\nimport { listItems, getItem, getNewWeight, listNewWeights } from \"../queries.js\";\r\nimport { createItem, deleteItem, updateItem, createShoppingList, updatePantry } from \"../mutations\";\r\nimport BarcodeAddScreen from \"./BarcodeAdd\";\r\nimport * as Notifications from 'expo-notifications';\r\nimport Constants from 'expo-constants';\r\n\r\n\r\n// Creates a stack navigator object\r\nconst HomeStack = createStackNavigator();\r\n\r\n// Allows the nesting of bottom tab and stack navigation\r\n// Contains all the screens that are reachable/within the bottom tab home screen\r\n\r\n/**\r\n * @author Ryan Mraz\r\n * @returns Manages the Home stack, including AddItemScreen, CreatePantryScreen, ManualAddScreen, and BarcodeAddScreen\r\n */\r\nconst HomeStackScreen = () => {\r\n    return (\r\n      <HomeStack.Navigator screenOptions={{\r\n        headerBackTitleVisible: false\r\n      }}>\r\n        <HomeStack.Screen\r\n          options={{ headerShown: false }}\r\n          name=\"HomeStack\"\r\n          component={HomeScreen}\r\n        />\r\n        <HomeStack.Screen\r\n          options={{ headerShown: true, title: \"Create Pantry\", headerStyle: {backgroundColor: '#b5e48c'}}}\r\n          name=\"CreatePantry\"\r\n          component={CreatePantryScreen}\r\n        />\r\n        <HomeStack.Screen\r\n          options={{ headerShown: true, title: \"Add Item\", headerStyle: {backgroundColor: '#b5e48c' }\r\n        }}\r\n          name=\"AddItem\"\r\n          component={AddItemScreen}\r\n        />\r\n        <HomeStack.Screen\r\n          options={{ headerShown: true, title: \"Manual Add\", headerStyle: {backgroundColor: '#b5e48c'} }}\r\n          name=\"ManualAdd\" \r\n          component={ManualAddScreen}\r\n        />\r\n        <HomeStack.Screen\r\n          options={{ headerShown: true, title: \"Barcode Add\", headerStyle: {backgroundColor: '#b5e48c'} }}\r\n          name=\"BarcodeAdd\"\r\n          component={BarcodeAddScreen}\r\n        />\r\n      </HomeStack.Navigator>\r\n    );\r\n}\r\n\r\n\r\n// The actual home screen rendering\r\n/**\r\n * @author Ryan Mraz\r\n * @author Kollin Labowski\r\n * @param navigation - used for navigating from the Home stack. \r\n * @returns Displays items and related information for the current user's pantry, AND manages notifications for the user's device.\r\n */\r\nconst HomeScreen = ({ navigation }) => {\r\n\r\n  //NOTIFICATION STUFF\r\n  try {\r\n    const [expoPushToken, setExpoPushToken] = useState('');\r\n    const [notification, setNotification] = useState(false);\r\n    const notificationListener = useRef();\r\n    const responseListener = useRef();\r\n\r\n    useEffect( () => {\r\n      registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n\r\n      notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n        setNotification(notification);\r\n      });\r\n\r\n      responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n        console.log(\"User has clicked notification\");\r\n        //If we ever want the notification page to redirect the user to a particular screen, we could do that here\r\n        // console.log(response);\r\n        console.log(response.notification.request.content.data.data);\r\n      });\r\n\r\n      return () => {\r\n        Notifications.removeNotificationSubscription(notificationListener.current);\r\n        Notifications.removeNotificationSubscription(responseListener.current);\r\n      };\r\n    }, []);\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n\r\n  //NOTE: There are still occaisionally some weird bugs where the user will receive double notifications,\r\n  //but to fix could comment out the following lines. However, the trade-off is that the user will not\r\n  //have their notifications renewed unless they actually click a button on the home page. May make more\r\n  //updates in the next few days (4/12/2022)\r\n\r\n  if(Date.now() % 5 == 0) {\r\n    schedulePushNotification();  \r\n  }\r\n  //END NOTIFICATION STUFF\r\n\r\n  // useState variables to track whether to render the create pantry button\r\n  // the value of the pantry items, and if a user has a pantry.\r\n  const [createPantryButton, setCreatePantryButton] = useState(null);\r\n  const [items, setItems] = useState([]);\r\n  const [pantryExists, setPantryExists] = useState(false);\r\n  const [pantryName, setPantryName] = useState(\"\");\r\n  const [nameText, setNameText] = useState(\"\");\r\n  const [weightText, setWeightText] = useState(\"\");\r\n  const [quantityText, setQuantityText] = useState(\"\");\r\n  const [itemId, setItemId] = useState(null);\r\n\r\n   const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n   const handleModal = () => setIsModalVisible(() => !isModalVisible);\r\n\r\n  // Loads when you come back to this screen\r\n  // refreshes each time you go back to the screen\r\n  // Checks if a pantry exists and fetches the user's items on every load\r\n  useEffect(() => {\r\n    const unsubscribe = navigation.addListener(\"focus\", () => {\r\n      checkIfPantryExists();\r\n      fetchItems();\r\n    });\r\n    return unsubscribe;\r\n  }, [navigation, items]);\r\n\r\n  // fetches just the items of the pantry that belongs to the current authenticated user\r\n  const fetchItems = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // returns cognito user JSON\r\n\r\n      // Performs the getPantry query based on the id, which is the user's username\r\n      const pantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      // if the getPantry query does not return a null value, sets pantry exists to true\r\n      // otherwise sets it to false because they don't have a pantry yet\r\n      if (pantryData.data.getPantry == null) {\r\n        setPantryExists(false);\r\n      } else {\r\n        setPantryExists(true);\r\n        setPantryName(pantryData.data.getPantry.name);\r\n\r\n        // Grabs the id field from the pantry data\r\n        const pantryId = pantryData.data.getPantry.id;\r\n\r\n        // Grabs the items that are related to the id of the pantry\r\n        const itemsList = await API.graphql(\r\n          graphqlOperation(listItems, {\r\n            filter: {\r\n              pantryItemsId: {\r\n                eq: pantryId.toString(),\r\n              },\r\n            },\r\n          })\r\n        );\r\n\r\n        // stores the value of the items returned\r\n        const b = itemsList.data.listItems.items;\r\n\r\n        // changes the value of useState items value\r\n        setItems(b);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const getScaleWeight = async () => {\r\n    const weightsList = await API.graphql(graphqlOperation(listNewWeights));\r\n    \r\n  \r\n    const b = weightsList.data.listNewWeights.items;\r\n    // console.log(b);\r\n    if(b.length > 0) {\r\n      // console.log(b[0].id);\r\n      let most_recent = 0;\r\n  \r\n      const viewItems = b.map( async (item) => {\r\n        if(item.id > most_recent)\r\n          most_recent = item.id;\r\n  \r\n        const json_string = item.weight_data;\r\n        const item_weight = parseFloat(json_string.substring(json_string.indexOf(\"value\") + \"value\\\":\".length, json_string.indexOf(\"}\")));\r\n        console.log(item_weight);\r\n      });\r\n  \r\n      console.log(\"ITEM TO ADD: \" + most_recent);\r\n  \r\n      const weightData = await API.graphql(\r\n        graphqlOperation(getNewWeight, { id: most_recent })\r\n      );\r\n  \r\n      let weight_to_add = weightData.data.getNewWeight.weight_data;\r\n      weight_to_add = parseFloat(weight_to_add.substring(weight_to_add.indexOf(\"value\") + \"value\\\":\".length, weight_to_add.indexOf(\"}\")));\r\n      console.log(weight_to_add);\r\n  \r\n      updatePantryItem(weight_to_add);\r\n    }\r\n    else {\r\n      console.log(\"Not in DB\");\r\n    }\r\n  }\r\n\r\n  // Update item\r\n  const updatePantryItem = async (scale_weight) => {\r\n\r\n    const item = await API.graphql(graphqlOperation(getItem, {id: itemId}));\r\n\r\n    if(scale_weight == null) {\r\n\r\n    }\r\n\r\n    // if item is updated to have 0 or less quantity, the item will automatically be deleted\r\n    if (!(item.data.getItem.quantity == null) && parseInt(quantityText) <= 0) {\r\n      deletePantryItem(itemId);\r\n      handleModal();\r\n      return;\r\n    }\r\n\r\n    // if item percentage goes to 0 or below, item automatically delete\r\n    if (\r\n      !(item.data.getItem.weight == null) &&\r\n      (parseFloat(weightText) / parseFloat(item.data.getItem.weight)) <= 0\r\n    )\r\n    {\r\n      deletePantryItem(itemId);\r\n      handleModal();\r\n      return;\r\n    }\r\n      try {\r\n        // Perform\r\n        if (item.data.getItem.quantity < 5){\r\n          schedulePushNotification();\r\n          Alert.alert(\"Shopping List\", \"Would you like to add the item to your shopping list?\", [\r\n            {\r\n              text: \"Yes\",\r\n              onPress: () => {\r\n                const itemID = item.id;\r\n                const name = item.name;\r\n                Alert.alert(\"Shopping List\", \"Adding to shopping list: \" + name);\r\n                deletePantryItem(item.id);\r\n                addToShoppingList(itemID, name);\r\n              }\r\n            },\r\n            {\r\n             text: \"No\",\r\n             onPress: () => {\r\n               deletePantryItem(item.id);\r\n             },\r\n            },\r\n        ] );        }\r\n        const update = {\r\n          id: itemId,\r\n          name: nameText ? nameText : item.name,\r\n          currWeight: weightText && scale_weight == null ? parseFloat(weightText): (scale_weight ? scale_weight : item.data.getItem.currWeight),\r\n          quantity: quantityText\r\n            ? parseInt(quantityText)\r\n            : item.data.getItem.quantity,\r\n        };\r\n\r\n        const u = await API.graphql(\r\n          graphqlOperation(updateItem, { input: update })\r\n        );\r\n        setNameText(\"\");\r\n        setWeightText(\"\");\r\n        setQuantityText(\"\");\r\n        fetchItems();\r\n        handleModal();\r\n        \r\n      } catch (err) {}\r\n  }\r\n\r\n  // delete item\r\n  const deletePantryItem = async (deleteId) => {\r\n    try {\r\n      const id = {\r\n        id: deleteId\r\n      }\r\n      const d = await API.graphql(graphqlOperation(deleteItem,{input: id} ));\r\n      fetchItems();\r\n    } catch (err) { \r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  // add an item to the shopping list upon deleting it from the pantry, if the user wishes\r\n  const addToShoppingList = async (itemID, name) => {\r\n    console.log(\"SHOPPING\")\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser();\r\n\r\n      const id = {\r\n        id: itemID,\r\n        name: name,\r\n        imagePath: \"default_img\",\r\n        shoppingListItemsId: user.username.toString()\r\n      }\r\n      const d = await API.graphql(graphqlOperation(createItem,{input: id} ));\r\n    } catch (err) { \r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const modalScreen = (\r\n    <Modal visible={isModalVisible} animationType=\"slide\">\r\n      <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\", backgroundColor: '#b5e48c' }}>\r\n        <Text style={{fontSize: 25, fontWeight: \"bold\", margin: 10}}>Edit Your Item</Text>\r\n        <Input\r\n          placeholder=\"Name\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setNameText(value)}\r\n        />\r\n        <Input\r\n          placeholder=\"Current Weight (optional)\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setWeightText(value)}\r\n        />\r\n        <Input\r\n          placeholder=\"Quantity (optional)\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setQuantityText(value)}\r\n        />\r\n        <Button\r\n          buttonStyle={{ \r\n            marginLeft:120,\r\n            marginRight:120,\r\n            marginTop: 10,\r\n            backgroundColor:'#3D405B',\r\n            borderRadius:10,\r\n            borderWidth: 1,\r\n            width: 100,\r\n            borderColor: '#fff' }}  \r\n          title=\"Use Scale\"\r\n          onPress={() => {\r\n            Alert.alert(\"Weigh Item\", \"Please place the item you would like to weigh on the scale and wait a few seconds\");\r\n            setTimeout(getScaleWeight, 5000);\r\n          }}\r\n        ></Button>\r\n        <Button\r\n          buttonStyle={{ \r\n            marginLeft:120,\r\n            marginRight:120,\r\n            marginTop: 10,\r\n            backgroundColor:'#3D405B',\r\n            borderRadius:10,\r\n            borderWidth: 1,\r\n            width: 100,\r\n            borderColor: '#fff' }}  \r\n          title=\"Submit\"\r\n          onPress={() => {\r\n            updatePantryItem(null);\r\n          }}\r\n        ></Button>\r\n        <Button buttonStyle={{ \r\n            marginLeft:120,\r\n            marginRight:120,\r\n            marginTop: 10,\r\n            backgroundColor:'#3D405B',\r\n            borderRadius:10,\r\n            borderWidth: 1,\r\n            width: 100,\r\n            borderColor: '#fff' }}   title=\"Go Back\" onPress={handleModal}></Button>\r\n      </View>\r\n    </Modal>\r\n  );\r\n\r\n  // list of items from pantry\r\n  const listOfItems = items.map((item) => {\r\n    let percentage = (parseFloat(item.currWeight) / parseFloat(item.weight) * 100).toFixed(2);\r\n    return (\r\n      <View key={item.id}>\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            paddingHorizontal: 20,\r\n            paddingBottom: 20,\r\n            paddingTop: 20,\r\n          }}\r\n        >\r\n          <Text\r\n            style={{paddingLeft: 15, width: \"50%\", flexDirection: \"column\", fontSize: 18 }}\r\n          >\r\n            {item.name + '\\n'}\r\n            {item.quantity && <Text style={{fontSize: 15, fontWeight: 'bold'}}>Quantity: {item.quantity + \"\\n\"}</Text>}\r\n            {item.weight && <Text style={{fontSize: 15, fontWeight: \"bold\"}}>Percentage left: {percentage + \"%\\n\"}</Text>}\r\n            {item.expDate && <Text style={{fontSize: 15, fontWeight: \"bold\"}}>Expiration date: {item.expDate.substring(item.expDate.length - 8, item.expDate.length - 6) + \"/\" + item.expDate.substring(item.expDate.length - 6, item.expDate.length - 4) + \"/\" + item.expDate.substring(item.expDate.length - 4, item.expDate.length)}</Text>}\r\n          </Text>\r\n          <Button buttonStyle={{ backgroundColor: 'grey', width: 80, marginRight: 5 }} title=\"Update\" onPress={() => {\r\n            setItemId(item.id);\r\n            handleModal();\r\n            schedulePushNotification();\r\n          }}>\r\n          </Button>\r\n          <Button  buttonStyle={{backgroundColor: 'red', width: 80, marginRight: 5}} title=\"Delete\" onPress={() => {\r\n             Alert.alert(\"Delete Item\", \"Are you sure you want to delete item?\", [\r\n               {\r\n                 text: \"Yes\",\r\n                 onPress: () => { \r\n                  schedulePushNotification();\r\n                   Alert.alert(\"Shopping List\", \"Would you like to add the item to your shopping list?\", [\r\n                     {\r\n                       text: \"Yes\",\r\n                       onPress: () => {\r\n                         const itemID = item.id;\r\n                         const name = item.name;\r\n                         Alert.alert(\"Shopping List\", \"Adding to shopping list: \" + name);\r\n                         deletePantryItem(item.id);\r\n                         addToShoppingList(itemID, name);\r\n                       }\r\n                     },\r\n                     {\r\n                      text: \"No\",\r\n                      onPress: () => {\r\n                        deletePantryItem(item.id);\r\n                      },\r\n                     },\r\n                 ] );\r\n                },\r\n               },\r\n               {\r\n                 text: \"No\",\r\n                 style: \"cancel\",\r\n               },\r\n               \r\n             ]);\r\n          }}></Button>\r\n        </View>\r\n        <View style={{ height: 1.2, backgroundColor: \"grey\" }} />\r\n      </View>\r\n    );\r\n  });\r\n\r\n\r\n  // checks whether or not a user has a pantry yet\r\n  const checkIfPantryExists = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // grabs current user's information\r\n\r\n      // Performs the getPantry query based on user's id\r\n      const pantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      // If it's null, we want to render the create pantry button\r\n      // otherwise, we want to hide it\r\n      if (pantryData.data.getPantry == null) {\r\n        setCreatePantryButton(true);\r\n      } else {\r\n        setCreatePantryButton(null);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <ScrollView\r\n        contentContainerStyle={{\r\n           flexGrow: 1,\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          backgroundColor: '#b5e48c'\r\n        }}\r\n      >\r\n        {!pantryExists}\r\n        {/* Conditional render based on the value of createPantryButton and pantryExists */}\r\n        {createPantryButton && (         \r\n          <Button\r\n              buttonStyle={{                  \r\n                backgroundColor:'#3D405B',\r\n                borderRadius:10,\r\n                borderWidth: 1,\r\n                borderColor: '#fff' }}\r\n              title=\"Create Pantry\"\r\n              onPress={() => {\r\n                navigation.navigate(\"CreatePantry\");\r\n                schedulePushNotification();              }}\r\n            ></Button>\r\n        )}\r\n        {pantryExists && (\r\n          <View\r\n            style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}\r\n          >\r\n            <Text style={{ fontSize: 25, margin: 15 }}>{pantryName}</Text>\r\n            <Button\r\n              buttonStyle={{ marginTop:10,\r\n                paddingTop:15,\r\n                paddingBottom:15,\r\n                marginLeft:30,\r\n                marginRight:30,\r\n                backgroundColor:'#3D405B',\r\n                borderRadius:10,\r\n                borderWidth: 1,\r\n                borderColor: '#fff' }}\r\n              title=\"Add Item\"\r\n              onPress={() => {\r\n                navigation.navigate(\"AddItem\");\r\n                schedulePushNotification();\r\n              }}\r\n            ></Button>\r\n\r\n\r\n            \r\n            <View>{listOfItems}</View>\r\n            <View>{modalScreen}</View>\r\n          </View>\r\n        )}\r\n      </ScrollView>\r\n  );\r\n};\r\n\r\n/**\r\n * @author Kollin Labowski\r\n * @returns An expo token for the user to show that the user has registered for notifications through Expo\r\n */\r\nasync function registerForPushNotificationsAsync() {\r\n  let token;\r\n  if (Constants.isDevice) {\r\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Notifications.requestPermissionsAsync();\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== 'granted') {\r\n      alert('Failed to get push token for push notification!');\r\n      return;\r\n    }\r\n    token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    console.log(token);\r\n  } else {\r\n    alert('Must use physical device for Push Notifications');\r\n  }\r\n\r\n  if (Platform.OS === 'android') {\r\n    Notifications.setNotificationChannelAsync('default', {\r\n      name: 'default',\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: '#FF231F7C',\r\n    });\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\nasync function schedulePushNotification() {\r\n\r\n  const user = await Auth.currentAuthenticatedUser(); // grabs current user's information\r\n\r\n  const pantryData = await API.graphql(\r\n    graphqlOperation(getPantry, { id: user.username.toString() })\r\n  );\r\n\r\n  if (pantryData.data.getPantry == null) {\r\n    console.log(\"User has no pantry\");\r\n  }\r\n  else {\r\n    //NOTE: The frequency update field stores the number of seconds between timestamps\r\n\r\n    //MAKE CHANGE HERE!!! Convert from string to long, then do Math.floor(notifTime / 1000)\r\n    if(Math.floor(parseInt(pantryData.data.getPantry.notifTime) / 1000) + pantryData.data.getPantry.notiffreq < Math.floor(Date.now() / 1000) && pantryData.data.getPantry.notifPending) {\r\n      console.log(\"Allowing notifications again\");\r\n      const pantryInput = {\r\n        id: user.username.toString(),\r\n        notifPending: false,\r\n        notifTime: Math.floor(Date.now() / 1000),\r\n      };\r\n      const p = await API.graphql(graphqlOperation(updatePantry, {input: pantryInput}))\r\n    }\r\n\r\n    let itemsExpiring = 0;\r\n    const today = new Date();\r\n\r\n    //HERE: Check if there are any items expiring in the current user's pantry\r\n    // Grabs the id field from the pantry data\r\n    const pantryId = pantryData.data.getPantry.id;\r\n\r\n    // Grabs the items that are related to the id of the pantry\r\n    const itemsList = await API.graphql(\r\n      graphqlOperation(listItems, {\r\n        filter: {\r\n          pantryItemsId: {\r\n            eq: pantryId.toString(),\r\n          },\r\n        },\r\n      })\r\n    );\r\n\r\n    const b = itemsList.data.listItems.items;\r\n\r\n    const checkExpirations = b.map( async (item) => {\r\n      //NOTE: For some reason, the JavaScipt Date function is outputting the wrong date for me. I can calibrate it to be accurate\r\n      //      but I don't want to do that until closer to when we demo our project.\r\n      // console.log(\"DATE: \" + item.expDate);\r\n      // console.log(\"MONTH: \" + today.getMonth() + \" \" + today.getDay() + \" \" + today.getFullYear());\r\n      const exp_date = item.expDate;\r\n      if(exp_date != null) {\r\n\r\n        let month = 0;\r\n        let day = 0;\r\n        let year = 0;\r\n        // console.log(\"EXP DATE: \" + exp_date);\r\n        if(exp_date.length == 7) {\r\n          month = parseInt(exp_date.charAt(0));\r\n          day = parseInt(exp_date.substring(1,3));\r\n          year = parseInt(exp_date.substring(3,7));\r\n          // console.log(month + \" \" + day + \" \" + year);\r\n        }\r\n        else if(exp_date.length == 8) {\r\n          month = parseInt(exp_date.substring(0,2));\r\n          day = parseInt(exp_date.substring(2,4));\r\n          year = parseInt(exp_date.substring(4,8));\r\n          // console.log(month + \" \" + day + \" \" + year);\r\n        }\r\n        // console.log(\"FULL YEAR\", today.getFullYear() + \" \" + year);\r\n\r\n        //Handle if at the end of a year\r\n        if(today.getMonth() == 12) {\r\n          if(month == 12) {\r\n            if(today.getDay() <= day) {\r\n              itemsExpiring += 1;\r\n            }\r\n          }\r\n          if(month == 1 && today.getFullYear() + 1 == year) {\r\n            if(day <= 15) {\r\n              itemsExpiring += 1;\r\n            }\r\n          }\r\n        }//Next handle the general case\r\n        else if(today.getFullYear() == year) {\r\n          if(today.getMonth() == month && today.getDay() <= day) {\r\n            itemsExpiring += 1;\r\n          }\r\n          else if(today.getMonth() + 1 == month && today.getDay() > 15 && day <= 15) {\r\n            itemsExpiring += 1;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    let runningLow = 0;    \r\n\r\n    const checkRunningLow = b.map( async (item) => {\r\n      try {\r\n        const user = await Auth.currentAuthenticatedUser(); // returns cognito user JSON\r\n  \r\n        // Performs the getShoppingList query based on the id, which is the user's username\r\n        const shoppingListData = await API.graphql(\r\n          graphqlOperation(getShoppingList, { id: user.username.toString() })\r\n        );\r\n  \r\n        // if the getShoppingList query does not return a null value, sets shopping list exists to true\r\n        // otherwise sets it to false because they don't have a shopping list yet\r\n        if (shoppingListData.data.getShoppingList != null) {} else {}\r\n  \r\n        // Grabs the id field from the shopping list data\r\n        const shoppingListId = shoppingListData.data.getShoppingList.id;\r\n  \r\n        // Grabs the items that are related to the id of the shopping list\r\n        const itemsList = await API.graphql(\r\n          graphqlOperation(listItems, {\r\n            filter: {\r\n              shoppingListItemsId: {\r\n                eq: shoppingListId.toString(),\r\n              },\r\n            },\r\n          })\r\n        );\r\n  \r\n        // stores the value of the items returned\r\n       const b = itemsList.data.listItems.items;        \r\n\r\n        let alreadyCounted = false;\r\n\r\n        if(item.weight != null) {\r\n          if(item.currWeight < item.weight * 0.3) {\r\n            runningLow += 1;\r\n            \r\n\r\n            \r\n            if (!b.some(e => e.name === item.name)) {\r\n              console.log(\"QUANTITY RUNNING LOW\");\r\n              const user = await Auth.currentAuthenticatedUser();\r\n              const itemInput = {\r\n                name: item.name,\r\n                imagePath: \"default_img\",\r\n                shoppingListItemsId: user.username.toString(),\r\n              };\r\n              const inputItem = await API.graphql(\r\n                graphqlOperation(createItem, { input: itemInput })\r\n              );\r\n            }          \r\n            alreadyCounted = true;\r\n          }\r\n          else{console.log(\"Error checking weight\")}\r\n        }\r\n        console.log(\"my item \" + item.name);\r\n        if(item.quantity != null && !alreadyCounted) {   \r\n          console.log(item.quantity)         \r\n          if((item.quantity <= 2 || item.quantity < item.origQuantity * 0.3)) {\r\n            runningLow += 1;\r\n            if (!b.some(e => e.name === item.name)) {\r\n              const user = await Auth.currentAuthenticatedUser();\r\n              const itemInput = {\r\n                name: item.name,\r\n                imagePath: \"default_img\",\r\n                shoppingListItemsId: user.username.toString(),\r\n              };\r\n              const inputItem = await API.graphql(\r\n                graphqlOperation(createItem, { input: itemInput })\r\n              );\r\n            }          \r\n            alreadyCounted = true;\r\n          }\r\n          else{console.log(\"Error checking quantity\")}\r\n        }\r\n        console.log(\"low: \" + runningLow)\r\n      } \r\n      catch (err) {\r\n        console.log(err);\r\n      }      \r\n    });\r\n    \r\n    console.log(\"RUNNING LOW: \" + runningLow);\r\n\r\n    if(!pantryData.data.getPantry.notifPending && (itemsExpiring > 0 || runningLow > 0)) {\r\n      console.log(\"Scheduling notification\");\r\n\r\n      const newestPantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      const curr_time = Date.now();\r\n\r\n      let test = \"\" + curr_time;\r\n\r\n      // console.log(\"curr_time: \" + test);\r\n\r\n      const pantryInput = {\r\n        id: user.username.toString(),\r\n        notifPending: true,\r\n        notifTime: test,\r\n      };\r\n\r\n      const old_time = newestPantryData.data.getPantry.notifTime\r\n      // console.log(\"OLD: \" + old_time + \" NEW: \" + test);\r\n\r\n      if(parseInt(old_time) + 1000 < curr_time) { // The purpose here is to prevent the user from getting multiple notifications at once\r\n        \r\n        const p = await API.graphql(graphqlOperation(updatePantry, {input: pantryInput}))\r\n        // console.log(\"NEW TIME: \" + test);\r\n        // console.log(\"ADDING\");\r\n        // console.log(\"Scheduling notification\");\r\n        // console.log(newestPantryData.data.getPantry.notifTime + ' ' + curr_time);\r\n\r\n        if(itemsExpiring > 0 && runningLow <= 0) {\r\n          \r\n          await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n              title: \"SMART PANTRY\",\r\n              body: 'You have ' + itemsExpiring + ' item(s) expiring soon! Click here to view them.',\r\n              data: { data: 'View home menu' },\r\n            },\r\n            trigger: { seconds: pantryData.data.getPantry.notiffreq },\r\n          });\r\n        }\r\n        else if(itemsExpiring <= 0 && runningLow > 0) {\r\n          await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n              title: \"SMART PANTRY\",\r\n              body: 'You have ' + runningLow + ' item(s) running low! Click here to view them.',\r\n              data: { data: 'View home menu' },\r\n            },\r\n            trigger: { seconds: pantryData.data.getPantry.notiffreq },\r\n          });\r\n        }\r\n        else {\r\n          await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n              title: \"SMART PANTRY\",\r\n              body: 'You have ' + itemsExpiring + ' item(s) expiring soon and ' + runningLow + ' item(s) running low! Click here to view them.',\r\n              data: { data: 'View home menu' },\r\n            },\r\n            trigger: { seconds: pantryData.data.getPantry.notiffreq },\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default HomeStackScreen;\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/Home2.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "HomeStack",
    "memberof": "SmartPantry/screens/Home2.js",
    "static": true,
    "longname": "SmartPantry/screens/Home2.js~HomeStack",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Home2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "HomeScreen",
    "memberof": "SmartPantry/screens/Home2.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Home2.js~HomeScreen",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Home2.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Ryan Mraz"
      },
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@returns",
        "tagValue": "Displays items and related information for the current user's pantry, AND manages notifications for the user's device."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "used for navigating from the Home stack."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Displays items and related information for the current user's pantry, AND manages notifications for the user's device."
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "registerForPushNotificationsAsync",
    "memberof": "SmartPantry/screens/Home2.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Home2.js~registerForPushNotificationsAsync",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Home2.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 532,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@returns",
        "tagValue": "An expo token for the user to show that the user has registered for notifications through Expo"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "An expo token for the user to show that the user has registered for notifications through Expo"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "schedulePushNotification",
    "memberof": "SmartPantry/screens/Home2.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Home2.js~schedulePushNotification",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Home2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 563,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "HomeStackScreen",
    "memberof": "SmartPantry/screens/Home2.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Home2.js~HomeStackScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Home2.js",
    "importStyle": "HomeStackScreen",
    "description": "",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Ryan Mraz"
      },
      {
        "tagName": "@returns",
        "tagValue": "Manages the Home stack, including AddItemScreen, CreatePantryScreen, ManualAddScreen, and BarcodeAddScreen"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Manages the Home stack, including AddItemScreen, CreatePantryScreen, ManualAddScreen, and BarcodeAddScreen"
    },
    "params": []
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "SmartPantry/screens/ManualAdd.js",
    "content": "import React , {useState} from \"react\";\r\nimport {Input, Button} from \"react-native-elements\";\r\nimport { View, ScrollView} from \"react-native\";\r\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\r\nimport { createItem } from \"../mutations\";\r\n\r\n/**\r\n * @author Ryan Mraz\r\n * @param navigation - Used for navigating on the Home stack screen.  \r\n * @returns Inputs and buttons used for updating fields of an item\r\n */\r\nconst ManualAddScreen = ({ navigation }) => {\r\n\r\n    const [nameText, setNameText] = useState(\"\");\r\n    const [weightText, setWeightText] = useState(\"\");\r\n    const [quantityText, setQuantityText] = useState(\"\");\r\n\r\n    const addPantryItem = async () => {\r\n\r\n        if (nameText == \"\") {\r\n            return;\r\n        }\r\n\r\n        const user = await Auth.currentAuthenticatedUser();\r\n        const itemInput = {\r\n          name: nameText,\r\n          imagePath: \"default_img\",\r\n          weight: parseFloat(weightText),\r\n          quantity: parseInt(quantityText),\r\n          pantryItemsId: user.username.toString()\r\n        };\r\n        const inputItem = await API.graphql(graphqlOperation(createItem, {input: itemInput}));\r\n        navigation.navigate(\"AddItem\");\r\n    }\r\n\r\n    return (\r\n      <ScrollView contentContainerStyle={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n        <Input\r\n          placeholder=\"Name\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setNameText(value)}\r\n        />\r\n        <Input\r\n          placeholder=\"Weight (lbs.) (optional)\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setWeightText(value)}\r\n        />\r\n        <Input\r\n          placeholder=\"Quantity (optional)\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setQuantityText(value)}\r\n        />\r\n        <Button\r\n          buttonStyle={{ width: 200 }}\r\n          title=\"Submit\"\r\n          onPress={() => {\r\n            addPantryItem();\r\n          }}\r\n        ></Button>\r\n      </ScrollView>\r\n    );\r\n};\r\n\r\nexport default ManualAddScreen;\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/ManualAdd.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "ManualAddScreen",
    "memberof": "SmartPantry/screens/ManualAdd.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/ManualAdd.js~ManualAddScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/ManualAdd.js",
    "importStyle": "ManualAddScreen",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Ryan Mraz"
      },
      {
        "tagName": "@returns",
        "tagValue": "Inputs and buttons used for updating fields of an item"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "Used for navigating on the Home stack screen."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Inputs and buttons used for updating fields of an item"
    }
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "SmartPantry/screens/MyInfo.js",
    "content": "import React, { Component, useState, useEffect} from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  ScrollView,\r\n  Button,\r\n  Alert,\r\n} from \"react-native\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport { getPantry, listItems } from \"../queries\";\r\nimport { Heading } from 'native-base'\r\nimport { StyleSheet } from 'react-native';\r\n\r\n{/*const getPantryInfo = async (user) => {\r\n    try {\r\n        const pantryData = await API.graphql(\r\n            graphqlOperation(getPantry, { id: user.username.toString() })\r\n        );\r\n\r\n        if (pantryData.data.getPantry == null) {\r\n            const outputString = \"Email: \" + user.attributes.email + \"\\nPhone Number: \" + user.attributes.phone_number + \"\\nNo pantry information to display\"\r\n            Alert.alert(\"User Information\", outputString);\r\n            return null;\r\n        }\r\n        else {\r\n\r\n            const pantryName = pantryData.data.getPantry.name;\r\n            const dateCreated = pantryData.data.getPantry.createdAt;\r\n            const dateUpdated = pantryData.data.getPantry.updatedAt;\r\n\r\n            const pantryId = pantryData.data.getPantry.id;\r\n\r\n            const itemsList = await API.graphql(\r\n                graphqlOperation(listItems, {\r\n                filter: {\r\n                    pantryItemsId: {\r\n                    eq: pantryId.toString(),\r\n                    },\r\n                },\r\n                })\r\n            );\r\n\r\n            const b = itemsList.data.listItems.items;\r\n\r\n            let itemCount = 0;\r\n\r\n            const countItems = b.map( async (item) => {\r\n                itemCount += 1;\r\n            });\r\n\r\n            let outputString = \"Email: \" + user.attributes.email + \"\\nPhone Number: \" + user.attributes.phone_number + \"\\nPantry Name: \" + pantryName;\r\n            outputString += \"\\nPantry Create Date: \" + dateCreated + \"\\nLast Pantry Update: \" + dateUpdated + \"\\nSize of Pantry: \" + itemCount;\r\n\r\n            Alert.alert(\"User Information\", outputString)\r\n            //NOTE: Whenever this is finalized, it would probably be best to display a more user-friendly piece of data than a timestamp (basically just make it more legible)\r\n        }\r\n\r\n    } catch(err) {\r\n        console.log(err);\r\n    }\r\n}*/}\r\n\r\n/**\r\n * @author Kollin Labowski\r\n * @author Shannon Biega\r\n * @author Ryan Mraz\r\n * @param navigation - Used to navigate for the Settings stack \r\n * @returns Displays information about the user\r\n */\r\nconst MyInfoScreen = ({ navigation }) => {\r\n   useEffect(() => {\r\n        const unsubscribe = navigation.addListener(\"focus\", () => {\r\n            fetchInfo();\r\n        });\r\n        return unsubscribe;\r\n      }, [navigation]);\r\n\r\n    const [email, setEmail]= useState(\"\");\r\n    const [phoneNumber, setPhoneNumber]= useState(\"\");\r\n\r\n\r\n    const fetchInfo = async () => {\r\n        console.log(\"HERE\") \r\n        // alert(email);\r\n        try {\r\n            const user = await Auth.currentAuthenticatedUser();\r\n            // console.log(user);\r\n    \r\n            // const email = user.attributes.email;\r\n            // const phone_number = user.attributes.phone_number;\r\n    \r\n            setEmail(user.attributes.email); \r\n            setPhoneNumber([user.attributes.phone_number.substring(0,2), '-', user.attributes.phone_number.substring(2,5),'-',user.attributes.phone_number.substring(5,8),'-',user.attributes.phone_number.substring(8,12)]);\r\n    \r\n            // alert(phone_number);\r\n            //const pantryStats = getPantryInfo(user);\r\n            // return (<Text style={{fontSize: 17, textAlign: 'center', margin: 10}}>{email}</Text>)\r\n            \r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    return (\r\n    <ScrollView style={{backgroundColor: '#b5e48c'}}>    \r\n       \r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        <View><Text style={[styles.paddedHeading, styles.width_username]}>Email</Text></View>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        </View> \r\n        <Text style={{fontSize: 17, textAlign: 'center', margin: 10}}>{email}</Text>\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        <View><Text style={[styles.paddedHeading, styles.width_phonenumber]}>Phone Number</Text></View>\r\n        <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n        </View> \r\n        <Text style={{fontSize: 17, textAlign: 'center', margin: 10}}>{phoneNumber}</Text>  \r\n        \r\n      </ScrollView>\r\n    );\r\n};\r\n\r\n/*\r\nconst fetchInfo = async () => {\r\n    // alert(email);\r\n    try {\r\n        const user = await Auth.currentAuthenticatedUser();\r\n        // console.log(user);\r\n\r\n        const email = user.attributes.email;\r\n        const phone_number = user.attributes.phone_number;\r\n        // alert(phone_number);\r\n        const pantryStats = getPantryInfo(user);\r\n        \r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n\r\n    // alert(email);\r\n\r\n    return (\r\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n            <Text>\r\n                EMAIL\r\n            </Text>\r\n        </View>\r\n    );\r\n}*/\r\nconst styles = StyleSheet.create({\r\n    paddedHeading : {\r\n      fontWeight: 'bold',\r\n      fontSize: 19,\r\n      textAlign: 'center',\r\n      margin: 20\r\n    },\r\n    width_email:{\r\n        width: 55,\r\n    },\r\n    width_phonenumber:{\r\n        width: 140,\r\n    }\r\n  });\r\n\r\n\r\nexport default MyInfoScreen;",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/MyInfo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/screens/MyInfo.js",
    "static": true,
    "longname": "SmartPantry/screens/MyInfo.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/MyInfo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "MyInfoScreen",
    "memberof": "SmartPantry/screens/MyInfo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/MyInfo.js~MyInfoScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/MyInfo.js",
    "importStyle": "MyInfoScreen",
    "description": "",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@author",
        "tagValue": "Shannon Biega"
      },
      {
        "tagName": "@author",
        "tagValue": "Ryan Mraz"
      },
      {
        "tagName": "@returns",
        "tagValue": "Displays information about the user"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "Used to navigate for the Settings stack"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Displays information about the user"
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "SmartPantry/screens/Notifications.js",
    "content": "\r\nimport React, {useState, useRef, useEffect } from 'react';\r\nimport {\r\n  SafeAreaView,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Animated,\r\n  PanResponder,\r\n  Button,\r\n  Alert,\r\n  Platform,\r\n} from 'react-native';\r\n// import { Notifications } from 'expo';\r\n// import PushNotification from 'react-native-push-notification';\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport { getPantry } from \"../queries\";\r\nimport { deletePantry, updatePantry } from \"../mutations\";\r\nimport Constants from 'expo-constants';\r\nimport * as Notifications from 'expo-notifications';\r\n// import * as Permissions from 'expo-permissions';\r\n\r\n/**\r\n * @author Kollin Labowski\r\n * @param {Integer} new_frequency - The new notification frequency to use, measured in seconds\r\n */\r\nconst updateFrequency = async ( new_frequency ) => {\r\n    try {\r\n      \r\n\r\n      const user = await Auth.currentAuthenticatedUser(); // returns cognito user JSON\r\n\r\n      const pantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      if (pantryData.data.getPantry == null) {\r\n        Alert.alert(\"Notifications\", \"You must have a pantry to select a notification frequency\");\r\n        return null;\r\n      } else {\r\n\r\n        const pantryInput = {\r\n          notiffreq: new_frequency,\r\n        }\r\n\r\n        const update = {\r\n          id: user.username.toString(),\r\n          notiffreq: new_frequency,\r\n        }\r\n\r\n        const u = await API.graphql(graphqlOperation(updatePantry, {input: update}));\r\n\r\n      const pantryData2 = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      Alert.alert(\"Notifications\", \"Your notification frequency will be set to: \" + new_frequency);\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: false,\r\n    shouldSetBadge: false,\r\n  }),\r\n});\r\n\r\n/**\r\n * @author Kollin Labowski\r\n * @returns Different buttons for the user to select their desired notification frequency\r\n */\r\nconst NotificationsScreen = () => {\r\n  // fetchItems();\r\n  // ReceiveNotification();\r\n  try {\r\n    const [expoPushToken, setExpoPushToken] = useState('');\r\n    const [notification, setNotification] = useState(false);\r\n    const notificationListener = useRef();\r\n    const responseListener = useRef();\r\n\r\n    useEffect( () => {\r\n      registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n\r\n      notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n        setNotification(notification);\r\n      });\r\n\r\n      responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n        console.log(response);\r\n      });\r\n\r\n      return () => {\r\n        Notifications.removeNotificationSubscription(notificationListener.current);\r\n        Notifications.removeNotificationSubscription(responseListener.current);\r\n      };\r\n    }, []);\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n\r\n  const [sliderDimensions, setSliderDimensions] = useState({\r\n    height: null,\r\n    top: null,\r\n    bottom: null,\r\n  });\r\n\r\n  const stepperAnim = useRef(new Animated.Value(0)).current;\r\n  const railFillAnim = useRef(new Animated.Value(0)).current;\r\n\r\n  const stepperResponder = PanResponder.create({\r\n    onStartShouldSetPanResponder: () => true,\r\n    onPanResponderGrant: () => {\r\n      stepperAnim.setOffset(stepperAnim._value);\r\n      railFillAnim.setOffset(railFillAnim._value);\r\n    },\r\n    onPanResponderMove: (evt, {dy, moveY}) => {\r\n      if (moveY > sliderDimensions.top && moveY < sliderDimensions.bottom) {\r\n        stepperAnim.setValue(dy);\r\n        railFillAnim.setValue(-dy);\r\n      }\r\n    },\r\n    onPanResponderRelease: () => {\r\n      stepperAnim.flattenOffset();\r\n      railFillAnim.flattenOffset();\r\n    },\r\n  });\r\n\r\n  let outer_y = 200;\r\n\r\n  return (\r\n    // The following code was used for the slider, which at the moment we are no longer using\r\n    // <SafeAreaView>\r\n    //   <Text style={styles.title}>How often would you like to receive notifications?</Text>\r\n    //   <View\r\n    //     style={styles.slider}\r\n    //     onLayout={(evt) => {\r\n    //       let {height, y} = evt.nativeEvent.layout;\r\n    //       outer_y = y;\r\n\r\n    //       setSliderDimensions({\r\n    //         height: height,\r\n    //         top: y,\r\n    //         bottom: y + height,\r\n    //       });\r\n\r\n    //     //   UpdatePreference(y);\r\n    //     }}>\r\n    //     <View style={styles.rail}>\r\n    //       <Animated.View style={[styles.railFill, {height: railFillAnim}]}>\r\n    //         {sliderDimensions.height\r\n    //           ? Array.apply(\r\n    //               null,\r\n    //               Array(Math.floor(sliderDimensions.height / 10)),\r\n    //             ).map((item, index) => (\r\n    //               <View\r\n    //                 key={index}\r\n    //                 style={[styles.railFillSpace, {bottom: index * 10}]}\r\n    //               />\r\n    //             ))\r\n    //           : null}\r\n    //       </Animated.View>\r\n    //     </View>\r\n    //     <Animated.View\r\n    //       {...stepperResponder.panHandlers}\r\n    //       style={[\r\n    //         styles.stepper,\r\n    //         {\r\n    //           transform: [{translateY: stepperAnim}],\r\n    //         },\r\n    //       ]}\r\n\r\n    //     //   { ...outer_y += 10 }\r\n    //     />\r\n    //   </View>\r\n    <SafeAreaView  style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\", backgroundColor: '#b5e48c' }}>\r\n      <Text style={{textAlign: 'center', marginHorizontal: 15, fontSize: 17}}>{'\\n'}Please select how often you would like to receive notifications about your pantry:{'\\n'}</Text>\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(10);\r\n        }}\r\n        title=\"10 Seconds\"\r\n        color=\"black\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 / 24);\r\n        }}\r\n        title=\"1 Hour\"\r\n        color=\"#431005\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 / 12);\r\n        }}\r\n        title=\"2 Hours\"\r\n        color=\"#571607\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 / 3);\r\n        }}\r\n        title=\"8 Hours\"\r\n        color=\"#671B0B\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 / 2);\r\n        }}\r\n        title=\"12 Hours\"\r\n        color=\"#79220F\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400);\r\n        }}\r\n        title=\"1 Day\"\r\n        color=\"#8E2913\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 * 2);\r\n        }}\r\n        title=\"2 Days\"\r\n        color=\"#A32E15\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 * 7);\r\n        }}\r\n        title=\"1 Week\"\r\n        color=\"#B33216\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 * 14);\r\n        }}\r\n        title=\"2 Weeks\"\r\n        color=\"#DA330F\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 * 30);\r\n        }}\r\n        title=\"1 Month\"\r\n        color=\"#F3330A\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 * 90);\r\n        }}\r\n        title=\"3 Months\"\r\n        color=\"#FF4C26\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={ async () => {\r\n            alert(\"You will receive a notification in a few seconds\")\r\n            await schedulePushNotification();\r\n        }}\r\n        title=\"Click Here to Test Notifications\"\r\n        accessibilityLabel=\"Click here to test notifications\"\r\n      />\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  title: {\r\n    textAlign: 'center',\r\n    fontSize: 20,\r\n    marginVertical: 50,\r\n    marginBottom: 100,\r\n  },\r\n  slider: {\r\n    marginVertical: 50,\r\n    width: 50,\r\n    height: '40%',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    position: 'relative',\r\n    marginBottom: 0,\r\n  },\r\n  rail: {\r\n    width: 20,\r\n    height: '50%',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    backgroundColor: '#DBDBDB',\r\n  },\r\n  stepper: {\r\n    width: '100%',\r\n    height: 15,\r\n    backgroundColor: 'gray',\r\n  },\r\n  railFill: {\r\n    width: '100%',\r\n    backgroundColor: 'lightgreen',\r\n    position: 'absolute',\r\n    bottom: 0,\r\n  },\r\n  railFillSpace: {\r\n    height: 5,\r\n    width: '100%',\r\n    backgroundColor: 'white',\r\n    position: 'absolute',\r\n  },\r\n});\r\n\r\n/**\r\n * @author Kollin Labowski\r\n */\r\nasync function schedulePushNotification() {\r\n  await Notifications.scheduleNotificationAsync({\r\n    content: {\r\n      title: \"SMART PANTRY\",\r\n      body: 'Don\\'t forget to keep your pantry up to date!',\r\n      data: { data: 'goes here' },\r\n    },\r\n    trigger: { seconds: 20 },\r\n  });\r\n}\r\n\r\n/**\r\n * @author Kollin Labowski\r\n * @returns Token used to verify that the user was registered for push notifications\r\n */\r\nasync function registerForPushNotificationsAsync() {\r\n  let token;\r\n  if (Constants.isDevice) {\r\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Notifications.requestPermissionsAsync();\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== 'granted') {\r\n      alert('Failed to get push token for push notification!');\r\n      return;\r\n    }\r\n    token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    console.log(token);\r\n  } else {\r\n    alert('Must use physical device for Push Notifications');\r\n  }\r\n\r\n  if (Platform.OS === 'android') {\r\n    Notifications.setNotificationChannelAsync('default', {\r\n      name: 'default',\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: '#FF231F7C',\r\n    });\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\nexport default NotificationsScreen;\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/Notifications.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "updateFrequency",
    "memberof": "SmartPantry/screens/Notifications.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Notifications.js~updateFrequency",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Notifications.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "new_frequency",
        "description": "The new notification frequency to use, measured in seconds"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/screens/Notifications.js",
    "static": true,
    "longname": "SmartPantry/screens/Notifications.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Notifications.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "schedulePushNotification",
    "memberof": "SmartPantry/screens/Notifications.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Notifications.js~schedulePushNotification",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Notifications.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 326,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "registerForPushNotificationsAsync",
    "memberof": "SmartPantry/screens/Notifications.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Notifications.js~registerForPushNotificationsAsync",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Notifications.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 341,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@returns",
        "tagValue": "Token used to verify that the user was registered for push notifications"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Token used to verify that the user was registered for push notifications"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "NotificationsScreen",
    "memberof": "SmartPantry/screens/Notifications.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Notifications.js~NotificationsScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Notifications.js",
    "importStyle": "NotificationsScreen",
    "description": "",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@returns",
        "tagValue": "Different buttons for the user to select their desired notification frequency"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Different buttons for the user to select their desired notification frequency"
    },
    "params": []
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "SmartPantry/screens/OtherPantry.js",
    "content": "import { getPantry, listPantries } from \"../queries\";\r\n// import { Button } from \"react-native-elements\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\n\r\nimport React, { useState, useEffect, Component } from \"react\";\r\nimport {Text,View, SafeAreaView, StyleSheet ,ScrollView, Modal, Alert, Button } from \"react-native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport {Icon, Input} from 'react-native-elements';\r\nimport CreatePantryScreen from \"./CreatePantry\";\r\nimport AddItemScreen from \"./AddItem\";\r\nimport ManualAddScreen from \"./ManualAdd\";\r\nimport { listItems, getItem } from \"../queries.js\";\r\nimport { createItem, deleteItem, updateItem, createShoppingList } from \"../mutations\";\r\nimport BarcodeAddScreen from \"./BarcodeAdd\";\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport { StatusBar } from \"expo-status-bar\";  \r\n\r\n\r\nconst OtherPantryScreen = ({ navigation }) => {\r\n    // viewOtherPantry();\r\n\r\n    // useState variables to track whether to render the create pantry button\r\n  // the value of the pantry items, and if a user has a pantry.\r\n  const [createPantryButton, setCreatePantryButton] = useState(null);\r\n  const [items, setItems] = useState([]);\r\n  const [pantryExists, setPantryExists] = useState(false);\r\n  const [pantryName, setPantryName] = useState(\"\");\r\n  const [nameText, setNameText] = useState(\"\");\r\n  const [weightText, setWeightText] = useState(\"\");\r\n  const [quantityText, setQuantityText] = useState(\"\");\r\n  const [itemId, setItemId] = useState(null);\r\n\r\n   const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n   const handleModal = () => setIsModalVisible(() => !isModalVisible);\r\n\r\n  // Loads when you come back to this screen\r\n  // refreshes each time you go back to the screen\r\n  // Checks if a pantry exists and fetches the user's items on every load\r\n  useEffect(() => {\r\n    const unsubscribe = navigation.addListener(\"focus\", () => {\r\n      checkIfPantryExists();\r\n      fetchItems();\r\n    });\r\n    return unsubscribe;\r\n  }, [navigation, items]);\r\n\r\n  // fetches just the items of the pantry that belongs to the current authenticated user\r\n  const fetchItems = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // returns cognito user JSON\r\n\r\n      // Performs the getPantry query based on the id, which is the user's username\r\n\r\n    //   const user = await Auth.currentAuthenticatedUser();\r\n  \r\n      const pantriesList = await API.graphql(\r\n        graphqlOperation(listPantries, {\r\n        filter: {\r\n            collabId: {\r\n            eq: user.attributes.email,\r\n            },\r\n        },\r\n        })\r\n      );\r\n\r\n      const c = pantriesList.data.listPantries.items;\r\n\r\n    //   console.log(c[0].name);\r\n\r\n      if(c.length > 0) {\r\n        //NOTE: As of 3/27/2022, it may be the case that a collaborator can view multiple pantries\r\n\r\n        //   const collabPantries = c.map( async (pantry) => {\r\n        const pantryData = await API.graphql(graphqlOperation(getPantry, { id: c[0].id }));\r\n\r\n            //  console.log(pantryData.data.getPantry.name);\r\n\r\n        if (pantryData.data.getPantry != null) {\r\n            setPantryExists(true);\r\n            setPantryName(pantryData.data.getPantry.name);\r\n        } else {\r\n            setPantryExists(false);\r\n        }\r\n        \r\n            //   // Grabs the id field from the pantry data\r\n              const pantryId = pantryData.data.getPantry.id;\r\n        \r\n              // Grabs the items that are related to the id of the pantry\r\n              const itemsList = await API.graphql(\r\n                graphqlOperation(listItems, {\r\n                  filter: {\r\n                    pantryItemsId: {\r\n                      eq: pantryId.toString(),\r\n                    },\r\n                  },\r\n                })\r\n              );\r\n        \r\n            //   // stores the value of the items returned\r\n              const b = itemsList.data.listItems.items;\r\n        \r\n            //   // changes the value of useState items value\r\n              setItems(b);\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n\r\n  // add an item to the shopping list upon deleting it from the pantry, if the user wishes\r\n  const addToShoppingList = async (itemID, name) => {\r\n    try {\r\n        // console.log(itemID, name);\r\n\r\n      const user = await Auth.currentAuthenticatedUser();\r\n    //   console.log(user.username.toString());\r\n      const pantryData = await API.graphql(\r\n          graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      if (pantryData.data.getPantry == null) {\r\n        Alert.alert(\"Shopping List Error\", \"You must create a pantry before you can add items to your shopping list\");\r\n        return null;\r\n      }\r\n\r\n      const id = {\r\n        name: name,\r\n        imagePath: \"default_img\",\r\n        shoppingListItemsId: user.username.toString()\r\n      }\r\n      const d = await API.graphql(graphqlOperation(createItem,{input: id} ));\r\n\r\n      Alert.alert(\"Add to Shopping List\", \"Added \\\"\" + name + \"\\\" to shopping list\");\r\n\r\n    } catch (err) { \r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  // list of items from pantry\r\n  const listOfItems = items.map((item) => {\r\n    let percentage = (parseFloat(item.currWeight) / parseFloat(item.weight) * 100).toFixed(2);\r\n    return (\r\n      <View key={item.id}>\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            paddingHorizontal: 20,\r\n            paddingBottom: 20,\r\n            paddingTop: 20,\r\n          }}\r\n        >\r\n          <Text\r\n            style={{paddingLeft: 15, width: \"50%\", flexDirection: \"column\", fontSize: 18 }}\r\n          >\r\n            {item.name + '\\n'}\r\n            {item.quantity && <Text style={{fontSize: 15, fontWeight: 'bold'}}>Quantity: {item.quantity}</Text>}\r\n            {item.weight && <Text style={{fontSize: 15, fontWeight: \"bold\"}}>Percentage left: {percentage}%</Text>}\r\n          </Text>\r\n          <Button buttonStyle={{ backgroundColor: 'grey', width: 75, marginRight: 5 }} title=\"add to shopping list\" onPress={() => {\r\n            addToShoppingList(item.id, item.name);\r\n          }}>\r\n          </Button>\r\n        </View>\r\n        <View style={{ height: 1.2, backgroundColor: \"grey\" }} />\r\n      </View>\r\n    );\r\n  });\r\n\r\n\r\n  // checks whether or not a user has a pantry yet\r\n  const checkIfPantryExists = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // grabs current user's information\r\n\r\n      // Performs the getPantry query based on user's id\r\n      const pantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      // If it's null, we want to render the create pantry button\r\n      // otherwise, we want to hide it\r\n      if (pantryData.data.getPantry == null) {\r\n        setCreatePantryButton(true);\r\n      } else {\r\n        setCreatePantryButton(null);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <ScrollView\r\n        contentContainerStyle={{\r\n          flexGrow: 1,\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          backgroundColor: '#b5e48c'\r\n        }}\r\n      >\r\n        {!pantryExists && <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 15}}>You are not a collaborator for any pantry</Text>}\r\n        {pantryExists && (\r\n          <View\r\n            style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\",backgroundColor: '#b5e48c'}}\r\n          >\r\n            <Text style={{ fontSize: 25, marginBottom: 15 }}>{pantryName}</Text>\r\n\r\n            <View>{listOfItems}</View>\r\n          </View>\r\n        )}\r\n      </ScrollView>\r\n  );\r\n  \r\n    return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n      \r\n    </View>\r\n  );\r\n};\r\n\r\nexport default OtherPantryScreen;",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/OtherPantry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "OtherPantryScreen",
    "memberof": "SmartPantry/screens/OtherPantry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/OtherPantry.js~OtherPantryScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/OtherPantry.js",
    "importStyle": "OtherPantryScreen",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "SmartPantry/screens/Profile.js",
    "content": "import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  ScrollView,\r\n  Dimensions,\r\n  ImageBackground,\r\n  StyleSheet,\r\n  Platform,\r\n  Image\r\n} from \"react-native\";\r\nimport GalleryComponent from './../src/components/GalleryComponent';\r\n\r\n\r\n\r\n/**\r\n * @author Shannon Biega\r\n * @param navigation - Used to navigate the Settings stack.\r\n * @returns Displays the user's profile information and profile picture.\r\n */\r\nconst ProfileScreen = ({ navigation }) => {\r\n  return (\r\n    <ScrollView\r\n      style={{ flex: 1, backgroundColor: \"#fff\" }}\r\n      showsVerticalScrollIndicator={false}\r\n    >\r\n      <ImageBackground\r\n        source={require(\"../assets/images/bg.jpg\")}\r\n        style={{ height: Dimensions.get(\"window\").height / 4 }}\r\n      >\r\n        <View style={Styles.brandView}>\r\n          <Text style={Styles.brandViewText}></Text>\r\n        </View>\r\n      </ImageBackground>\r\n      <View style={Styles.bottomView}>\r\n        <View style={{ padding: 40 }}>\r\n          <View style={{ margin: 20 }}>\r\n            <Text>Profile Photo</Text>\r\n            <GalleryComponent></GalleryComponent>\r\n          </View>\r\n\r\n          <View style={Styles.forgotPassView}>\r\n            <View style={{ flex: 1, marginLeft: -20 }}></View>\r\n            <View style={{ flex: 1, marginRight: 0 }}></View>\r\n          </View>\r\n\r\n          <View\r\n            style={{\r\n              height: 100,\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          ></View>\r\n          <View\r\n            style={{ marginBottom: 0, flex: 1, alignItems: \"center\" }}\r\n          ></View>\r\n        </View>\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default ProfileScreen;\r\n\r\nconst Styles = StyleSheet.create({\r\n  brandView: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  brandViewText: {\r\n    color: \"black\",\r\n    fontSize: 45,\r\n    fontWeight: \"bold\",\r\n    textTransform: \"uppercase\",\r\n    backgroundColor: \"white\",\r\n    padding: 5,\r\n    borderRadius: 20,\r\n  },\r\n  bottomView: {\r\n    flex: 1.5,\r\n    backgroundColor: \"white\",\r\n    bottom: 50,\r\n    borderTopStartRadius: 60,\r\n    borderTopEndRadius: 60,\r\n  },\r\n  textInputs: {\r\n    height: 40,\r\n    width: 250,\r\n    margin: 10,\r\n    borderWidth: 1,\r\n    padding: 10,\r\n    borderRadius: 15,\r\n  },\r\n  forgotPassView: {\r\n    height: 50,\r\n    marginTop: 5,\r\n    flexDirection: \"row\",\r\n  },\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/Profile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "Styles",
    "memberof": "SmartPantry/screens/Profile.js",
    "static": true,
    "longname": "SmartPantry/screens/Profile.js~Styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Profile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "ProfileScreen",
    "memberof": "SmartPantry/screens/Profile.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Profile.js~ProfileScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Profile.js",
    "importStyle": "ProfileScreen",
    "description": "",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Shannon Biega"
      },
      {
        "tagName": "@returns",
        "tagValue": "Displays the user's profile information and profile picture."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "Used to navigate the Settings stack."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Displays the user's profile information and profile picture."
    }
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "SmartPantry/screens/Settings.js",
    "content": "import React, { Component, useState } from \"react\";\r\nimport {Text,View, Switch, Alert, ScrollView } from \"react-native\";\r\nimport {Icon, Button} from \"react-native-elements\";\r\nimport {Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport MyInfoScreen from \"./MyInfo\";\r\nimport AccountsScreen from \"./Accounts\";\r\nimport NotificationsScreen from \"./Notifications\";\r\nimport HelpScreen from \"./Help\";\r\nimport AboutScreen from \"./About\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport { deletePantry, deleteShoppingList, deleteItem } from \"../mutations\";\r\nimport { getPantry, listItems, getShoppingList } from \"../queries\";\r\nimport OtherPantryScreen from \"./OtherPantry\";\r\nimport CreditsScreen from \"./Credits\";\r\n\r\nconst handleSignOut = () => {\r\n    Alert.alert(\"Sign Out\", \"Do you want to sign out?\", [\r\n      {\r\n        text: \"Yes\",\r\n        onPress: () => Auth.signOut(),\r\n      },\r\n      {\r\n        text: \"No\",\r\n        style: \"cancel\",\r\n      },\r\n    ]);\r\n}\r\n\r\nconst SettingsStack = createStackNavigator();\r\n/**\r\n * @author Ryan Mraz\r\n * @author Kollin Labowski\r\n * @author Shannon Biega\r\n * @returns The Settings stack used to navigate to different settings screens.\r\n */\r\nconst SettingsStackScreen = () => {\r\n  return (\r\n    <SettingsStack.Navigator screenOptions={{\r\n      headerBackTitleVisible: false\r\n    }}>\r\n      <SettingsStack.Screen options={{ headerStyle: {backgroundColor: '#b5e48c'}, headerShown: false}} name=\"SettingsStack\" component={Settings} />\r\n      <SettingsStack.Screen name=\"Collaborator Pantry\" component={OtherPantryScreen} options={{ headerStyle: {backgroundColor: '#b5e48c'} }}/>\r\n      <SettingsStack.Screen name=\"My Information\" component={MyInfoScreen}options={{ headerStyle: {backgroundColor: '#b5e48c'} }} />\r\n      <SettingsStack.Screen name=\"Manage My Pantry\" component={AccountsScreen} options={{ headerStyle: {backgroundColor: '#b5e48c'} }}/>\r\n      <SettingsStack.Screen name=\"Notifications\" component={NotificationsScreen} options={{ headerStyle: {backgroundColor: '#b5e48c'} }}/>\r\n      <SettingsStack.Screen name=\"Help\" component={HelpScreen} options={{ headerStyle: {backgroundColor: '#b5e48c'} }}/>\r\n      <SettingsStack.Screen name=\"About\" component={AboutScreen} options={{ headerStyle: {backgroundColor: '#b5e48c'} }}/>\r\n      <SettingsStack.Screen name=\"Our Team\" component={CreditsScreen} options={{ headerStyle: {backgroundColor: '#b5e48c'} }}/>\r\n    </SettingsStack.Navigator>\r\n  );\r\n};\r\n\r\nconst Settings = ({navigation}) => {\r\n\r\n\r\n    // Contains the settings options, each has a title, subtitle, and what to do when pressed\r\n    const settingsOptions = [\r\n      \r\n      { title: \"My Information\", subTitle: \"View your profile information\", onPress: () => {\r\n          navigation.navigate(\"My Information\");\r\n      } },\r\n      { title: \"Manage My Pantry\",\r\n        subTitle: \"View pantry details\\nManage who can view your pantry\",\r\n         onPress: () => {\r\n          navigation.navigate(\"Manage My Pantry\");\r\n      } },\r\n      { title: \"Collaborator Pantry\",\r\n        subTitle: \"View your collaborator pantry\",\r\n         onPress: () => {\r\n          navigation.navigate(\"Collaborator Pantry\");\r\n      } },\r\n      {\r\n        title: \"Notifications\",\r\n        subTitle: \"View and manage your notifications\",\r\n        onPress: () => {\r\n          navigation.navigate(\"Notifications\");\r\n        },\r\n      },\r\n      { title: \"Help\", subTitle: \"General help about using your Smart Pantry app\", onPress: () => {\r\n        navigation.navigate(\"Help\");\r\n    } },\r\n      \r\n      { title: \"About\",\r\n        subTitle: \"Learn about your Smart Pantry app\", \r\n        onPress: () => {\r\n          navigation.navigate(\"About\");\r\n      } },\r\n      \r\n      { title: \"Meet The App Developers\",\r\n        subTitle: \"Learn about the developers of your Smart Pantry app\",\r\n        onPress: () => {\r\n        navigation.navigate(\"Our Team\");\r\n      } },\r\n     \r\n      {\r\n        title: \"Sign Out\",\r\n        subTitle: \"Sign out of your Smart Pantry app\",\r\n        onPress: () => {\r\n          Alert.alert(\"Sign Out\", \"Do you want to sign out?\", [\r\n            {\r\n              text: \"Yes\",\r\n              onPress: () => Auth.signOut(),\r\n            },\r\n            {\r\n              text: \"No\",\r\n              style: \"cancel\",\r\n            },\r\n          ]);\r\n        },\r\n      },\r\n     /* {\r\n        title: \"Delete Pantry\",\r\n        subTitle: \"Delete your pantry\",\r\n        onPress: () => {\r\n          Alert.alert(\"Delete Pantry\", \"Would you like to delete your pantry? Doing so will also delete your Shopping List\", [\r\n            {\r\n              text: \"Yes\",\r\n              onPress: () => {\r\n                  deleteUserPantry();\r\n              }\r\n            },\r\n            {\r\n              text: \"No\",\r\n              style: \"cancel\",\r\n            }\r\n          ])\r\n        }\r\n      }*/\r\n    ];\r\n    return (\r\n        <ScrollView style={{backgroundColor: '#b5e48c'}}>\r\n            {settingsOptions.map(({title,subTitle,onPress}) => \r\n            <TouchableOpacity key={title} onPress={onPress}>\r\n                <View style={{\r\n                    paddingHorizontal: 20,\r\n                    paddingBottom: 20,\r\n                    paddingTop: 20\r\n                }}>\r\n                    <Text style={{fontSize: 19, fontWeight: \"bold\"}}>{title}</Text>\r\n                    {subTitle && <Text style={{fontSize:15, color:'black', paddingTop:5}}>{subTitle}</Text>}\r\n                </View>\r\n                <View style={{height: 1.2, backgroundColor: 'grey'}}/>\r\n            </TouchableOpacity>)}\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\n/**\r\n * @author Kollin Labowski\r\n */\r\nconst deleteUserPantry = async () => {\r\n  try {\r\n    const user = await Auth.currentAuthenticatedUser();\r\n\r\n    const pantryData = await API.graphql(\r\n      graphqlOperation(getPantry, { id: user.username.toString() })\r\n    );\r\n\r\n      // if the getPantry query does not return a null value, sets pantry exists to true\r\n      // otherwise sets it to false because they don't have a pantry yet\r\n      if (pantryData.data.getPantry == null) {\r\n        Alert.alert(\"Delete Pantry\", \"You do not have a pantry\");\r\n      }\r\n      else {\r\n\r\n      // Grabs the id field from the pantry data\r\n      const pantryId = pantryData.data.getPantry.id;\r\n\r\n      // Grabs the items that are related to the id of the pantry\r\n      const itemsList = await API.graphql(\r\n        graphqlOperation(listItems, {\r\n          filter: {\r\n            pantryItemsId: {\r\n              eq: pantryId.toString(),\r\n            },\r\n          },\r\n        })\r\n      );\r\n\r\n      // stores the value of the items returned\r\n      const b = itemsList.data.listItems.items;\r\n      // alert(JSON.stringify(itemsList.data.listItems.items));\r\n      const deleteAllItems = b.map( async (item) => {\r\n        const deletionId = {\r\n          id: item.id,\r\n        };\r\n        const delPantryItem = await API.graphql(graphqlOperation(deleteItem, { input: deletionId }));\r\n      });\r\n\r\n      const shoppingListData = await API.graphql(\r\n        graphqlOperation(getShoppingList, { id: user.username.toString() })\r\n      );\r\n\r\n      const shoppingListId = shoppingListData.data.getShoppingList.id;\r\n\r\n      const shoppingItemsList = await API.graphql(\r\n        graphqlOperation(listItems, {\r\n          filter: {\r\n            shoppingListItemsId: {\r\n              eq: shoppingListId.toString(),\r\n            },\r\n          },\r\n        })\r\n      );\r\n\r\n      const c = shoppingItemsList.data.listItems.items;\r\n\r\n      const deleteAllShoppingItems = c.map( async (item) => {\r\n        const deletionId = {\r\n          id: item.id,\r\n        };\r\n        const delPantryItem = await API.graphql(graphqlOperation(deleteItem, { input: deletionId }));\r\n      });\r\n\r\n      const delId = {\r\n        id: user.username.toString()\r\n      }\r\n\r\n      const delPantry = await API.graphql(graphqlOperation(deletePantry, { input: delId }));\r\n\r\n      const delShopping = await API.graphql(graphqlOperation(deleteShoppingList, { input: delId }));\r\n\r\n      Alert.alert(\"Delete Pantry\", \"Your pantry and has been deleted\");\r\n    }\r\n\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport default SettingsStackScreen;",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/Settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "handleSignOut",
    "memberof": "SmartPantry/screens/Settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Settings.js~handleSignOut",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "SettingsStack",
    "memberof": "SmartPantry/screens/Settings.js",
    "static": true,
    "longname": "SmartPantry/screens/Settings.js~SettingsStack",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "Settings",
    "memberof": "SmartPantry/screens/Settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Settings.js~Settings",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "deleteUserPantry",
    "memberof": "SmartPantry/screens/Settings.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Settings.js~deleteUserPantry",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Settings.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "SettingsStackScreen",
    "memberof": "SmartPantry/screens/Settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Settings.js~SettingsStackScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Settings.js",
    "importStyle": "SettingsStackScreen",
    "description": "",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Ryan Mraz"
      },
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@author",
        "tagValue": "Shannon Biega"
      },
      {
        "tagName": "@returns",
        "tagValue": "The Settings stack used to navigate to different settings screens."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The Settings stack used to navigate to different settings screens."
    },
    "params": []
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "SmartPantry/screens/Shopping.js",
    "content": "import React, { useState, useEffect, Component } from \"react\";\r\nimport { Text, View, Switch, Alert, ScrollView, Modal, StyleSheet, SafeAreaView } from \"react-native\";\r\nimport { Icon, Button, Input } from \"react-native-elements\";\r\nimport AboutScreen from \"./About\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport CreatePantryScreen from \"./CreatePantry\";\r\nimport { getShoppingList, listItems, getItem } from \"../queries\";\r\nimport { createItem, deleteItem, updateItem, createShoppingList } from \"../mutations\";\r\nimport AddShoppingListItemScreen from \"./AddShoppingListItem\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport ManualAddScreen from \"./ManualAdd\";\r\nimport BarcodeAddScreen from \"./BarcodeAdd\";\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport { Heading, Box } from 'native-base'\r\nimport Card from '../components/Card'\r\n\r\nconst ShoppingStack = createStackNavigator();\r\n\r\n/**\r\n * @author Kollin Labowski\r\n * @returns The Shopping stack screen for navigating between the shopping list page and the add item page.\r\n */\r\nconst ShoppingStackScreen = () => {\r\n  return (\r\n    <ShoppingStack.Navigator >\r\n      <ShoppingStack.Screen\r\n        options={{ headerShown: false }}\r\n        name=\"Back\"\r\n        component={Shopping}\r\n      />\r\n      <ShoppingStack.Screen\r\n          options={{ headerShown: true, title: \"Add Item\",  headerStyle: {backgroundColor: '#b5e48c'} }}\r\n          name=\"AddShoppingListItem\"\r\n          component={AddShoppingListItemScreen}\r\n          \r\n        />\r\n\r\n\r\n\r\n    </ShoppingStack.Navigator>\r\n  );\r\n};\r\n\r\n/**\r\n * @author Kollin Labowski\r\n * @param navigation - Used for navigating the Shopping List stack. \r\n * @returns Displays the shopping list of the current user to the screen.\r\n */\r\nconst Shopping = ({navigation}) => {\r\n  const [shoppingListButton, setShoppingListButton] = useState(null);\r\n  const [items, setItems] = useState([]);\r\n  const [shoppingListExists, setShoppingListExists] = useState(true);\r\n  const [shoppingListName, setShoppingListName] = useState(\"\");\r\n  const [nameText, setNameText] = useState(\"\");\r\n  const [itemId, setItemId] = useState(null);\r\n\r\n   const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n   const handleModal = () => setIsModalVisible(() => !isModalVisible);\r\n\r\n  // Loads when you come back to this screen\r\n  // refreshes each time you go back to the screen\r\n  // Checks if a shopping list exists and fetches the user's items on every load\r\n  useEffect(() => {\r\n    const unsubscribe = navigation.addListener(\"focus\", () => {\r\n      checkIfShoppingListExists();\r\n      fetchItems();\r\n    });\r\n    return unsubscribe;\r\n  }, [navigation, items]);\r\n\r\n  // fetches just the items of the shopping list that belongs to the current authenticated user\r\n  const fetchItems = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // returns cognito user JSON\r\n\r\n      // Performs the getShoppingList query based on the id, which is the user's username\r\n      const shoppingListData = await API.graphql(\r\n        graphqlOperation(getShoppingList, { id: user.username.toString() })\r\n      );\r\n\r\n      // if the getShoppingList query does not return a null value, sets shopping list exists to true\r\n      // otherwise sets it to false because they don't have a shopping list yet\r\n      if (shoppingListData.data.getShoppingList != null) {\r\n        setShoppingListExists(true);\r\n        setShoppingListName(shoppingListData.data.getShoppingList.name);\r\n      } else {\r\n        setShoppingListExists(false);\r\n      }\r\n\r\n      // Grabs the id field from the shopping list data\r\n      const shoppingListId = shoppingListData.data.getShoppingList.id;\r\n\r\n      // Grabs the items that are related to the id of the shopping list\r\n      const itemsList = await API.graphql(\r\n        graphqlOperation(listItems, {\r\n          filter: {\r\n            shoppingListItemsId: {\r\n              eq: shoppingListId.toString(),\r\n            },\r\n          },\r\n        })\r\n      );\r\n\r\n      // stores the value of the items returned\r\n      const b = itemsList.data.listItems.items;\r\n\r\n      // changes the value of useState items value\r\n      setItems(b);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // Update item\r\n  const updateShoppingListItem = async () => {\r\n\r\n    const item = await API.graphql(graphqlOperation(getItem, {id: itemId}));\r\n    // if item is updated to have 0 or less quantity, the item will automatically be deleted\r\n    if (!(item.quantity == null) && parseInt(quantityText) <= 0) {\r\n      deleteShoppingListItem(itemId);\r\n      handleModal();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Perform\r\n      const update = {\r\n        id: itemId,\r\n        name: nameText ? nameText : item.name,\r\n      }\r\n\r\n      const u = await API.graphql(graphqlOperation(updateItem, {input: update}));\r\n      setNameText(\"\");\r\n      fetchItems();\r\n      handleModal();\r\n    } catch (err) {\r\n\r\n    }\r\n  }\r\n\r\n  // delete item\r\n  const deleteShoppingListItem = async (deleteId) => {\r\n    try {\r\n      const id = {\r\n        id: deleteId\r\n      }\r\n      const d = await API.graphql(graphqlOperation(deleteItem,{input: id} ));\r\n      fetchItems();\r\n    } catch (err) { \r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const modalScreen = (\r\n    <Modal visible={isModalVisible} animationType=\"slide\">\r\n      <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n        <Text style={{fontSize: 25, fontWeight: \"bold\", margin: 10}}>Edit your item</Text>\r\n        <Input\r\n          placeholder=\"Name (i.e. bananas)\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setNameText(value)}\r\n        />\r\n        <Button\r\n          buttonStyle={{ width: 200, margin: 20}}\r\n          title=\"Hello\"\r\n          onPress={() => {\r\n            updatePantryItem();\r\n          }}\r\n        ></Button>\r\n        <Button buttonStyle={{width: 200}} title=\"Go back\" onPress={handleModal}></Button>\r\n      </View>\r\n    </Modal>\r\n  );\r\n\r\n  // list of items from shopping list\r\n  const listOfItems = items.map((item) => {\r\n    return (\r\n      <View key={item.id}>\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            paddingHorizontal: 20,\r\n            paddingBottom: 20,\r\n            paddingTop: 20,\r\n          }}\r\n        >\r\n          <Text\r\n            style={{paddingLeft: 15, width: \"50%\", flexDirection: \"column\", fontSize: 18 }}\r\n          >\r\n            {item.name}\r\n          </Text>\r\n          <Button  buttonStyle={{ marginTop:10,\r\n                paddingTop:5,\r\n                paddingBottom:10,\r\n                backgroundColor:'#ff686b',\r\n                borderRadius:10,\r\n                borderWidth: 1,\r\n                borderColor: '#fff' }} title=\"Delete\" onPress={() => {\r\n             Alert.alert(\"Delete Item\", \"Are you sure you want to delete item?\", [\r\n               {\r\n                 text: \"Yes\",\r\n                 onPress: () => { \r\n                    deleteShoppingListItem(item.id); // Uses amplify Auth library and signOut() method\r\n                },\r\n               },\r\n               {\r\n                 text: \"No\",\r\n                 style: \"cancel\",\r\n               },\r\n             ]);\r\n          }}></Button>\r\n        </View>\r\n        <View style={{ height: 1.2, backgroundColor: \"grey\" }} />\r\n      </View>\r\n    );\r\n  });\r\n\r\n\r\n  // checks whether or not a user has a shopping list yet\r\n  const checkIfShoppingListExists = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // grabs current user's information\r\n\r\n      // Performs the getShoppingList query based on user's id\r\n      const shoppingListData = await API.graphql(\r\n        graphqlOperation(getShoppingList, { id: user.username.toString() })\r\n      );\r\n\r\n      // If it's null, we want to render the create shopping list button\r\n      // otherwise, we want to hide it\r\n      if (shoppingListData.data.getShoppingList == null) {\r\n        setShoppingListButton(true);\r\n      } else {\r\n        setShoppingListButton(null);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <ScrollView\r\n        contentContainerStyle={{\r\n          flexGrow: 1,\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          backgroundColor: '#b5e48c'\r\n        }}\r\n      >\r\n        {/* Conditional render based on the value of shoppingListButton and shoppingListExists */}\r\n        {/* {shoppingListButton && (\r\n          // <Button\r\n          //   buttonStyle={{ margin: 15 }}\r\n          //   title=\"Create Pantry\"\r\n          //   onPress={() => {\r\n          //     navigation.navigate(\"CreatePantry\");\r\n          //   }}\r\n          // ></Button>\r\n        )} */}\r\n      <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>My Shopping List</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      </View>\r\n\r\n        {!shoppingListExists && <Text style={[styles.body]}>You must make a pantry before you make a shopping list.</Text>}\r\n        {shoppingListExists && (\r\n          <View\r\n            style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}\r\n          >\r\n            \r\n            <Button\r\n              buttonStyle={{ marginTop:10,\r\n                paddingTop:15,\r\n                paddingBottom:15,\r\n                marginLeft:30,\r\n                marginRight:30,\r\n                backgroundColor:'#3D405B',\r\n                borderRadius:10,\r\n                borderWidth: 1,\r\n                borderColor: '#fff' }}\r\n              title=\"Add Item\"\r\n              onPress={() => {\r\n                navigation.navigate(\"AddShoppingListItem\");\r\n              }}\r\n            ></Button>\r\n            <View>{listOfItems}</View>\r\n            <View>{modalScreen}</View>\r\n          </View>\r\n        )}\r\n      </ScrollView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  paddedHeading : {\r\n    fontWeight: 'bold',\r\n    fontSize: 19,\r\n    textAlign: 'center',\r\n    margin: 10\r\n  },\r\n  body:{\r\n    fontSize: 18,\r\n    textAlign: 'center',\r\n    margin: 75,\r\n  }\r\n});\r\n\r\nexport default ShoppingStackScreen;\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/Shopping.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "name": "ShoppingStack",
    "memberof": "SmartPantry/screens/Shopping.js",
    "static": true,
    "longname": "SmartPantry/screens/Shopping.js~ShoppingStack",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Shopping.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "Shopping",
    "memberof": "SmartPantry/screens/Shopping.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Shopping.js~Shopping",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Shopping.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@returns",
        "tagValue": "Displays the shopping list of the current user to the screen."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": "Used for navigating the Shopping List stack."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Displays the shopping list of the current user to the screen."
    },
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/screens/Shopping.js",
    "static": true,
    "longname": "SmartPantry/screens/Shopping.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Shopping.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "ShoppingStackScreen",
    "memberof": "SmartPantry/screens/Shopping.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Shopping.js~ShoppingStackScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Shopping.js",
    "importStyle": "ShoppingStackScreen",
    "description": "",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Kollin Labowski"
      },
      {
        "tagName": "@returns",
        "tagValue": "The Shopping stack screen for navigating between the shopping list page and the add item page."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The Shopping stack screen for navigating between the shopping list page and the add item page."
    },
    "params": []
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "SmartPantry/screens/SmartPantry.js",
    "content": "\r\nimport { LogBox, Alert, Text, View, StyleSheet, ScrollView } from 'react-native';\r\nimport {NavigationContainer} from '@react-navigation/native';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport RNBluetoothClassic, {BluetoothDevice} from 'react-native-bluetooth-classic';\r\n\r\nimport HomeStackScreen from './Home';\r\nimport ShoppingStackScreen from './Shopping';\r\nimport SettingsStackScreen from'./Settings';\r\nimport CreatePantryScreen from \"./CreatePantry\";\r\n\r\nimport React, {useState} from 'react';\r\nimport {Icon, Button} from 'react-native-elements';\r\nimport Amplify from 'aws-amplify';\r\nimport awsconfig from '../src/aws-exports';\r\nimport { withAuthenticator, AmplifyTheme } from 'aws-amplify-react-native';\r\nimport { Auth } from \"aws-amplify\";\r\n\r\nimport Card from '../components/Card'\r\nimport { Heading, Box, Flex, useTheme } from 'native-base'\r\nimport { Searchbar } from 'react-native-paper'\r\n\r\n// Initializes Amplify\r\nAmplify.configure({\r\n  ...awsconfig,\r\n  Analytics: {\r\n    disabled: true,\r\n  },\r\n});\r\n\r\n// Ignore certain logs\r\nLogBox.ignoreLogs([\r\n  \"[react-native-gesture-handler] Seems like you're using an old API with gesture components, check out new Gestures system!\",\r\n]);\r\n\r\n// Creates a new Bottom Tab Navigator object\r\nconst Tab = createBottomTabNavigator();\r\n\r\n// Function that signs a user out of the app with an alert box\r\nconst signOutAlert = () => {\r\n  Alert.alert(\r\n    \"Sign Out\",\r\n    \"Do you want to sign out?\",\r\n    [\r\n      {\r\n        text: \"Yes\",\r\n        onPress: () => Auth.signOut() // Uses amplify Auth library and signOut() method\r\n      },\r\n      {\r\n        text: \"No\",\r\n        style: \"cancel\"\r\n      }\r\n    ]\r\n  )\r\n}\r\n\r\n\r\n// Main App function\r\n\r\n/**\r\n * @author Jonathan Malcomb\r\n * @author Shannon Biega\r\n * @returns Displays the home page of the app with expiring, running low, and all items displayed in separate sections.\r\n */\r\nconst SmartPantry = () => {\r\n\r\n  const {\r\n    colors\r\n  } = useTheme()\r\n\r\n  const [searchQuery, setSearchQuery] = React.useState('')\r\n\r\n  const onChangeSearch = query => setSearchQuery(query)\r\n  \r\n\r\n\r\n    return (\r\n      <ScrollView backgroundColor={\"#b5e48c\"}>   \r\n\r\n            <Heading style={styles.paddedHeading}>Expiring Soon</Heading>\r\n            <Box alignItems='center'>\r\n              <Card svg='clock' itemName='Cookie' itemMetric='50lb'/>\r\n            </Box>\r\n              <Heading style={styles.paddedHeading}>Running Low</Heading>\r\n            <Box alignItems='center'>\r\n                <Card svg='low' itemName='Cookie' itemMetric='50lb'/>\r\n            </Box>\r\n            <Flex flexDirection='row' py='5'>\r\n              <Heading flex='1' style={styles.paddedHeading}>Items</Heading>\r\n              <Box flex='3' alignItems='center' justifyContent='center' paddingRight='5'>\r\n                  <Searchbar\r\n                    style={styles.sBar}\r\n                    placeholder=\"Search\"\r\n                    onChangeText={onChangeSearch}\r\n                    value={searchQuery}\r\n                  />\r\n              </Box>\r\n              </Flex>\r\n              <Box alignItems='center'>\r\n              <Card svg='item' itemName='Cookie' itemMetric='50lb'/>\r\n              </Box>\r\n                \r\n      </ScrollView>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  paddedHeading: {\r\n    paddingTop: '5%',\r\n    paddingLeft: '5%',\r\n    paddingBottom: '5%',\r\n  },\r\n  sBar: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\nexport default withAuthenticator(SmartPantry); // exports the app with Amplify's withAuthenticator for cognito\r\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/SmartPantry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "Tab",
    "memberof": "SmartPantry/screens/SmartPantry.js",
    "static": true,
    "longname": "SmartPantry/screens/SmartPantry.js~Tab",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/SmartPantry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "signOutAlert",
    "memberof": "SmartPantry/screens/SmartPantry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/SmartPantry.js~signOutAlert",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/SmartPantry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "SmartPantry",
    "memberof": "SmartPantry/screens/SmartPantry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/SmartPantry.js~SmartPantry",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/SmartPantry.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Jonathan Malcomb"
      },
      {
        "tagName": "@author",
        "tagValue": "Shannon Biega"
      },
      {
        "tagName": "@returns",
        "tagValue": "Displays the home page of the app with expiring, running low, and all items displayed in separate sections."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Displays the home page of the app with expiring, running low, and all items displayed in separate sections."
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/screens/SmartPantry.js",
    "static": true,
    "longname": "SmartPantry/screens/SmartPantry.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/SmartPantry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "SmartPantry/screens/Theme.js",
    "content": "\r\nimport { extendTheme } from 'native-base'\r\n\r\nconst customTheme = extendTheme({\r\n    fontConfig: {\r\n      Lato: {\r\n        100: {\r\n          normal: 'Lato-Thin',\r\n          italic: 'Lato-ThinItalic',\r\n        },\r\n        200: {\r\n          normal: 'Lato-Light',\r\n          italic: 'Lato-LightItalic',\r\n        },\r\n        300: {\r\n          normal: 'Lato-Light',\r\n          italic: 'Lato-LightItalic',\r\n        },\r\n        400: {\r\n          normal: 'Lato-Black',\r\n          italic: 'Lato-BlackItalic',\r\n        },\r\n        500: {\r\n          normal: 'Lato-Bold',\r\n          italic: 'Lato-Italic'\r\n        },\r\n        600: {\r\n          normal: 'Lato-Bold',\r\n          italic: 'Lato-BoldItalic',\r\n        },\r\n      },\r\n    },\r\n  \r\n    // Make sure values below matches any of the keys in `fontConfig`\r\n    fonts: {\r\n      heading: 'Lato-Bold',\r\n      body: 'Lato-Black',\r\n      mono: 'Lato-Thin',\r\n    },\r\n\r\n    colors: {\r\n      green: {\r\n        500: '#81B29A'\r\n      },\r\n      cream: {\r\n        500: '#F4F1DE'\r\n      },\r\n      orange: {\r\n        500: '#E07A5F'\r\n      }\r\n    }\r\n});\r\n\r\nexport default customTheme",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/Theme.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "customTheme",
    "memberof": "SmartPantry/screens/Theme.js",
    "static": true,
    "longname": "SmartPantry/screens/Theme.js~customTheme",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Theme.js",
    "importStyle": "customTheme",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "SmartPantry/screens/Welcome.js",
    "content": "import React, { Component } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Image,\r\n  ImageBackground\r\n} from \"react-native\";\r\nimport Ionicons from 'react-native-vector-icons/Ionicons';\r\nimport Video from 'react-native-video';\r\n\r\n\r\n\r\n/**\r\n * @author Shannon Biega\r\n * @param navigate - Used for navigating from the drawer. \r\n * @returns Displays a welcome message to the user's screen.\r\n */\r\nconst WelcomeScreen = ({ navigation }) => {\r\n  return (\r\n    <ScrollView style={{backgroundColor: '#b5e48c'}}>\r\n      <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      <View><Text style={styles.paddedHeading}>Smart Pantry Application</Text></View>\r\n      <View style={{flex: 1, height: 1, backgroundColor: 'black'}} />\r\n      </View>\r\n      <Text style={{fontSize: 17, textAlign: 'center'}}>Version 1{'\\n'}</Text>\r\n      <Text style={{fontSize: 17, textAlign: 'center', marginHorizontal: 15}}>This Smart Pantry application will help you track the food items stored in your pantry.{'\\n'}Click on the three lines above to browse the app.{'\\n'}</Text>\r\n      <ImageBackground source={require('../assets/images/food.png')} style={{width: '100%', height: '150%', position: 'absolute', bottom: -525}}></ImageBackground>   \r\n      <ImageBackground source={require('../assets/images/wvu.png')} style={{width: '70%', height: '110%', position: 'absolute', bottom:-250, right: 20}}></ImageBackground>   \r\n\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  paddedHeading : {\r\n    fontWeight: 'bold',\r\n    fontSize: 19,\r\n    textAlign: 'center',\r\n    margin: 20\r\n  },\r\n});\r\n\r\nexport default WelcomeScreen;",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/screens/Welcome.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/screens/Welcome.js",
    "static": true,
    "longname": "SmartPantry/screens/Welcome.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Welcome.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "WelcomeScreen",
    "memberof": "SmartPantry/screens/Welcome.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Welcome.js~WelcomeScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Welcome.js",
    "importStyle": "WelcomeScreen",
    "description": "",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Shannon Biega"
      },
      {
        "tagName": "@returns",
        "tagValue": "Displays a welcome message to the user's screen."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigate",
        "description": "Used for navigating from the drawer."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Displays a welcome message to the user's screen."
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "SmartPantry/subscriptions.js",
    "content": "/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreatePantry = /* GraphQL */ `\n  subscription OnCreatePantry {\n    onCreatePantry {\n      id\n      name\n      owner\n      items {\n        nextToken\n      }\n      notiffreq\n      collabId\n      notifPending\n      notifTime\n      email\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdatePantry = /* GraphQL */ `\n  subscription OnUpdatePantry {\n    onUpdatePantry {\n      id\n      name\n      owner\n      items {\n        nextToken\n      }\n      notiffreq\n      collabId\n      notifPending\n      notifTime\n      email\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeletePantry = /* GraphQL */ `\n  subscription OnDeletePantry {\n    onDeletePantry {\n      id\n      name\n      owner\n      items {\n        nextToken\n      }\n      notiffreq\n      collabId\n      notifPending\n      notifTime\n      email\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onCreateItem = /* GraphQL */ `\n  subscription OnCreateItem {\n    onCreateItem {\n      id\n      name\n      pantry {\n        id\n        name\n        owner\n        notiffreq\n        collabId\n        notifPending\n        notifTime\n        email\n        createdAt\n        updatedAt\n      }\n      list {\n        id\n        createdAt\n        updatedAt\n      }\n      imagePath\n      weight\n      currWeight\n      quantity\n      origQuantity\n      expDate\n      weight_flag\n      createdAt\n      updatedAt\n      pantryItemsId\n      shoppingListItemsId\n    }\n  }\n`;\nexport const onUpdateItem = /* GraphQL */ `\n  subscription OnUpdateItem {\n    onUpdateItem {\n      id\n      name\n      pantry {\n        id\n        name\n        owner\n        notiffreq\n        collabId\n        notifPending\n        notifTime\n        email\n        createdAt\n        updatedAt\n      }\n      list {\n        id\n        createdAt\n        updatedAt\n      }\n      imagePath\n      weight\n      currWeight\n      quantity\n      origQuantity\n      expDate\n      weight_flag\n      createdAt\n      updatedAt\n      pantryItemsId\n      shoppingListItemsId\n    }\n  }\n`;\nexport const onDeleteItem = /* GraphQL */ `\n  subscription OnDeleteItem {\n    onDeleteItem {\n      id\n      name\n      pantry {\n        id\n        name\n        owner\n        notiffreq\n        collabId\n        notifPending\n        notifTime\n        email\n        createdAt\n        updatedAt\n      }\n      list {\n        id\n        createdAt\n        updatedAt\n      }\n      imagePath\n      weight\n      currWeight\n      quantity\n      origQuantity\n      expDate\n      weight_flag\n      createdAt\n      updatedAt\n      pantryItemsId\n      shoppingListItemsId\n    }\n  }\n`;\nexport const onCreateShoppingList = /* GraphQL */ `\n  subscription OnCreateShoppingList {\n    onCreateShoppingList {\n      id\n      items {\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateShoppingList = /* GraphQL */ `\n  subscription OnUpdateShoppingList {\n    onUpdateShoppingList {\n      id\n      items {\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteShoppingList = /* GraphQL */ `\n  subscription OnDeleteShoppingList {\n    onDeleteShoppingList {\n      id\n      items {\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onCreateWeightBuffer = /* GraphQL */ `\n  subscription OnCreateWeightBuffer {\n    onCreateWeightBuffer {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateWeightBuffer = /* GraphQL */ `\n  subscription OnUpdateWeightBuffer {\n    onUpdateWeightBuffer {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteWeightBuffer = /* GraphQL */ `\n  subscription OnDeleteWeightBuffer {\n    onDeleteWeightBuffer {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onCreateNewWeight = /* GraphQL */ `\n  subscription OnCreateNewWeight {\n    onCreateNewWeight {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateNewWeight = /* GraphQL */ `\n  subscription OnUpdateNewWeight {\n    onUpdateNewWeight {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteNewWeight = /* GraphQL */ `\n  subscription OnDeleteNewWeight {\n    onDeleteNewWeight {\n      id\n      upload_time\n      weight_data\n      createdAt\n      updatedAt\n    }\n  }\n`;\n",
    "static": true,
    "longname": "C:/Users/kk_la/Desktop/SmartPantry/SmartPantry/subscriptions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "onCreatePantry",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onCreatePantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onCreatePantry}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "onUpdatePantry",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onUpdatePantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onUpdatePantry}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "onDeletePantry",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onDeletePantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onDeletePantry}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "onCreateItem",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onCreateItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onCreateItem}",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "onUpdateItem",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onUpdateItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onUpdateItem}",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "onDeleteItem",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onDeleteItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onDeleteItem}",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "onCreateShoppingList",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onCreateShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onCreateShoppingList}",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "onUpdateShoppingList",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onUpdateShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onUpdateShoppingList}",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "onDeleteShoppingList",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onDeleteShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onDeleteShoppingList}",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "onCreateWeightBuffer",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onCreateWeightBuffer",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onCreateWeightBuffer}",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "onUpdateWeightBuffer",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onUpdateWeightBuffer",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onUpdateWeightBuffer}",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "variable",
    "name": "onDeleteWeightBuffer",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onDeleteWeightBuffer",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onDeleteWeightBuffer}",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "name": "onCreateNewWeight",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onCreateNewWeight",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onCreateNewWeight}",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "name": "onUpdateNewWeight",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onUpdateNewWeight",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onUpdateNewWeight}",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "variable",
    "name": "onDeleteNewWeight",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onDeleteNewWeight",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onDeleteNewWeight}",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# React Native Smart Pantry Application\r\n\r\n",
    "longname": "C:\\Users\\kk_la\\Desktop\\SmartPantry\\SmartPantry\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"smartpantry\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"node_modules/expo/AppEntry.js\",\r\n  \"scripts\": {\r\n    \"start\": \"expo start\",\r\n    \"android\": \"expo start --android\",\r\n    \"ios\": \"expo start --ios\",\r\n    \"web\": \"expo start --web\",\r\n    \"eject\": \"expo eject\"\r\n  },\r\n  \"rnpm\": {\r\n    \"assets\": [\r\n      \"./assets/fonts/Lato\"\r\n    ]\r\n  },\r\n  \"dependencies\": {\r\n    \"@aws-amplify/ui-react\": \"^2.2.0\",\r\n    \"@expo-google-fonts/lato\": \"^0.2.2\",\r\n    \"@native-base/icons\": \"^0.0.11\",\r\n    \"@react-native-async-storage/async-storage\": \"~1.15.0\",\r\n    \"@react-native-community/checkbox\": \"^0.5.9\",\r\n    \"@react-native-community/netinfo\": \"7.1.3\",\r\n    \"@react-native-picker/picker\": \"^2.2.1\",\r\n    \"@react-navigation/bottom-tabs\": \"^6.1.0\",\r\n    \"@react-navigation/drawer\": \"^6.4.1\",\r\n    \"@react-navigation/material-top-tabs\": \"^6.2.1\",\r\n    \"@react-navigation/native\": \"^6.0.7\",\r\n    \"@react-navigation/stack\": \"^6.1.0\",\r\n    \"amazon-cognito-identity-js\": \"^5.2.5\",\r\n    \"aws-amplify\": \"^4.3.13\",\r\n    \"aws-amplify-react-native\": \"^6.0.2\",\r\n    \"barcode-reader\": \"^1.6.1\",\r\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\r\n    \"expo\": \"~44.0.0\",\r\n    \"expo-app-loading\": \"~1.3.0\",\r\n    \"expo-barcode-scanner\": \"^11.2.1\",\r\n    \"expo-font\": \"~10.0.4\",\r\n    \"expo-image-picker\": \"^12.0.2\",\r\n    \"expo-notifications\": \"~0.14.0\",\r\n    \"expo-status-bar\": \"~1.2.0\",\r\n    \"hp\": \"^0.1.5\",\r\n    \"native-base\": \"^3.3.10\",\r\n    \"qrcode\": \"^1.5.0\",\r\n    \"qs\": \"^6.10.3\",\r\n    \"react\": \"17.0.1\",\r\n    \"react-dom\": \"^17.0.1\",\r\n    \"react-native\": \"0.64.3\",\r\n    \"react-native-bluetooth-classic\": \"^1.60.0-rc.20\",\r\n    \"react-native-camera\": \"^4.2.1\",\r\n    \"react-native-elements\": \"^3.4.2\",\r\n    \"react-native-floating-label-input\": \"^1.3.11\",\r\n    \"react-native-gesture-handler\": \"~2.1.0\",\r\n    \"react-native-global-font\": \"^1.0.3\",\r\n    \"react-native-image-picker\": \"^4.7.3\",\r\n    \"react-native-label\": \"0.0.1-alpha.1\",\r\n    \"react-native-modal\": \"^13.0.0\",\r\n    \"react-native-paper\": \"^4.12.0\",\r\n    \"react-native-push-notification\": \"^8.1.1\",\r\n    \"react-native-reanimated\": \"~2.3.1\",\r\n    \"react-native-safe-area-context\": \"3.3.2\",\r\n    \"react-native-screens\": \"~3.10.1\",\r\n    \"react-native-settings-screen\": \"^2.2.1\",\r\n    \"react-native-svg\": \"^12.1.1\",\r\n    \"react-native-svg-transformer\": \"^1.0.0\",\r\n    \"react-native-tab-view\": \"^3.1.1\",\r\n    \"react-native-unordered-list\": \"^1.0.4\",\r\n    \"react-native-vector-icons\": \"^9.1.0\",\r\n    \"react-native-video\": \"^5.2.0\",\r\n    \"react-native-web\": \"0.17.1\",\r\n    \"react-native-webview\": \"11.15.0\",\r\n    \"react-qr-code\": \"^2.0.3\",\r\n    \"uuidv4\": \"^6.2.13\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.12.9\",\r\n    \"@types/metro-config\": \"^0.66.0\",\r\n    \"detox\": \"^19.6.5\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"typescript\": \"~4.3.5\"\r\n  },\r\n  \"private\": true\r\n}\r\n",
    "longname": "C:\\Users\\kk_la\\Desktop\\SmartPantry\\SmartPantry\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# Smart Pantry User Manual and System Manual\r\nThank you using our Smart Pantry application. In this guide, you will find the User Manual and the System Manual for our application. The User Manual explains how to use the app, and is intended to act as a reference for users who would like to familiarize themselves with a feature of the application. The System Manual shows all the functions used throughout the application, and is intended to act as a reference for programmers who would like to understand how the app works under the hood.\r\n\r\nThe Smart Pantry app was created by the following students in the LANE department of Electrical Engineering and Computer Science at West Virginia University:\r\n- Shannon Biega\r\n- Kollin Labowski\r\n- Jonathan Malcomb\r\n- Ryan Mraz\r\n- Matthew Winston\r\n\r\nTo view the System Manual, select the \"Source\" tab at the top left of the screen.\r\n\r\n### Abstract\r\nElderly populations face numerous challenges concerning their health and well-being, causing them to experience memory loss which creates simple tasks, like tracking food items, much more difficult. Elders who struggle to track their food items are probable to over purchasing food and increasing food waste. Our group proposes a Smart Pantry application which will track a user’s food items (name, quantity, weight) in a virtual pantry and notify the user when food item quantities are low, or dates are near expiring. The project vision statement is seen in the following section and the project goals are the following: (1) track food item quantities and weights for users; (2) aid elders in remembering their food items and living more independently; (3) reduce food waste and malnutrition among elders. \r\n\r\n\r\n### Vision Statement\r\nA CSEE 481 effort to assist elders in tracking their food pantry items and living more independently while decreasing food waste and malnutrition among elders.  \r\n\r\n### Current Status of the Project\r\n| Requirement Number | Requirement Description | Completion Status | Is it demonstratable? | Comment                                                                                                    |\r\n|--------------------|-------------------------|-------------------|-----------------------|------------------------------------------------------------------------------------------------------------|\r\n| 1                  | Create Account          | Yes               | Yes                   | A user can successfully create an account with their chosen credentials and can access account information |\r\n| 2                  | Login                   | Yes               | Yes                   | A user can login to the Smart Pantry application                                                           |\r\n| 3                  | Create Pantry           | Yes               | Yes                   | A user can to create a pantry                                                                              |\r\n| 4                  | View Pantry             | Yes               | Yes                   | A user can view the contents of the pantry                                                                 |\r\n| 5                  | Barcode Add Item        | Yes               | Yes                   | A user can add a food item to their pantry via scanning the barcode of the item                            |\r\n| 6                  | Manual Add Item         | Yes               | Yes                   | A user can add a food item to their pantry by manually inputting the information                           |\r\n| 7                  | Update Item             | Yes               | Yes                   | A user can modify the name/quantity/weight of a food item                                                  |\r\n| 8                  | Remove Item             | Yes               | Yes                   | A user can remove an item from the pantry                                                                  |\r\n| 9                  | Notifications           | Yes               | Yes                   | A user has a notification displayed when a food item's quantity/weight is low or if it is expiring soon    |\r\n\r\n\r\n### Reflections and Intructions for Future Developers\r\nOne unexpected obstacle for connecting the scale to the Smart Pantry Application was the lack of a Bluetooth API in Expo. When adding or updating an item in the database, the user has the option to weigh/reweigh the item, which we expected to work by having the scale connect to an Arduino, then to an ESP32, and then to the app. However, because Expo (the platform we used to make our app to be cross-platform) doesn’t have a Bluetooth API, this was a lot more complicated than expected.  \r\n\r\nBecause of this, we decided to communicate with the database directly through Wi-Fi and autofill the “weight” field in the app from the added weight in the database. If Expo includes a Bluetooth API in the future, it would be a good idea to have the scale autofill the “weight” field from the ESP32 (or similar Bluetooth communicator), wait for user confirmation, and then add/update the weight. \r\n\r\nIf migrated from Wi-Fi to Bluetooth, significant change to the development environment would have to be made, which may conflict with other features (Notifications, etc.). \r\n\r\n### Directory of the Project Archive\r\n\r\nGroup 3’s Smart Pantry Application is housed on GitHub at the following link:\r\n- https://github.com/Voomkin/SmartPantry/tree/master ",
    "longname": "C:\\Users\\kk_la\\Desktop\\SmartPantry\\SmartPantry\\manual\\index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "C:\\Users\\kk_la\\Desktop\\SmartPantry\\SmartPantry\\manual\\asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\kk_la\\Desktop\\SmartPantry\\SmartPantry\\manual\\user_interface.md",
    "name": "./manual/user_interface.md",
    "content": "# User Interface\r\n### Sign In Page\r\nThis is the page the user will be sent to when they first open the app. If they have previously created an account, they may enter their username and password in the appropriate input fields, and click the **SIGN IN** button to log in to their account. If a user has created an account but cannot remember their password, they may click the **Forgot Password** button to be navigated to a new screen to reset their password. If the user has not yet created an account, they may select the **Sign Up** button to be navigated to another new screen which will allow them to create a new account.\r\n\r\n<img src=\"./images/signin.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Create Account Page\r\nThis is the page the user is sent to if they select the **Sign Up** option from the **Sign In Page**. They will be able to enter a new username, password, email address, and phone number in the appropriate fields. When all 4 fields have been filled in by the user, they may select the **SIGN UP** button to navigate to a screen which will allow them to confirm their email address. The user may alternatively select the **Confirm a Code** option to be directed automatically to the same screen as the **SIGN UP** button, however it will not send a code upon being clicked. The user may also return to the **Sign In Page** by selecting the **Sign In** button in the bottom right corner.\r\n\r\n<img src=\"../manual/images/createaccount.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Confirm Email Page\r\nThis is the page where a user may confirm their email address by entering a special code which was sent to their email. To confirm the code, they must enter their username and their received confirmation code in the appropriate input fields. The user may then select **Confirm** to confirm their information and be redirecting to the **Sign In Page**. The user may also choose to have the code resent by clicking **Resend Code**, or to navigate back to sign in without creating a new account by selecting **Back to Sign In**.\r\n\r\n<img src=\"../manual/images/confirm.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Landing Page\r\nThis is what the user will see when they first sign in to their account. To navigate to different parts of the app, the user may select the menu in the top left corner of the page. This will bring up a drawer with options for navigation.\r\n\r\n<img src=\"../manual/images/landing.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Navigation Drawer\r\nThe drawer includes links to some of the different pages on the app. The user may choose to navigate to the landing page at any time by selecting the **Welcome** option. The user may also choose to view their pantry by selecting the **My Pantry** option. The user can view their shopping list by selecting the **Shopping List** option. The user will be navigated to their profile screen using the **My Profile** option. The help screen can be visited by clicking the **Help** option. The settings menu can be accessed by selecting the **Settings** menu. Finally, the user may choose to sign out of their account by selecting the **Sign Out** option.\r\n\r\n<img src=\"../manual/images/drawer.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Create Pantry Page\r\nThis screen is shown to the user before they have created a pantry. It is a button labeled **Create Pantry** which the user may click to be navigated to the **Name Pantry Page**.\r\n\r\n<img src=\"../manual/images/createpantry.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Name Pantry Page\r\nThis page allows the user to enter a name for their pantry in an input field, and then select the **Submit** button to navigate to the **View Pantry Page**.\r\n\r\n<img src=\"../manual/images/addpantry.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### View Pantry Page\r\nThe first time the user navigates to this page, it will look like the below image. The user will see the name of their pantry displayed, and they will have the option to add an item to their pantry by selecting **Add Item**. This will navigate the user to the **Add Item Page**.\r\n\r\n<img src=\"../manual/images/viewpantry.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nAfter adding items to the pantry, each item will be displayed on this page with their name, as well as their weight, quantity, and/or expiration date if the user filled in any of those optional fields. The user will also have the option to update an item with the **update** button, or delete it from their pantry using the **delete** option.\r\n\r\n<img src=\"../manual/images/pantryitem.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Add Item Page\r\nOn this page, the user will have the option to add an item to their pantry by specifying a name and optionally a weight, quantity, and/or expiration date in their respective fields. The user may also choose to navigate to the **Barcode Add Page** by selecting the **Barcode Add** button, or they may choose to add their input information to their pantry using the **Submit** button.\r\n\r\n<img src=\"../manual/images/additem.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Barcode Add Page\r\nOn this page, the user's camera is opened up, and the user may scan the barcode of a food item they have. The information from the barcode scan will be used to create a new item in the user's pantry.\r\n\r\n<img src=\"../manual/images/barcodeadd.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Update Item Page\r\nThis is a page the user may use to change some of the fields of an item in their pantry. Specifically, the user may change the name, weight, or quantity of an item they have selected. They may commit these changes by using the **Submit** button, or they may rollback the changes using the **Go back** button.\r\n\r\n<img src=\"../manual/images/updateitem.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Delete Item Page\r\nWhen the user attempts to delete an item, a pop-up will appear confirming whether the user would actually like to delete the item or not. If the user selects **YES**, the user will then be asked whether they would like to add the item to their shopping list (not pictured).\r\n\r\n<img src=\"../manual/images/deleteitem.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Shopping List Page\r\nThis page will display the name of all items in the user's shopping list, and will give the user the option to delete the items by selecting the **Delete Item** button. If the user selects this button, they will receive a pop-up identical to the **Delete Item Page**. The user may also select the **Add Item** button to add new items to their shopping list on the **Shopping List Add Page**. Note that this page will only display if the user has created a pantry.\r\n\r\n<img src=\"../manual/images/shopping.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Shopping List Add Page\r\nOn this page the user will be able to add a new item to their shopping list by typing in a name for their item in the appropriate input field shown below. The user may then add that item to their list using the **Submit** button. The user may also return to the **Shopping List Page** using the arrow in the top left corner.\r\n\r\n<img src=\"../manual/images/shoppingitem.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Profile Page\r\nOn this page, the user can view their profile, which displays their email address and their phone number as they input when they created their account.\r\n\r\n<img src=\"../manual/images/profile.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Help Page\r\nThis page will allow the user to learn about how to use their Smart Pantry app.\r\n\r\n<img src=\"../manual/images/help.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Settings Page\r\nThis page will allow the user to navigate to the various settings pages for the application. The user may visit the **Profile Page** by clicking the **My Information** button. The user may navigate to the **Manage Pantry Page** by selecting **Manage My Pantry**. The user can visit the **Collaborator Pantry Page** by selecting **Collaborator Pantry**. The user can visit the **Notifications Page** if they select **Notifications**. The user may select **Help** to visit the **Help Page**. The user can visit the **About Page** by selecting **About**. The user can visit the **Credits Page** by selecting **Meet The App Developers**. Finally, the user may access the **Sign Out Page** by selecting **Sign Out**.\r\n\r\n<img src=\"../manual/images/settings.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Manage Pantry Page\r\nThis page will allow the user to view information about their pantry and change some of its settings.\r\n\r\n<img src=\"../manual/images/managepantry.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nIn this page, the user may add a collaborator to their pantry by adding the user's email address appropriate input field. The user may also choose to delete their pantry by selecting the **Delete Pantry** button.\r\n\r\n<img src=\"../manual/images/managepantry2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Collaborator Pantry Page\r\nHere the user can view a pantry which they have been added to as a collaborator. They cannot make any modifications to the pantry, however they may choose to add an item to their shopping list using the **ADD TO SHOPPING LIST** button.\r\n\r\n<img src=\"../manual/images/collaborator.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Notifications Page\r\nThis page will allow the user to change the frequency of notifications they will recieve. The user may select any of the buttons which shows their preferred frequency and it will update it for their pantry. The user may also test their notifications by selecting **CLICK HERE TO TEST NOTIFICATIONS**.\r\n\r\n<img src=\"../manual/images/notifications.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### About Page\r\nThis page displays information about the Smart Pantry app to the user.\r\n\r\n<img src=\"../manual/images/about.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Credits Page\r\nThis page displays information about the creators of the application.\r\n\r\n<img src=\"../manual/images/credits.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Sign Out Page\r\nThis page features a pop-up to confirm whether the user would like to sign out of their account. If they select **YES**, they will be navigated to the **Sign In Page**.\r\n\r\n<img src=\"../manual/images/signout.jpg\" height=\"500px\" width=\"250px\"></img>",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\kk_la\\Desktop\\SmartPantry\\SmartPantry\\manual\\setup_manual.md",
    "name": "./manual/setup_manual.md",
    "content": "# Setup Manual\r\n### User's Guide\r\nTo use our application, you need to navigate to your App Store and download “Smart Pantry – Group 3”. You can find our application on both the Google Play Store and Apple’s App Store. After you have downloaded the application, please unbox your Smart Pantry Weight Sensor and place it in a location you wish while also being in a good range for your Wi-Fi router. Please connect it to Wi-Fi for it to work.   \r\n \r\nAfter setting up your Smart Pantry Weight Sensor and connecting it to Wi-Fi, please open the downloaded Smart Pantry Application. You should be greeted with this screen... \r\n\r\n<img src=\"./images/signin.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nYou must first create an account, please create an account with a secure password that is at least 16 characters long! After you are done with your account creation, you will be sent an email to the email address that is attached to your account... you must use that verification code to complete the creation process. Once you have done that you can then login with your new account! After you login in you should be greeted with this screen... \r\n\r\n<img src=\"./images/welcome.png\" height=\"500px\" width=\"500px\"></img>\r\n\r\nYou should now be all set up! Just tap the 3-line menu (hamburger menu) in the top left and navigate to ‘My Pantry’ in the menu that comes out.  \r\n\r\n### Programmer's Guide\r\nTo begin, you must navigate to https://github.com/Voomkin/SmartPantry/releases and download the most recent release. You can alternatively git clone https://github.com/Voomkin/SmartPantry in order to obtain the most updated codebase but be warned there might be unsquashed bugs.  \r\n \r\nAfter performing either of the above, navigate to the directory where the project is located and run the following commands to gather the necessary dependencies. \r\n\r\n*npm install* \r\n\r\n*amplify init* \r\n\r\nYou must provide your AWS credentials during the Amplify Initialization process. If you do not already have Android Studio (or XCode if you are on MacOS), you should install your respective emulation software and follow these instructions to set up your emulator.  \r\n\r\n*Android*: https://developer.android.com/studio/run/emulator \r\n\r\n*iOS*: https://docs.experitest.com/display/TC/AS+-+Connecting+An+iOS+Emulator  \r\n \r\n \r\nIf you wish to develop within the weight module, you must unbox your Smart Pantry Weight Sensor and download the Arduino IDE (https://www.arduino.cc/en/software) to begin development ",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\kk_la\\Desktop\\SmartPantry\\SmartPantry\\manual\\user_manual.md",
    "name": "./manual/user_manual.md",
    "content": "# User Manual\r\n### Create Account\r\nCreating an account is the first step you will want to take upon downloading your Smart Pantry app. Creating an account will allow you to access all of the Smart Pantry's features, including creating and accessing your pantry. Once you have downloaded the app, you should see a screen that looks like the below screenshot:\r\n\r\n<img src=\"./images/createaccount1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nNotice the **Sign Up** button in the lower right of the screen (pictured above). Click this button to navigate to a new page that looks like the image below. On this screen, enter a username, password, email address, and a phone number. There are a few things to note here. First, the chosen username must be in the form of an email address (see example in the picture). It is recommended that you use the same email for your username and email address. For you password, we recommend using at least 12 characters, and a mixture of upper/lower case letters, numbers, and symbols (although this is not enforced). Ensure that the phone number you enter is a valid phone number (must be 10 characters long). When you are satisfied with the information you have entered, click the confirm button (pictured below).\r\n\r\n<img src=\"./images/createpantry2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nNow that you have entered your new login information, you should receive a confirmation code at the email address you have specified. If you do not receive a confirmation code within about a minute, you can send another one by clicking **Resend code** in the bottom left of the screen. An example code is shown in the image below. You should enter your username again and enter your confirmation code, and click the **Confirm** button when you are done.\r\n\r\n<img src=\"./images/createpantry3.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nIf you have followed all of the steps, your new account will be created and you will be redirected to the **Sign in** page.\r\n\r\n### Login\r\nOnce you have created an account, you are ready to log in and start to explore your Smart Pantry. If you have not logged in yet, you should be greeted by a sign in page once you log in that looks like the image below. Simply enter the username and password you used when you created your account, and click the **SIGN IN** button.\r\n\r\n<img src=\"./images/login1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nIf your login was successful, you should be directed to a page that looks like this:\r\n\r\n<img src=\"./images/landing.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nIf you login was unsuccessful, consider resetting your password by selecting the **Forgot Password** button in the lower left of the first image in this section. You will be directed to a page that looks like the image below, and you will be prompted to enter your email. Check your email afterwards for a message about resetting your password.\r\n\r\n<img src=\"./images/login2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Sign Out\r\nIf at any point while using the app you wish to sign out, you can first click the icon in the top left of the screen to bring up a drawer:\r\n\r\n<img src=\"./images/signout1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nOnce you have brought up the drawer, you can select the **Sign Out** option at the bottom:\r\n\r\n<img src=\"./images/signout2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nA pop-up menu should appear asking for your confirmation. Selecting yes will sign you out of your account, returning you to the **Sign In** screen.\r\n\r\n<img src=\"./images/signout3.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Navigating the App\r\nNavigating the app is done by using a drawer which is brought up by using an icon in the top left of the screen:\r\n\r\n<img src=\"./images/signout1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nSelecting this icon will bring up several options as shown in the next image. More info on each of these options will be explored later in this manual.\r\n\r\n<img src=\"./images/drawer.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Create Pantry\r\nWhen you first create an account, the first thing you will probably want to do is make a pantry. Making a pantry allows you to add items and keep track of them, but it also gives you access to other features, such as the **Shopping List** and **Notifications**. In order to create a pantry, first open up the drawer in the top left corner (see **Navigating the App**). Select the option which reads **My Pantry**:\r\n\r\n<img src=\"./images/create1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nThis will bring you to a page that looks like the following image (if you haven't already created a pantry). Select the **Create Pantry** button to create your pantry.\r\n\r\n<img src=\"./images/create2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nNext, choose a name for your pantry an type it into the input field that appears. When you have selected a name you are satisfied with, click **Submit**.\r\n\r\n<img src=\"./images/create3.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nIf you see a page that looks like the following image, you have successfully created your pantry!\r\n\r\n<img src=\"./images/viewpantry.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Manual Add Item\r\nTo get the most use out of your pantry, you will want to be able to add items to it. There are 2 different ways to do this with your Smart Pantry app, the first of which is the **Manual Item Add**. To do this, make sure you are on the **My Pantry** tab, and click the **Add Item** button (it should appear below the name of your pantry).\r\n\r\n<img src=\"./images/viewpantry.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nNext, you will be redirected to the **Add Item** screen. Here, you can enter various information about the food item you are adding. You are required to enter a name for your item, but you may also optionally choose to add a weight (in pounds), a quantity, and/or an expiration date for you item. The 3 optional fields are used by the app to determine when you should receive notifications. When you are satisfied with the information you have entered for your item, click **Submit**.\r\n\r\n<img src=\"./images/additem1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nYou should be redirected to back to your **My Pantry** screen. Notice that the item you have added is now displayed under the name of your pantry, along with any additional information you have input for it.\r\n\r\n<img src=\"./images/additem2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Barcode Add Item\r\nAn alternative method of adding an item to your database is known as the **Barcode Add** function. You can do this by navigating to your **My Pantry** screen and selecting the **Add Item** button, just as with the **Manual Add** method.\r\n\r\n<img src=\"./images/additem2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nThis time, instead of filling in any of the above fields, click **Barcode Add**.\r\n\r\n<img src=\"./images/additem.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nThis will open up your camera as shown below. Find the barcode on the food item you wish to add to your pantry, and scan it by pointing your camera at it so that the barcode is upright.\r\n\r\n<img src=\"./images/barcode1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nThe barcode should scan automatically once it has been detected by the camera. In the event that the barcode is not recognized, you will be prompted to manually add (see previous section), however, if the scan was successful, you will be navigated to a new screen with the name of your item automatically populated:\r\n\r\n<img src=\"./images/barcode2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nYou may optionally enter either a weight or a quantity. When you are satisfied with the options you have selected, click the **Submit** button to be sent back to the **Add Item** screen. From here simply click the back arrow in the top left corner to return to your **My Pantry** page and see your newly populated item.\r\n\r\n<img src=\"./images/barcode3.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Update Item\r\nWhen viewing the items in your database, you may notice the **update** button next to the information for each item. To update an item, simply click the **update** button which is located next to the specific item you would like to update. For this example, we will update the \"Apples\" item.\r\n\r\n<img src=\"./images/barcode3.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nClicking the **update** button for an item will bring up a screen where you can input new fields for your item. You may update the name, weight, or quantity of your item (fields left blank will stay the same). Notably, you cannot update the expiration date of your item, so if you make a mistake typing in your item's expiration date, you will have to delete the item and add it again (see the next section on deleting items). Here we change the \"Apples\" item to \"Bananas\" with a new quantity of 4.\r\n\r\n<img src=\"./images/update1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nWhen you are satisfied with the changes you have made, click **Submit**. This will return you to the **My Pantry** screen. Note that the item has been updated with the fields you have entered.\r\n\r\n<img src=\"./images/update2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Using the Scale\r\nImplementation of this feature is nearing completion. This section will be updated when this feature is finished.\r\n\r\n### Delete Item\r\nNext to the **update** button for each item in the pantry is a **delete** button. To delete an item from your pantry, click the **delete** button which is next to the item you would like to delete. In this example, we want to delete the \"Bananas\" item from our pantry.\r\n\r\n<img src=\"./images/update2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nWhen you click the **delete** button to an item, you will see the following pop-up message:\r\n\r\n<img src=\"./images/del1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nAnswering **YES** to the question will remove the item from your pantry, but it will also pull up another pop-up as follows:\r\n\r\n<img src=\"./images/del2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nAnswering **YES** to this question will add the deleted item to your shopping list, which is a feature of your Smart Pantry app which is discussed later in this manual.\r\n\r\n### Delete Pantry\r\nWhile working with your Smart Pantry app, you may decide that you would like to delete your entire pantry. **NOTE**: Before you do this, be aware that deleting your pantry will delete all items in your pantry, AND all items in your Shopping List. It is also important to note that you will not receive any notifications if you do not have a pantry. If you are okay with this consequences, open the drawer menu from the icon in the top left corner of the screen:\r\n\r\n<img src=\"./images/signout1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nClick on the **Settings** button that appears in this drawer:\r\n\r\n<img src=\"./images/drawer.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nNext, click on the **Manage My Pantry** option in the Settings menu.\r\n\r\n<img src=\"./images/settings.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nNow scroll to the bottom of this new page. It should look like the following picture:\r\n\r\n<img src=\"./images/managepantry2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nClick the button labeled **Delete Pantry**, and you should receive a pop-up that looks the the picture below. Select **YES** to delete your pantry. You should receive a confirmation message saying that your pantry was deleted.\r\n\r\n<img src=\"./images/delpantry.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Notifications\r\nNotifications are one of the main features of your Smart Pantry, and they are designed to happen seamlessly. First of all, you must have a pantry before you can start to receive notifications (see the section about creating a pantry). Secondly, you will only get notifications in the event that at least one of your items is expiring soon (~ within 15 days) and/or one of your items is running low (the weight or the quantity of the item falls below 30% of its original weight/quantity at creation). A notification will output a summary of the amount of items expiring soon and the amount of items running low. Click on a notification to open up the Smart Pantry app, then check your **My Pantry** page for more information. An example of a notification received in a pantry with 1 item running low can be seen in this picture:\r\n\r\n<img src=\"./images/notif1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nYou can also change the frequency at which you receive notifications. The frequency is the minimum time between notifications being sent, so having a notification frequency of 1 day means that you will get a notification roughly once a day, depending on how often you open the Smart Pantry app. When you create a pantry, the default notification frequency is 1 day, however you can change this. To change your frequency, open the drawer for the app by clicking the logo in the top left of the app.\r\n\r\n<img src=\"./images/signout1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nClick on the **Settings** option from this pop-out drawer menu. This will direct you to the **Settings** page:\r\n\r\n<img src=\"./images/settings.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nFrom this page, select the **Notifications** option. This will take you to a screen that looks like this:\r\n\r\n<img src=\"./images/notifications.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nFrom here, click the button with the notification frequency you would like to switch to. Selecting an option will cause a pop-up to appear, confirming your decision. Additionally, if you would like to test push notifications, there is a button to do that on this page as well. Clicking that button will cause a notification to appear in a few moments as long as you have enabled notifications permissions for the application.\r\n\r\n### Shopping List\r\nThe **Shopping List** is a feature intended to be used for keeping track of items the user would like to purchase the next time they visit the store. In practice, it acts as a simpler form of the pantry. To get to the shopping list, open the drawer menu by clicking the logo in the top left corner:\r\n\r\n<img src=\"./images/signout1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nSelect the **Shopping List** option from this menu. You should arrive at a screen that looks like the following:\r\n\r\n<img src=\"./images/shopping.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nFrom here, you can add an item to your shopping list by selecting the **Add Item** button. This will take you to a page that looks like the below image.\r\n\r\n<img src=\"./images/shoppingitem.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nHere you can fill in the name of the item you would like to add to your shopping list. Click **Submit** after entering the name to add it to your list. You can continue to add as many items to your list as you would like. To return from this menu, click the back arrow in the top left. This will take you back to your **Shopping List**. Notice the **delete** option next to each item on your shopping list. Just as with the pantry (see the section of deleting items from a pantry), you can delete an item from your shopping list by selecting the **delete** button which is next to the item in the display. A pop-up will appear asking you to confirm whether you would like to delete you item. Select **YES** to delete the item from your list.\r\n\r\n<img src=\"./images/shopping.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Add Collaborators\r\nA unique feature of the Smart Pantry app is the ability to allow other users to view your pantry. In order to add a collaborator to your account, first open the drawer using the logo in the top left corner:\r\n\r\n<img src=\"./images/signout1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nNext, click on the **Settings** option from this menu.\r\n\r\n<img src=\"./images/drawer.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nIn the **Settings** menu, select **Manage My Pantry** from the list of options. \r\n\r\n<img src=\"./images/settings.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nOnce you have reached the **Manage Pantry** screen, scroll to the bottom of the screen. You should see something similar to the following image:\r\n\r\n<img src=\"./images/managepantry2.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nTo add a collaborator to your pantry, type in the email address of the user you would like to add to your pantry in the space where it reads \"Enter Collaborator Email\". Note that this email does not necessarily need to belong to a currently existing account, however the user with the email you enter will need to create an account before they can see your pantry. Select **Add Collaborator to Pantry** to add the collaborator to your pantry. You will see a pop-up asking you to confirm your decision. Select **YES** to add the collaborator. You will also be asked whether you would like to email the user to notify them that you added them as a collaborator. If you respond with **YES**, your primary email app will open, and an email will be automatically generated, which you may choose to change, or just push send to send the email straight to whoever you wish to add as a collaborator.\r\n\r\n### View Collaborator Pantries\r\nIf you have been added as a collaborator on another user's pantry, you can view their pantry by first opening the drawer by clicking on the logo in the top left corner of the screen:\r\n\r\n<img src=\"./images/signout1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nNext, select the **Settings** option from the list in the drawer menu.\r\n\r\n<img src=\"./images/drawer.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nThen, select the **Collaborator Pantry** option from the **Settings** menu.\r\n\r\n<img src=\"./images/settings.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nIf you have not been added as a collaborator on another pantry, you will see a message notifying you of this. Otherwise, you will be able to see the contents of the user's pantry, as well as buttons which allow you to add items in the other user's pantry directly to your shopping list (see the section about shopping lists). Note that you cannot actually make any changes to the other user's pantry, only view their items and add items to your shopping list. (Selecting the **Add to Shopping List** button next to an item will cause a pop-up to confirm that you actually want to do that. Select **YES** to add the item to your list).\r\n\r\n<img src=\"./images/collaborator.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\n### Settings\r\nThe **Settings** section is where several different configuration options and other app information can be found. To get to this section, first open the drawer menu from the logo at the top left of the screen:\r\n\r\n<img src=\"./images/signout1.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nNext, click the **Settings** option that appears on the drawer:\r\n\r\n<img src=\"./images/drawer.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nYou will then see the **Settings** screen. From here you can access several different pages of the app which perform different features.\r\n\r\n<img src=\"./images/settings.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nThe first of these features is the **My Information** page, which can alternatively be navigated to by selecting the **My Profile** option in the pop-up drawer. This page displays information about the user, including the email and phone number they used to create their account.\r\n\r\n<img src=\"./images/profile.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nThe next page in the **Settings** section is the **Manage My Pantry** section. This page displays information about the user's pantry, and is also where the user can add a collaborator to their pantry (see the section on adding collaborators), or delete their pantry (see the section on deleting a pantry). \r\n\r\n<img src=\"./images/managepantry.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nThe next page is the **Collaborator Pantry** section. See the section on viewing collaborator pantries for more information.\r\n\r\n<img src=\"./images/collaborator.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nThe next page is the **Help** page. This page is used to explain how to perform various app functions in a step-by-step format.\r\n\r\n<img src=\"./images/help.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nThe next page is the **About** page. This page displays information about the app, including its purpose and goals.\r\n\r\n<img src=\"./images/about.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nThe next page is the **Meet the App Developers** page. This page shows the credits of the app, with information about each of its 5 developers.\r\n\r\n<img src=\"./images/credits.jpg\" height=\"500px\" width=\"250px\"></img>\r\n\r\nFinally, there is a **Sign Out** option. See the section on signing out for more information.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\kk_la\\Desktop\\SmartPantry\\SmartPantry\\manual\\architecture.md",
    "name": "./manual/architecture.md",
    "content": "# Architecture Diagrams\r\n### Development Environment\r\nThe architecture used is based off of AWS Amplify. React Native is the JavaScript library used to develop for both Android and iOS devices, AWS S3 provides a storage solution, AWS Cognito provides authentication for the app, and AWS AppSync creates a GraphQL endpoint to interact with AWS DynamoDB as the backend database.\r\n\r\n<img src=\"../manual/images/arch_diagram.png\" height=\"300px\" width=\"600px\"></img>\r\n\r\n### Database Design\r\nWith the use of DynamoDB we created three tables to hold our data, with relationships shown between each table. One-to-One relationship between an Item and a Pantry and a one-to-one relationship between a ShoppingList and a Pantry. We used GraphQL in order to manipulate or extract data from our database. With the above relations, we were able to easily relate any individual entry in the database itself. Our intent with the design was to allow us to clearly relate Items to Pantrys, and ShoppingLists to Pantrys and thus Items. It made sense to have everything related to a Pantry as that acted as the central repository for all Items that were added by a User.  \r\n\r\n<img src=\"../manual/images/database.png\" height=\"300px\" width=\"600px\"></img>\r\n\r\n### Hardware Diagrams\r\nThe circuit connects the Scale (shown by the small circuit to the left) with the Arduino Mega 2560, which sends data to the ESP32 DEVKIT V1 to send to the database through Wi-Fi. The Scale connects to the Arduino’s 3.3 V, the D2 pin, the D4 pin, and GND. The ESP32’connects to the Arduino through the ESP32’s RX2 and TX2 pins, which connect to the board’s RX0 and TX0 pins, respectively. The ESP32 also connects to the Arduino’s GND. \r\n\r\n<img src=\"../manual/images/arduino.png\" height=\"300px\" width=\"600px\"></img>\r\n\r\n### Note About Final System Design Documentation\r\nThis documentation includes information about all functions in the project. This information can be found using the **Reference** and **Source** tabs at the top left of this web page. The functions in each file are listed out, and the full source code can be found as well.\r\n\r\n**NOTE**: Several features used throughout the project were imported from various creators and changed for use in the app. Imported features include:\r\n- Notifications, which are done through Expo\r\n- The navigation drawer, which is imported from React\r\n- The mutations.json and queries.json files used for accessing/mutating the database were autogenerated via Amplify from AppSync (AWS)\r\n- Barcode scanning features were imported from React\r\n- Recognizing barcodes was done using the Edamam API\r\n- The database is stored on AWS DynamoDB\r\n- Verifying credentials is done using AWS Cognito\r\n- Development of the app was done using the Expo Go app\r\n\r\nThe code for App.js and the JavaScript files in the screens folder was all coded by our group, although most of them include a few elements imported from React and React Native for support of app development, such as buttons, inputs, Screen stacks, etc. For full information, view the code as mentioned at the begining of this section. Imports for each file are stored at the top, and most of the imports come from React, Expo, and AWS Amplify.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\kk_la\\Desktop\\SmartPantry\\SmartPantry\\manual\\testing.md",
    "name": "./manual/testing.md",
    "content": "# Documentation of Testing\r\n\r\n### Create Account / Login\r\n\r\n\r\n\r\n 1. On the “Sign in to your account” screen, click “Sign Up”\r\n- This will open a screen with “Create a new account” at the top, with four text fields.\r\n\r\n<img src=\"../manual/images/testing/CA_L_1.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n 2. Fill in the:\r\n- “Username” field with a valid email address\r\n- “Password” field with a password\r\n- “Email” field with a valid email address\r\n- “Phone Number” with a valid phone number\r\n\r\n<img src=\"../manual/images/testing/CA_L_2.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n 3.  Click “Sign Up”\r\n- This will open a screen with “Confirm Sign Up” at the top, with two text fields. This will also send a confirmation code to the email address previously provided.\r\n\r\n<img src=\"../manual/images/testing/CA_L_3.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n<img src=\"../manual/images/testing/CA_L_3a.png\" height=\"300px\" width=\"500px\"></img>\r\n\r\n 4. Fill in the:\r\n- “Username” field with the email address previously provided\r\n- “Confirmation Code” field with the confirmation code received via email\r\n\r\n<img src=\"../manual/images/testing/CA_L_4.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n 5.  Click “Confirm”\r\n - This will open a screen with “Sign in to your account” at the top, with two text fields.\r\n\r\n <img src=\"../manual/images/testing/CA_L_5.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n 6.  Fill in the:\r\n- “Username” field with the email address previously provided\r\n- “Password” field with the matching password to the email in the “Username” field\r\n 7.  Click “Sign In”\r\n- This will open a screen with “Welcome” at the top\r\n\r\n 8.  Click the three horizontal lines in the top left corner of the screen\r\n- A sidebar will open on the left of the screen with the following options:  Welcome, My Pantry, Shopping List, My Profile, Help, Settings\r\n-The username used to log in will show above the sidebar options\r\n\r\n<img src=\"../manual/images/testing/CA_L_8.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n<img src=\"../manual/images/testing/CA_L_8a.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n<img src=\"../manual/images/testing/CA_L_9.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n### Create Pantry\r\n\r\n 1. On the “Welcome” screen, click the three horizontal lines on the top left of the screen\r\n- A sidebar will open on the left of the screen with the following options:  Welcome, My Pantry, Shopping List, My Profile, Help, Settings\r\n    \r\n\r\n 2.  Click the “My Pantry” option\r\n - This will open a screen with “My Pantry” at the top, with one button in the middle of the screen with “Create Pantry” on it.\r\n\r\n <img src=\"../manual/images/testing/CP_3.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n 3.  Click the “Create Pantry button”\r\n    - This will open a screen with “Create Pantry” at the top, underneath the parent screen “My Pantry”, with one text field in the middle of the screen and a button underneath with “Submit” on it.\r\n\r\n<img src=\"../manual/images/testing/CP_4.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n 4.  Click the text field and enter a name for the pantry\r\n    \r\n\r\n 5. Click the “Submit” button\r\n    - This will return to the “My Pantry” screen, but will have the provided name of the pantry in the middle of the screen, with a button underneath with “Add Item” on it\r\n\r\n<img src=\"../manual/images/testing/CP_6.png\" height=\"700px\" width=\"700px\"></img>\r\n\r\n### Manual Add Item / View Pantry\r\n 1.  On the “My Pantry” screen, after a pantry is created, click the “Add Item” button\r\n    - This will open a child screen called “Add Item” with four text boxes and two buttons with “Barcode Add” and “Submit\", respectively\r\n\r\n<img src=\"../manual/images/testing/MA_1.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n 2.  Fill in the:\r\n    - “Name” field with “Tomato Soup”\r\n    - “Weight” field with 1\r\n    - “Quantity” field with 5\r\n    - “Expiration date” with the date 30 days away\r\n\r\n<img src=\"../manual/images/testing/MA_2.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n 3.  Click the “Submit” button\r\n  - This will return to the main “My Pantry” screen with the added item shown below the “Add Item” button. The new item will include the item name, the given weight, the given quantity, the given expiration date, an “Update” button, and a “Delete” button\r\n\r\n<img src=\"../manual/images/testing/MA_4.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n### Barcode Add Item\r\n 1.  On the “My Pantry” screen, after a pantry is created, click the “Add Item” button\r\n    -This will open a child screen called “Add Item” with four text boxes and two buttons with “Barcode Add” and “Submit\", respectively\r\n\r\n<img src=\"../manual/images/testing/BA_1.png\" height=\"700px\" width=\"700px\"></img>\r\n\r\n 2.  Click the “Barcode Add” button\r\n    - The phone’s camera will open inside a child screen called “Barcode Add”\r\n\r\n 3.  Point the camera at the barcode on the wanted item\r\n - This will open a screen with the name of the item above two text fields, a button called “Submit” and a button called “Go Back” underneath\r\n - Clicking “Go Back” will return to the “Add Item” screen. If clicked, follow steps 1-3 to return to the screen with the “Go Back” button\r\n    \r\n<img src=\"../manual/images/testing/BA_3.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n 4.  Fill in the:\r\n    - “Quantity” as 1\r\n\r\n 5.  Click the “Submit” button\r\n    - This will return to the “Add Item” screen\r\n\r\n<img src=\"../manual/images/testing/BA_5.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n 6.  Click the arrow in the top left of the screen\r\n    - This will return to the “My Pantry” screen, and will refresh to include the added item\r\n\r\n<img src=\"../manual/images/testing/BA_6.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n### Update Item\r\n 1.  On the “My Pantry” screen, click the “Update” button next to an item with the values:\r\n- Name: Tomato Soup\r\n    - Weight: 1\r\n- Quantity: 5\r\n- This will open a screen with “Edit your item” at the top, with three text fields and two buttons called “Submit” and “Go Back”\r\n\r\n<img src=\"../manual/images/testing/BA_6.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n 2.  Fill in the:\r\n    - “Name” field with “Soup”\r\n- “Quantity” field with 4\r\n- Clicking “Go Back” will return to the “My Pantry” screen. If clicked, follow steps 1-2 to return to the “Edit your item” screen\r\n\r\n<img src=\"../manual/images/testing/UI_2.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n 3.  Click the “Submit” button\r\n    - This will return to the “My Pantry” screen with the changed values shown for the updated item\r\n\r\n<img src=\"../manual/images/testing/UI_3.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n### Remove Item\r\n 1.  On the “My Pantry” screen, click the “Remove” button next to an item with the values:\r\n    - Name: Tomato Soup\r\n- Weight: 1\r\n- Quantity: 4\r\n- This will open a pop-up called “Delete Item” asking for confirmation to delete\r\n- Clicking “No” will return to the “My Pantry” screen. If clicked, follow step 1 to return to the pop-up\r\n\r\n<img src=\"../manual/images/testing/DI_2.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n2.  Click “Yes” \r\n- This will open another pop-up called “Shopping List” asking if the item should be added to the shopping list\r\n- Clicking “No” will return to the “My Pantry” screen and delete the item, but not add it to the shopping list. If clicked, follow steps 1-2 to return to the “Shopping List” pop-up\r\n\r\n3.  Click “Yes”\r\n- This will return to the “My Pantry” screen with the removed item not shown\r\n\r\n<img src=\"../manual/images/testing/DI_3.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n<img src=\"../manual/images/testing/DI_5.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n4.  Click the three horizontal lines in the top left of the screen\r\n- This will open a sidebar with the following options: Welcome, My Pantry, Shopping List, My Profile, Help, Settings, Create Pantry\r\n\r\n5.  Click “Shopping List”\r\n- This will open the “Shopping List” screen with a button that says “Add Item” in the middle, and the item added to the shopping list with a button with “Delete Item” on it\r\n\r\n<img src=\"../manual/images/testing/DI_6.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n### Notifications \r\n1.  Make sure the pantry is empty\r\n    \r\n<img src=\"../manual/images/testing/N_1.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n2.  On the “My Pantry” screen, click the three horizontal lines in the top left of the screen    \r\n- This will open a sidebar with the following options: Welcome, My Pantry, Shopping List, My Profile, Help, Settings, Create Pantry\r\n3.  Click the “Settings” option\r\n    - This will open the “Settings” screen, with the options: My Information, Manage My Pantry, Collaborator Pantry, Notifications, Help, About, Meet The App Developers, Sign Out\r\n\r\n<img src=\"../manual/images/testing/N_2.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n4.  Click the “Notifications” option\r\n    - This will open the “Notifications” screen, with multiple bars with different time increments on them spanning the width of the screen\r\n\r\n<img src=\"../manual/images/testing/N_3.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n5.  Click the “10 SECONDS” bar\r\n    - This will check to see if notifications need to be sent every 10 seconds\r\n\r\n<img src=\"../manual/images/testing/N_4.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n6.  Click the three horizontal lines in the top left of the screen\r\n    - This will open a sidebar with the following options: Welcome, My Pantry, Shopping List, My Profile, Help, Settings, Create Pantry\r\n\r\n7.  Click the “My Pantry” option\r\n- This will open the “My Pantry” screen, showing all the items that are in the pantry\r\n\r\n<img src=\"../manual/images/testing/N_5.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n8.  Click the “Add Item” button\r\n    - This will open a child screen called “Add Item” with four text boxes and two buttons with “Barcode Add” and “Submit”, respectively\r\n\r\n9.  Fill in the:\r\n    - “Name” field with “Tomato Soup”\r\n    - “Weight” field with 1\r\n    - “Quantity” field with 5\r\n    - “Expiration date” with the date 30 days away\r\n\r\n<img src=\"../manual/images/testing/N_6.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n10.  Click the “Submit” button\r\n    - This will return to the main “My Pantry” screen with the added item shown below the “Add Item” button. The new item will include the item name, the given weight, the given quantity, the given expiration date, an “Update” button, and a “Delete” button\r\n\r\n11.  Click the “Add Item” button\r\n    - This will open a child screen called “Add Item” with four text boxes and two buttons with “Barcode Add” and “Submit”, respectively\r\n\r\n12.  Fill in the:\r\n    - “Name” field with “Milk”\r\n    - “Weight” field with 1\r\n    - “Quantity”  field  with 1\r\n    - “Expiration date” with the date 2 days away\r\n\r\n<img src=\"../manual/images/testing/N_7.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n13.  Click the “Submit” button\r\n    - This will return to the main “My Pantry” screen with the added item shown below the “Add Item” button. The new item will include the item name, the given weight, the given quantity, the given expiration date, an “Update” button, and a “Delete” button\r\n\r\n<img src=\"../manual/images/testing/N_8.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n14.  Click the “Update” button next to the item called “Tomato Soup”\r\n    \r\n\r\n15.  Fill in the:\r\n    - “Quantity” field with 1\r\n\r\n<img src=\"../manual/images/testing/N_9.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n16.  Click the “Submit” button\r\n    - This will return to the “My Pantry” screen with the changed values shown for the updated item\r\n\r\n<img src=\"../manual/images/testing/N_10.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n17.  Wait for 10 seconds\r\n    - A notification will be sent within 10 seconds saying “You have 1 item(s) expiring soon and 1 item(s) running low! Click here to view them.”\r\n\r\n<img src=\"../manual/images/testing/N_11.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n18. You will be prompted to add the item to your shopping list. Click \"No\".\r\n\r\n<img src=\"../manual/images/testing/N_12.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n### Create Account Edge Cases\r\n1. On the “Sign in to your account” screen, click “Sign Up”\r\n    - This will open a screen with “Create a new account” at the top, with four text fields.\r\n2. Fill in the:\r\n    - “Username” field with an invalid email address\r\n    - “Email” field with an invalid email address\r\n\r\n<img src=\"../manual/images/testing/CAE_1.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n3. Click “Sign Up”\r\n    - This will open an error saying the required fields need to be filled\r\n\r\n<img src=\"../manual/images/testing/CAE_2.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n4. Fill in the:\r\n    - “Username” field with a valid email address\r\n    - “Password” field with a password\r\n    - “Email” field with a valid email address\r\n    - “Phone Number” with a valid phone number\r\n\r\n<img src=\"../manual/images/testing/CA_L_2.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n5. Click “Sign Up”\r\n    - This will open a screen with “Confirm Sign Up” at the top, with two text fields. This will also send a confirmation code to the email address previously provided.\r\n\r\n<img src=\"../manual/images/testing/CA_L_3.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n<img src=\"../manual/images/testing/CA_L_3a.png\" height=\"300px\" width=\"500px\"></img>\r\n\r\n6. Fill in the:\r\n    - “Username” field with the email address previously provided\r\n    - “Confirmation Code” field with an invalid confirmation code\r\n    - This will open an error saying the confirmation code was incorrect\r\n\r\n<img src=\"../manual/images/testing/CAE_3.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n### Login Edge Cases\r\n1. On the “Sign in to your account” screen with an account already created, fill in the fields:\r\n    - “Username” with an existing username\r\n    - “Password” with a mismatching password\r\n    - An error message will pop up saying the username or password was incorrect\r\n\r\n<img src=\"../manual/images/testing/LE_1.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n2. Fill in the fields:\r\n    - “Username” with a nonexistent username\r\n    - “Password” with a valid password\r\n    - An error message will pop up saying the username or password was incorrect\r\n\r\n<img src=\"../manual/images/testing/LE_2.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n### Update/Barcode/Manual Item Add Edge Cases\r\n1. Input invalid Quantity or Weight\r\n    - Input a negative quantity or weight: An error message displays, “(Quality/Weight) cannot be negative”. Your item will be removed from your pantry.\r\n\r\n<img src=\"../manual/images/testing/UIE_1.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n<img src=\"../manual/images/testing/UIE_2.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n    - Input a decimal quantity. The quantity will be rounded down to the nearest whole number.\r\n\r\n<img src=\"../manual/images/testing/UIE_3.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n<img src=\"../manual/images/testing/UIE_4.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n### Notifications Edge Cases\r\n1. Notification linked to deleted Item does not break application\r\n    - Have an Item that is either close to expiring (~6 days from expiration  date) or low (~25% of max weight or quantity), when a Notification is triggered. Delete the item first, then click the Notification: Application navigates to the ‘My Pantry’ page. Application does not break.\r\n\r\n<img src=\"../manual/images/testing/NE_1.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n<img src=\"../manual/images/testing/NE_2.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n<img src=\"../manual/images/testing/NE_3.png\" height=\"700px\" width=\"350px\"></img>\r\n\r\n<img src=\"../manual/images/testing/NE_4.jpg\" height=\"700px\" width=\"350px\"></img>\r\n\r\n<img src=\"../manual/images/testing/NE_5.png\" height=\"700px\" width=\"350px\"></img>",
    "static": true,
    "access": "public"
  }
]