[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "SmartPantry/.external-ecmascript.js",
    "static": true,
    "longname": "SmartPantry/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "SmartPantry/App.js",
    "content": "import { LogBox, Alert, Text, View} from 'react-native';\r\nimport {NavigationContainer} from '@react-navigation/native';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\n\r\nimport HomeStackScreen from './screens/Home';\r\nimport ShoppingStackScreen from './screens/Shopping';\r\nimport SettingsStackScreen from './screens/Settings';\r\n\r\nimport React from 'react';\r\nimport {Icon, Button} from 'react-native-elements';\r\nimport Amplify from 'aws-amplify';\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport awsconfig from './src/aws-exports';\r\nimport { withAuthenticator } from 'aws-amplify-react-native';\r\n\r\nimport { getPantry } from \"./queries.js\";\r\nimport { updatePantry } from \"./mutations.js\";\r\n\r\n\r\n// Initializes Amplify\r\nAmplify.configure({\r\n  ...awsconfig,\r\n  Analytics: {\r\n    disabled: true,\r\n  },\r\n});\r\n\r\n// Ignore certain logs\r\nLogBox.ignoreLogs([\r\n  \"[react-native-gesture-handler] Seems like you're using an old API with gesture components, check out new Gestures system!\",\r\n]);\r\n\r\n// Creates a new Bottom Tab Navigator object\r\nconst Tab = createBottomTabNavigator();\r\n\r\n// Function that signs a user out of the app with an alert box\r\nconst signOutAlert = () => {\r\n  Alert.alert(\r\n    \"Sign Out\",\r\n    \"Do you want to sign out?\",\r\n    [\r\n      {\r\n        text: \"Yes\",\r\n        onPress: () => Auth.signOut() // Uses amplify Auth library and signOut() method\r\n      },\r\n      {\r\n        text: \"No\",\r\n        style: \"cancel\"\r\n      }\r\n    ]\r\n  )\r\n}\r\n\r\n\r\nconst updateNotifFreq = async ( new_pref ) => {\r\n  const user = await Auth.currentAuthenticatedUser();\r\n\r\n  const pantryData = await API.graphql(\r\n    graphqlOperation(getPantry, { id: user.username.toString() })\r\n  );\r\n\r\n  const update = {\r\n    id: user.username.toString(),\r\n    notiffreq: new_pref,\r\n  }\r\n\r\n  const u = await API.graphql(graphqlOperation(updatePantry, {input: update}));\r\n  \r\n}\r\n\r\nconst notificationUpdate = async () => {\r\n  const user = await Auth.currentAuthenticatedUser();\r\n\r\n  const pantryData = await API.graphql(\r\n    graphqlOperation(getPantry, { id: user.username.toString() })\r\n  );\r\n\r\n  if(pantryData == null) {\r\n    Alert.alert(\"Notifications\", \"You must create a pantry before you can change your notification preferences.\");\r\n  }\r\n  else {\r\n    const current_preference = pantryData.data.getPantry.notiffreq;\r\n    let preference_response = \"\";\r\n\r\n    if(current_preference == 60) {\r\n      preference_response = \"once a minute\";\r\n    }\r\n    else if(current_preference == 86400 / 24) {\r\n      preference_response = \"once an hour\";\r\n    }\r\n    else if(current_preference == 86400 / 12) {\r\n      preference_response = \"every two hours\";\r\n    }\r\n    else if(current_preference == 86400 / 3) {\r\n      preference_response = \"every eight hours\";\r\n    }\r\n    else if(current_preference == 86400 / 2) {\r\n      preference_response = \"every twelve hours\";\r\n    }\r\n    else if(current_preference == 86400) {\r\n      preference_response = \"every day\";\r\n    }\r\n    else if(current_preference == 86400 * 2) {\r\n      preference_response = \"every two days\";\r\n    }\r\n    else if(current_preference == 86400 * 7) {\r\n      preference_response = \"every week\";\r\n    }\r\n    else if(current_preference == 86400 * 14) {\r\n      preference_response = \"every two weeks\";\r\n    }\r\n    else if(current_preference == 86400 * 30) {\r\n      preference_response = \"every month\";\r\n    }\r\n    else if(current_preference == 86400 * 90) {\r\n      preference_response = \"every 3 months\";\r\n    }\r\n\r\n    Alert.alert(\r\n      \"Notifications\",\r\n      \"You will receive a notification \" + preference_response + \". Would you like to change your notification preference?\",\r\n      [\r\n        {\r\n          text: \"Yes\",\r\n          onPress: () => {\r\n            Alert.alert(\"Notifications\",\r\n            \"What would you like to change your notification preference to? (You will have more options in the notification page in Settings)\",\r\n            [\r\n              {\r\n                text: \"Hourly\",\r\n                onPress: () => {\r\n                  updateNotifFreq(86400 / 24);\r\n                  Alert.alert(\"Notifications\", \"You will now recieve notifications at most every hour.\")\r\n                }\r\n              },\r\n              {\r\n                text: \"Daily\",\r\n                onPress: () => {\r\n                  updateNotifFreq(86400);\r\n                  Alert.alert(\"Notifications\", \"You will now recieve notifications at most every day.\")\r\n                }\r\n              },\r\n              {\r\n                text: \"Weekly\",\r\n                onPress: () => {\r\n                  updateNotifFreq(86400 * 7);\r\n                  Alert.alert(\"Notifications\", \"You will now recieve notifications at most every week.\")\r\n                }\r\n              }\r\n            ]);\r\n\r\n          }\r\n        },\r\n        {\r\n          text: \"No\",\r\n          style: \"cancel\"\r\n        }\r\n      ]\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// Main App function\r\nfunction App() {\r\n  \r\n  return (\r\n    // Entire app wrapped in a NavigationContainer and uses the bottom tab navigator for screens\r\n    <NavigationContainer>\r\n      <Tab.Navigator\r\n        screenOptions={{\r\n          headerStyle: {\r\n            backgroundColor: \"#769353\",\r\n          },\r\n        }}\r\n      >\r\n        <Tab.Screen\r\n          name=\"Home\"\r\n          component={HomeStackScreen}\r\n          options={({ navigation }) => ({\r\n            title: \"Home\",\r\n            // Sets up header buttons for notifications and sign out\r\n            headerRight: () => (\r\n              <Button\r\n                icon={\r\n                  <Icon name=\"circle-notifications\" size={25} color=\"#000000\" />}\r\n                  onPress={notificationUpdate}\r\n                type=\"clear\"\r\n              ></Button>\r\n            ),\r\n            headerLeft: () => (\r\n              <View>\r\n                <Button\r\n                  icon={<Icon name=\"logout\" size={25} color=\"#000000\" />}\r\n                  onPress={signOutAlert}\r\n                  type=\"clear\"\r\n                ></Button>\r\n              </View>\r\n            ),\r\n            // sets the icon for the home bottom tab screen\r\n            tabBarIcon: () => {\r\n              return <Icon name=\"home\" />;\r\n            },\r\n            headerShown: true,\r\n          })}\r\n        />\r\n        <Tab.Screen\r\n          name=\"Shopping\"\r\n          component={ShoppingStackScreen}\r\n          options={{\r\n            tabBarIcon: () => {\r\n              return <Icon name=\"store\" />;\r\n            },\r\n            headerShown: true,\r\n          }}\r\n        />\r\n        <Tab.Screen\r\n          name=\"Settings\"\r\n          component={SettingsStackScreen}\r\n          options={{\r\n            tabBarIcon: () => {\r\n              return <Icon name=\"settings\" />;\r\n            },\r\n            headerShown: true,\r\n          }}\r\n        />\r\n      </Tab.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\nexport default withAuthenticator(App); // exports the app with Amplify's withAuthenticator for cognito\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "Tab",
    "memberof": "SmartPantry/App.js",
    "static": true,
    "longname": "SmartPantry/App.js~Tab",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "signOutAlert",
    "memberof": "SmartPantry/App.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/App.js~signOutAlert",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "updateNotifFreq",
    "memberof": "SmartPantry/App.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/App.js~updateNotifFreq",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "new_pref",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "notificationUpdate",
    "memberof": "SmartPantry/App.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/App.js~notificationUpdate",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "App",
    "memberof": "SmartPantry/App.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/App.js~App",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "SmartPantry/babel.config.js",
    "content": "module.exports = function(api) {\r\n  api.cache(true);\r\n  return {\r\n    presets: ['babel-preset-expo'],\r\n    plugins: [\r\n      \"react-native-reanimated/plugin\",\r\n    ],\r\n  };\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/babel.config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "exports",
    "memberof": "SmartPantry/babel.config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/babel.config.js~exports",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/babel.config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "api",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"presets\": *, \"plugins\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "SmartPantry/mutations.js",
    "content": "/* eslint-disable */\r\n// this is an auto generated file. This will be overwritten\r\n\r\nexport const createPantry = /* GraphQL */ `\r\n  mutation CreatePantry(\r\n    $input: CreatePantryInput!\r\n    $condition: ModelPantryConditionInput\r\n  ) {\r\n    createPantry(input: $input, condition: $condition) {\r\n      id\r\n      name\r\n      owner\r\n      items {\r\n        nextToken\r\n      }\r\n      notiffreq\r\n      collabId\r\n      notifPending\r\n      notifTime\r\n      email\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const updatePantry = /* GraphQL */ `\r\n  mutation UpdatePantry(\r\n    $input: UpdatePantryInput!\r\n    $condition: ModelPantryConditionInput\r\n  ) {\r\n    updatePantry(input: $input, condition: $condition) {\r\n      id\r\n      name\r\n      owner\r\n      items {\r\n        nextToken\r\n      }\r\n      notiffreq\r\n      collabId\r\n      notifPending\r\n      notifTime\r\n      email\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const deletePantry = /* GraphQL */ `\r\n  mutation DeletePantry(\r\n    $input: DeletePantryInput!\r\n    $condition: ModelPantryConditionInput\r\n  ) {\r\n    deletePantry(input: $input, condition: $condition) {\r\n      id\r\n      name\r\n      owner\r\n      items {\r\n        nextToken\r\n      }\r\n      notiffreq\r\n      collabId\r\n      notifPending\r\n      notifTime\r\n      email\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const createItem = /* GraphQL */ `\r\n  mutation CreateItem(\r\n    $input: CreateItemInput!\r\n    $condition: ModelItemConditionInput\r\n  ) {\r\n    createItem(input: $input, condition: $condition) {\r\n      id\r\n      name\r\n      pantry {\r\n        id\r\n        name\r\n        owner\r\n        notiffreq\r\n        collabId\r\n        notifPending\r\n        notifTime\r\n        email\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      list {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      imagePath\r\n      weight\r\n      currWeight\r\n      quantity\r\n      origQuantity\r\n      expDate\r\n      createdAt\r\n      updatedAt\r\n      pantryItemsId\r\n      shoppingListItemsId\r\n    }\r\n  }\r\n`;\r\nexport const updateItem = /* GraphQL */ `\r\n  mutation UpdateItem(\r\n    $input: UpdateItemInput!\r\n    $condition: ModelItemConditionInput\r\n  ) {\r\n    updateItem(input: $input, condition: $condition) {\r\n      id\r\n      name\r\n      pantry {\r\n        id\r\n        name\r\n        owner\r\n        notiffreq\r\n        collabId\r\n        notifPending\r\n        notifTime\r\n        email\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      list {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      imagePath\r\n      weight\r\n      currWeight\r\n      quantity\r\n      origQuantity\r\n      expDate\r\n      createdAt\r\n      updatedAt\r\n      pantryItemsId\r\n      shoppingListItemsId\r\n    }\r\n  }\r\n`;\r\nexport const deleteItem = /* GraphQL */ `\r\n  mutation DeleteItem(\r\n    $input: DeleteItemInput!\r\n    $condition: ModelItemConditionInput\r\n  ) {\r\n    deleteItem(input: $input, condition: $condition) {\r\n      id\r\n      name\r\n      pantry {\r\n        id\r\n        name\r\n        owner\r\n        notiffreq\r\n        collabId\r\n        notifPending\r\n        notifTime\r\n        email\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      list {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      imagePath\r\n      weight\r\n      currWeight\r\n      quantity\r\n      origQuantity\r\n      expDate\r\n      createdAt\r\n      updatedAt\r\n      pantryItemsId\r\n      shoppingListItemsId\r\n    }\r\n  }\r\n`;\r\nexport const createShoppingList = /* GraphQL */ `\r\n  mutation CreateShoppingList(\r\n    $input: CreateShoppingListInput!\r\n    $condition: ModelShoppingListConditionInput\r\n  ) {\r\n    createShoppingList(input: $input, condition: $condition) {\r\n      id\r\n      items {\r\n        nextToken\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const updateShoppingList = /* GraphQL */ `\r\n  mutation UpdateShoppingList(\r\n    $input: UpdateShoppingListInput!\r\n    $condition: ModelShoppingListConditionInput\r\n  ) {\r\n    updateShoppingList(input: $input, condition: $condition) {\r\n      id\r\n      items {\r\n        nextToken\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const deleteShoppingList = /* GraphQL */ `\r\n  mutation DeleteShoppingList(\r\n    $input: DeleteShoppingListInput!\r\n    $condition: ModelShoppingListConditionInput\r\n  ) {\r\n    deleteShoppingList(input: $input, condition: $condition) {\r\n      id\r\n      items {\r\n        nextToken\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/mutations.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "createPantry",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~createPantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{createPantry}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "updatePantry",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~updatePantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{updatePantry}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "deletePantry",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~deletePantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{deletePantry}",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "createItem",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~createItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{createItem}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "updateItem",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~updateItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{updateItem}",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "deleteItem",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~deleteItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{deleteItem}",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "createShoppingList",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~createShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{createShoppingList}",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "updateShoppingList",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~updateShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{updateShoppingList}",
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "deleteShoppingList",
    "memberof": "SmartPantry/mutations.js",
    "static": true,
    "longname": "SmartPantry/mutations.js~deleteShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/mutations.js",
    "importStyle": "{deleteShoppingList}",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "SmartPantry/queries.js",
    "content": "/* eslint-disable */\r\n// this is an auto generated file. This will be overwritten\r\n\r\nexport const getPantry = /* GraphQL */ `\r\n  query GetPantry($id: ID!) {\r\n    getPantry(id: $id) {\r\n      id\r\n      name\r\n      owner\r\n      items {\r\n        nextToken\r\n      }\r\n      notiffreq\r\n      collabId\r\n      notifPending\r\n      notifTime\r\n      email\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const listPantries = /* GraphQL */ `\r\n  query ListPantries(\r\n    $filter: ModelPantryFilterInput\r\n    $limit: Int\r\n    $nextToken: String\r\n  ) {\r\n    listPantries(filter: $filter, limit: $limit, nextToken: $nextToken) {\r\n      items {\r\n        id\r\n        name\r\n        owner\r\n        notiffreq\r\n        collabId\r\n        notifPending\r\n        notifTime\r\n        email\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n`;\r\nexport const getItem = /* GraphQL */ `\r\n  query GetItem($id: ID!) {\r\n    getItem(id: $id) {\r\n      id\r\n      name\r\n      pantry {\r\n        id\r\n        name\r\n        owner\r\n        notiffreq\r\n        collabId\r\n        notifPending\r\n        notifTime\r\n        email\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      list {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      imagePath\r\n      weight\r\n      currWeight\r\n      quantity\r\n      origQuantity\r\n      expDate\r\n      createdAt\r\n      updatedAt\r\n      pantryItemsId\r\n      shoppingListItemsId\r\n    }\r\n  }\r\n`;\r\nexport const listItems = /* GraphQL */ `\r\n  query ListItems(\r\n    $filter: ModelItemFilterInput\r\n    $limit: Int\r\n    $nextToken: String\r\n  ) {\r\n    listItems(filter: $filter, limit: $limit, nextToken: $nextToken) {\r\n      items {\r\n        id\r\n        name\r\n        imagePath\r\n        weight\r\n        currWeight\r\n        quantity\r\n        origQuantity\r\n        expDate\r\n        createdAt\r\n        updatedAt\r\n        pantryItemsId\r\n        shoppingListItemsId\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n`;\r\nexport const getShoppingList = /* GraphQL */ `\r\n  query GetShoppingList($id: ID!) {\r\n    getShoppingList(id: $id) {\r\n      id\r\n      items {\r\n        nextToken\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const listShoppingLists = /* GraphQL */ `\r\n  query ListShoppingLists(\r\n    $filter: ModelShoppingListFilterInput\r\n    $limit: Int\r\n    $nextToken: String\r\n  ) {\r\n    listShoppingLists(filter: $filter, limit: $limit, nextToken: $nextToken) {\r\n      items {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      nextToken\r\n    }\r\n  }\r\n`;\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/queries.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "getPantry",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~getPantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{getPantry}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "listPantries",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~listPantries",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{listPantries}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "getItem",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~getItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{getItem}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "listItems",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~listItems",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{listItems}",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "getShoppingList",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~getShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{getShoppingList}",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "listShoppingLists",
    "memberof": "SmartPantry/queries.js",
    "static": true,
    "longname": "SmartPantry/queries.js~listShoppingLists",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/queries.js",
    "importStyle": "{listShoppingLists}",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "SmartPantry/screens/About.js",
    "content": "import React, { Component } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  ScrollView,\r\n  FlatList,\r\n  StyleSheet,\r\n} from \"react-native\";\r\n\r\nconst AboutScreen = ({ navigation }) => {\r\n  return (\r\n    <ScrollView>\r\n      \r\n      <Text style={styles.default}>Powered by hardware and software, the Smart Pantry will allow its users to track food items stored in their kitchen pantry. The principal component of the Smart Pantry will be this phone application, which will:</Text> \r\n      <View style={{ marginLeft: 20, offset: 20}}>\r\n        <Text style={styles.bullets}>-Track items stored in a pantry at any given time</Text>\r\n        <Text style={styles.bullets}>-Notify users when a food item is running low (based on the weight of that food item)</Text>\r\n        <Text style={styles.bullets}>-Allow a user to add an item to the pantry by scanning its barcode or manually adding the information</Text>\r\n        <Text style={styles.bullets}>-Remove a food item from the pantry on the app (when it has run out or is no longer wanted)</Text>\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles= StyleSheet.create({\r\n  bullets: {\r\n    paddingVertical: 20,\r\n    fontSize: 18\r\n  },\r\n  default: {\r\n    flex: 1, \r\n    alignItems: \"flex-start\", \r\n    justifyContent: \"flex-start\", \r\n    marginTop: 15, \r\n    marginLeft: 25, \r\n    marginRight: 25,\r\n    fontSize: 18\r\n  }\r\n});\r\n\r\nexport default AboutScreen;\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/About.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/screens/About.js",
    "static": true,
    "longname": "SmartPantry/screens/About.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/About.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "AboutScreen",
    "memberof": "SmartPantry/screens/About.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/About.js~AboutScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/About.js",
    "importStyle": "AboutScreen",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "SmartPantry/screens/Accounts.js",
    "content": "import { UserAgent } from \"amazon-cognito-identity-js\";\r\nimport React, { Component, useState } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  Alert,\r\n  Linking,\r\n} from \"react-native\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport { updatePantry } from \"../mutations\";\r\nimport { getPantry, listPantries } from \"../queries\";\r\nimport { Button, Input } from \"react-native-elements\";\r\nimport qs from 'qs';\r\n// Imports to be used if the QR code method is used for this part\r\n// import ReactDOM from \"react-dom\";\r\n// import QRCode from 'qrcode';\r\n\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <DisplayQRCode text=\"Enter String Here :)\" />\r\n//   </React.StrictMode>\r\n// );\r\n\r\n//This is the ID for one of my accounts (Kollin) used for testing functionality of collaborator accounts\r\nconst testID = \"0350bfeb-7f0f-45b3-b699-3a6607446a12\";\r\n\r\nconst addStringToDatabase = async (userToAdd) => {\r\n  try {\r\n    const user = await Auth.currentAuthenticatedUser();\r\n\r\n    const pantryData = await API.graphql(\r\n      graphqlOperation(getPantry, { id: user.username.toString() })\r\n    );\r\n\r\n    if (pantryData.data.getPantry == null) {\r\n      Alert.alert(\"Collaborator Error\", \"You must create a pantry before you can add a collaborator\")\r\n      return null;\r\n    }\r\n\r\n    const update = {\r\n      id: user.username.toString(),\r\n      collabId: userToAdd,\r\n    }\r\n\r\n    const u = await API.graphql(graphqlOperation(updatePantry, {input: update}));\r\n\r\n    Alert.alert(\"Add Collaborator\", \"Successfully added collaborator \\\"\" + userToAdd + \"\\\". Would you like to send them an email to let them know?\", [\r\n      {\r\n        text: \"Yes\",\r\n        onPress: async () => {\r\n          sendEmail(\r\n            userToAdd,\r\n               'SMART PANTRY Collaboration Notification',\r\n            'I just added you as a collaborator to my pantry! This means that you can view my pantry on your account with the Smart Pantry app. Please email SmartPantryGerontech@gmail.com with any questions you may have!',\r\n          { cc: 'SmartPantryGerontech@gmail.com' }\r\n          ).then(() => {\r\n            console.log('Message sent successfully!');\r\n          });\r\n        }\r\n      },\r\n      {\r\n        text: \"No\",\r\n        style: \"cancel\",\r\n      }\r\n    ])\r\n\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n\r\n\r\nconst AccountsScreen = ({ navigation }) => {\r\n  const [userText, setUserText] = useState(\"\");\r\n\r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n      <Text>You can add a collaborator to your pantry by typing their email in the space below:</Text>\r\n      <Input\r\n        placeholder=\"Enter Collaborator Email\"\r\n        containerStyle={{ width: 250 }}\r\n        onChangeText={(value) => setUserText(value)}\r\n      />\r\n      <Button\r\n        onPress={ async () => {\r\n          Alert.alert(\"Add Collaborator\", \"Add collaborator with ID \\\"\" + userText + \"\\\" to your pantry? Doing so will remove your current collaborator if you have one.\", [\r\n            {\r\n              text: \"Yes\",\r\n              onPress: async () => {\r\n                //NOTE: The userText field should be the ID of the user to add. Want to implement a QR code generator/scanner\r\n                //to make this process seamless and not tedious.\r\n                await addStringToDatabase(userText);\r\n              }\r\n            },\r\n            {\r\n              text: \"No\",\r\n              style: \"cancel\",\r\n            }\r\n          ])\r\n        }}\r\n        title=\"Click here to add a viewer to your pantry\"\r\n        color=\"orange\"\r\n        accessibilityLabel=\"Click here to add this collaborator to your pantry\"\r\n      />\r\n      {/* <Button\r\n        onPress={ async () => {\r\n            // Alert.alert(\"View Other Pantry\", \"This will take you to view another user's pantry, assuming you have access\");\r\n            viewOtherPantry();\r\n        }}\r\n        title=\"Click here to view another pantry\"\r\n        color=\"purple\"\r\n        accessibilityLabel=\"Click here to view another pantry\"\r\n      /> */}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport async function sendEmail(to, subject, body, options = {}) {\r\n  const { cc, bcc } = options;\r\n\r\n  let url = `mailto:${to}`;\r\n\r\n  // Create email link query\r\n  const query = qs.stringify({\r\n      subject: subject,\r\n      body: body,\r\n      cc: cc,\r\n      bcc: bcc\r\n  });\r\n\r\n  if (query.length) {\r\n      url += `?${query}`;\r\n  }\r\n\r\n  // check if we can use this link\r\n  const canOpen = await Linking.canOpenURL(url);\r\n\r\n  if (!canOpen) {\r\n      throw new Error('Provided URL can not be handled');\r\n  }\r\n\r\n  return Linking.openURL(url);\r\n}\r\n\r\n\r\n\r\nexport default AccountsScreen;",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/Accounts.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "testID",
    "memberof": "SmartPantry/screens/Accounts.js",
    "static": true,
    "longname": "SmartPantry/screens/Accounts.js~testID",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Accounts.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "addStringToDatabase",
    "memberof": "SmartPantry/screens/Accounts.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Accounts.js~addStringToDatabase",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Accounts.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "userToAdd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "sendEmail",
    "memberof": "SmartPantry/screens/Accounts.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Accounts.js~sendEmail",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Accounts.js",
    "importStyle": "{sendEmail}",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "to",
        "types": [
          "*"
        ]
      },
      {
        "name": "subject",
        "types": [
          "*"
        ]
      },
      {
        "name": "body",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "AccountsScreen",
    "memberof": "SmartPantry/screens/Accounts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Accounts.js~AccountsScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Accounts.js",
    "importStyle": "AccountsScreen",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "SmartPantry/screens/AddItem.js",
    "content": "import React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, View, Text, Alert } from \"react-native\";\r\nimport { Button, Input } from \"react-native-elements\";\r\nimport {Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport { createItem } from \"../mutations\";\r\n\r\n\r\n\r\nconst AddItemScreen = ({ navigation }) => {\r\n  \r\nconst [nameText, setNameText] = useState(\"\");\r\nconst [weightText, setWeightText] = useState(\"\");\r\nconst [quantityText, setQuantityText] = useState(\"\");\r\nconst [expirationText, setExpirationText] = useState(\"\");\r\n\r\n\r\nconst addPantryItem = async () => {\r\n  if (nameText == \"\") {\r\n    Alert.alert(\"Add Item\", \"Please add a name for your item\")\r\n    return;\r\n  }\r\n\r\n  const user = await Auth.currentAuthenticatedUser();\r\n\r\n  let input_date = expirationText;\r\n  console.log(\"expirationText \" + input_date);\r\n  if(input_date != \"\" && (input_date.length != 10 || input_date.charAt(2) != '/' || input_date.charAt(5) != '/')) {\r\n    Alert.alert(\"Add Item\", \"Date must be in a numerical format, ex: 02/11/2023\");\r\n    return;\r\n  }\r\n\r\n  input_date = input_date.replace(\"/\", \"\");\r\n  input_date = input_date.replace(\"/\", \"\");\r\n\r\n  for(let i = 0; i < input_date.length; i++) {\r\n    if(input_date.charAt(i) < '0' || input_date.charAt(i) > '9') {\r\n      Alert.alert(\"Add Item\", \"Date must be in a numerical format, ex: 02/11/2023\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  if((input_date.charAt(0) > '1' || input_date.charAt(2) > '3' || input_date.charAt(4) < '2') && input_date != \"\") {\r\n    Alert.alert(\"Add Item\", \"Expiration date must be a valid date in the future\");\r\n    return;\r\n  }\r\n\r\n  console.log(\"New Exp Date \" + input_date);\r\n\r\n  const itemInput = {\r\n    name: nameText,\r\n    imagePath: \"default_img\",\r\n    weight: parseFloat(weightText),\r\n    currWeight: parseFloat(weightText),\r\n    quantity: parseInt(quantityText),\r\n    origQuantity: parseInt(quantityText),\r\n    expDate: parseInt(input_date),\r\n    pantryItemsId: user.username.toString(),\r\n  };\r\n  const inputItem = await API.graphql(\r\n    graphqlOperation(createItem, { input: itemInput })\r\n  );\r\n  navigation.navigate(\"HomeStack\");\r\n};\r\n  \r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n      <Input\r\n        placeholder=\"Name\"\r\n        containerStyle={{ width: 250 }}\r\n        onChangeText={(value) => setNameText(value)}\r\n      />\r\n      <Input\r\n        placeholder=\"Weight (lbs.) (optional)\"\r\n        containerStyle={{ width: 250 }}\r\n        onChangeText={(value) => setWeightText(value)}\r\n      />\r\n      <Input\r\n        placeholder=\"Quantity (optional)\"\r\n        containerStyle={{ width: 250 }}\r\n        onChangeText={(value) => setQuantityText(value)}\r\n      />\r\n      <Input\r\n        placeholder=\"Expiration Date (optional)\"\r\n        containerStyle={{ width: 250 }}\r\n        onChangeText={(value) => setExpirationText(value)}\r\n      />\r\n      <Text>Format for expiration date: MM/DD/YYYY</Text>\r\n      <Button\r\n        title=\"Barcode Add\"\r\n        buttonStyle={{ width: 200, margin: 10 }}\r\n        onPress={() => {\r\n          navigation.navigate(\"BarcodeAdd\");\r\n        }}\r\n      ></Button>\r\n      <Button\r\n        buttonStyle={{ width: 200 }}\r\n        title=\"Submit\"\r\n        onPress={() => {\r\n          addPantryItem();\r\n        }}\r\n      ></Button>\r\n    </View>\r\n  );\r\n};\r\n\r\n\r\nexport default AddItemScreen;\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/AddItem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "AddItemScreen",
    "memberof": "SmartPantry/screens/AddItem.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/AddItem.js~AddItemScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/AddItem.js",
    "importStyle": "AddItemScreen",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "SmartPantry/screens/AddShoppingListItem.js",
    "content": "import React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, View, Text, Alert } from \"react-native\";\r\nimport { Button, Input } from \"react-native-elements\";\r\nimport {Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport { createItem } from \"../mutations\";\r\n\r\nconst AddShoppingListItemScreen = ({ navigation }) => {\r\n  \r\nconst [nameText, setNameText] = useState(\"\");\r\n\r\nconst addShoppingListItem = async () => {\r\n  if (nameText == \"\") {\r\n    return;\r\n  }\r\n\r\n  const user = await Auth.currentAuthenticatedUser();\r\n  const itemInput = {\r\n    name: nameText,\r\n    imagePath: \"default_img\",\r\n    shoppingListItemsId: user.username.toString(),\r\n  };\r\n  const inputItem = await API.graphql(\r\n    graphqlOperation(createItem, { input: itemInput })\r\n  );\r\n//   navigation.navigate(\"HomeStack\");\r\nAlert.alert(\"Shopping List\", \"Added \" + nameText + \" to your Shopping List\"); // Temporary fix, unless we prefer this method\r\n};\r\n  \r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n      <Input\r\n        placeholder=\"Name\"\r\n        containerStyle={{ width: 250 }}\r\n        onChangeText={(value) => setNameText(value)}\r\n      />\r\n      <Button\r\n        buttonStyle={{ width: 200 }}\r\n        title=\"Submit\"\r\n        onPress={() => {\r\n          addShoppingListItem();\r\n        }}\r\n      ></Button>\r\n    </View>\r\n  );\r\n};\r\n\r\n\r\nexport default AddShoppingListItemScreen;\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/AddShoppingListItem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "AddShoppingListItemScreen",
    "memberof": "SmartPantry/screens/AddShoppingListItem.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/AddShoppingListItem.js~AddShoppingListItemScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/AddShoppingListItem.js",
    "importStyle": "AddShoppingListItemScreen",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "SmartPantry/screens/BarcodeAdd.js",
    "content": "import React, {useState, useEffect } from \"react\";\r\nimport { Input, Button } from \"react-native-elements\";\r\nimport { View, Text, StyleSheet, Alert, Modal} from \"react-native\";\r\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\r\nimport { createItem } from \"../mutations\";\r\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\r\n\r\nconst BarcodeAddScreen = ({ navigation }) => {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const handleModal = () => setIsModalVisible(() => !isModalVisible);\r\n\r\n  const [nameText, setNameText] = useState(\"\");\r\n  const [weightText, setWeightText] = useState(\"\");\r\n  const [quantityText, setQuantityText] = useState(\"\");\r\n\r\n  const addPantryItem = async () => {\r\n    if (nameText == \"\") {\r\n      return;\r\n    }\r\n\r\n    const user = await Auth.currentAuthenticatedUser();\r\n    const itemInput = {\r\n      name: nameText,\r\n      imagePath: \"default_img\",\r\n      weight: parseFloat(weightText),\r\n      currWeight: parseFloat(weightText),\r\n      quantity: parseInt(quantityText),\r\n      pantryItemsId: user.username.toString(),\r\n    };\r\n    const inputItem = await API.graphql(\r\n      graphqlOperation(createItem, { input: itemInput })\r\n    );\r\n    navigation.navigate(\"AddItem\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === \"granted\");\r\n    })();\r\n  }, []);\r\n\r\n  // test api call with edamam\r\n  const fetchApiCall = (upcCode) => {\r\n    fetch(\r\n      \"https://api.edamam.com/api/food-database/v2/parser?app_id=a82b5608&app_key=0024069e0841f1b87a40123aeefab05c&upc=\" + `${upcCode}` + \"&nutrition-type=cooking\",\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        try {\r\n\r\n          // response.hints[0].food.label -> name of the food item\r\n          // Alert.alert(response.hints[0].food.label);\r\n          setNameText(response.hints[0].food.label);\r\n          handleModal();\r\n        } catch (err) {\r\n          Alert.alert('Couldn\\'t find barcode, please manually add');\r\n          navigation.navigate(\"AddItem\");\r\n        } \r\n      });\r\n  };\r\n\r\n  if (hasPermission === null) {\r\n    return <Text>Requesting for camera permissions</Text>;\r\n  }\r\n\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera!</Text>;\r\n  }\r\n\r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={\r\n          scanned\r\n            ? undefined\r\n            : ({ data }) => {\r\n                setScanned(true);\r\n                fetchApiCall(data);\r\n              }\r\n        }\r\n        style={StyleSheet.absoluteFillObject}\r\n      />\r\n      <Modal visible={isModalVisible} animationType=\"slide\">\r\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n          <Text style={{width: 250}}>{nameText}</Text>\r\n          <Input\r\n            placeholder=\"Weight (lbs.) (optional)\"\r\n            containerStyle={{ width: 250 }}\r\n            onChangeText={(value) => setWeightText(value)}\r\n          />\r\n          <Input\r\n            placeholder=\"Quantity (optional)\"\r\n            containerStyle={{ width: 250 }}\r\n            onChangeText={(value) => setQuantityText(value)}\r\n          />\r\n          <Button\r\n            buttonStyle={{ width: 200 }}\r\n            title=\"Submit\"\r\n            onPress={() => {\r\n              addPantryItem();\r\n            }}\r\n          ></Button>\r\n          <Button buttonStyle={{width: 200, margin: 10}} title=\"Go Back\" onPress={handleModal}></Button>\r\n        </View>\r\n      </Modal>\r\n      {scanned && (\r\n        <Button\r\n          title={\"Tap to Scan again\"}\r\n          onPress={() => setScanned(false)}\r\n        ></Button>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default BarcodeAddScreen;\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/BarcodeAdd.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "BarcodeAddScreen",
    "memberof": "SmartPantry/screens/BarcodeAdd.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/BarcodeAdd.js~BarcodeAddScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/BarcodeAdd.js",
    "importStyle": "BarcodeAddScreen",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "SmartPantry/screens/CreatePantry.js",
    "content": "import React, { useState } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport {Input, Button} from \"react-native-elements\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport { createPantry, createShoppingList } from \"../mutations\";\r\n\r\nconst CreatePantryScreen = ({ navigation }) => {\r\n    const [inputText, setInputText] = useState(\"\");\r\n    \r\n    const createNewPantry = async () => {\r\n        const user = await Auth.currentAuthenticatedUser();\r\n        const pantryInput = {\r\n            id: user.username.toString(),\r\n            name: inputText.toString(),\r\n            owner: user.username.toString(),\r\n            notiffreq: 86400,\r\n            notifPending: false,\r\n            notifTime: Math.floor(Date.now() / 1000),\r\n            email: user.attributes.email,\r\n        };\r\n        const p = await API.graphql(graphqlOperation(createPantry, {input: pantryInput}))\r\n\r\n        const shoppingInput = {\r\n            id: user.username.toString()\r\n        }\r\n\r\n        const q = await API.graphql(graphqlOperation(createShoppingList, {input: shoppingInput}))\r\n\r\n        navigation.navigate(\"HomeStack\");\r\n    }\r\n    \r\n    return (\r\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n            <Input placeholder=\"Name of pantry\" containerStyle={{width: 250}} onChangeText={value => setInputText(value)} />\r\n            <Button title=\"Submit\" containerStyle={{\r\n                width: 200\r\n            }} onPress={() => {\r\n                createNewPantry();\r\n            }} >\r\n\r\n            </Button>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default CreatePantryScreen;\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/CreatePantry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "CreatePantryScreen",
    "memberof": "SmartPantry/screens/CreatePantry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/CreatePantry.js~CreatePantryScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/CreatePantry.js",
    "importStyle": "CreatePantryScreen",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "SmartPantry/screens/Credits.js",
    "content": "import React, { Component } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n} from \"react-native\";\r\nimport {Button} from 'react-native-elements';\r\n\r\nconst CreditsScreen = ({ navigation }) => {\r\n  return (\r\n    <Button\r\n        onPress={ async () => {\r\n            // alert(\"You will receive a notification in a few seconds\")\r\n            await schedulePushNotification();\r\n        }}\r\n        title=\"Test Bluetooth\"\r\n        color=\"blue\"\r\n      />\r\n  );\r\n};\r\n\r\nconst testBluetooth = async () => {\r\n  alert(\"TEST\");\r\n}\r\n\r\nexport default CreditsScreen;",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/Credits.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "testBluetooth",
    "memberof": "SmartPantry/screens/Credits.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Credits.js~testBluetooth",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Credits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "CreditsScreen",
    "memberof": "SmartPantry/screens/Credits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Credits.js~CreditsScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Credits.js",
    "importStyle": "CreditsScreen",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "SmartPantry/screens/Help.js",
    "content": "import React, { Component } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n} from \"react-native\";\r\n\r\nconst HelpScreen = ({ navigation }) => {\r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n      <Text>Insert here video tutorials for various features (do last, after most styling complete)</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default HelpScreen;",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/Help.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "HelpScreen",
    "memberof": "SmartPantry/screens/Help.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Help.js~HelpScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Help.js",
    "importStyle": "HelpScreen",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "SmartPantry/screens/Home.js",
    "content": "import React, { useState, useEffect, useRef } from \"react\";\r\nimport {Text,View ,ScrollView, Modal, Alert, Animated, PanResponder} from \"react-native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport {Icon, Input} from 'react-native-elements';\r\nimport { Button } from \"react-native-elements\";\r\nimport { getPantry } from \"../queries\";\r\nimport CreatePantryScreen from \"./CreatePantry\";\r\nimport AddItemScreen from \"./AddItem\";\r\nimport ManualAddScreen from \"./ManualAdd\";\r\nimport { listItems, getItem } from \"../queries.js\";\r\nimport { createItem, deleteItem, updateItem, createShoppingList, updatePantry } from \"../mutations\";\r\nimport BarcodeAddScreen from \"./BarcodeAdd\";\r\nimport * as Notifications from 'expo-notifications';\r\nimport Constants from 'expo-constants';\r\n\r\n\r\n// Creates a stack navigator object\r\nconst HomeStack = createStackNavigator();\r\n\r\n// Allows the nesting of bottom tab and stack navigation\r\n// Contains all the screens that are reachable/within the bottom tab home screen\r\nconst HomeStackScreen = () => {\r\n    return (\r\n      <HomeStack.Navigator screenOptions={{\r\n        headerBackTitleVisible: false\r\n      }}>\r\n        <HomeStack.Screen\r\n          options={{ headerShown: false }}\r\n          name=\"HomeStack\"\r\n          component={HomeScreen}\r\n        />\r\n        <HomeStack.Screen\r\n          options={{ headerShown: true, title: \"Create Pantry\" }}\r\n          name=\"CreatePantry\"\r\n          component={CreatePantryScreen}\r\n        />\r\n        <HomeStack.Screen\r\n          options={{ headerShown: true, title: \"Add Item\" }}\r\n          name=\"AddItem\"\r\n          component={AddItemScreen}\r\n        />\r\n        <HomeStack.Screen\r\n          options={{ headerShown: true, title: \"Manual Add\" }}\r\n          name=\"ManualAdd\"\r\n          component={ManualAddScreen}\r\n        />\r\n        <HomeStack.Screen\r\n          options={{ headerShown: true, title: \"Barcode Add\" }}\r\n          name=\"BarcodeAdd\"\r\n          component={BarcodeAddScreen}\r\n        />\r\n      </HomeStack.Navigator>\r\n    );\r\n}\r\n\r\n\r\n// The actual home screen rendering\r\nconst HomeScreen = ({ navigation }) => {\r\n\r\n  //NOTIFICATION STUFF\r\n  try {\r\n    const [expoPushToken, setExpoPushToken] = useState('');\r\n    const [notification, setNotification] = useState(false);\r\n    const notificationListener = useRef();\r\n    const responseListener = useRef();\r\n\r\n    useEffect( () => {\r\n      registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n\r\n      notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n        setNotification(notification);\r\n      });\r\n\r\n      responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n        console.log(\"User has clicked notification\");\r\n        //If we ever want the notification page to redirect the user to a particular screen, we could do that here\r\n        // console.log(response);\r\n        console.log(response.notification.request.content.data.data);\r\n      });\r\n\r\n      return () => {\r\n        Notifications.removeNotificationSubscription(notificationListener.current);\r\n        Notifications.removeNotificationSubscription(responseListener.current);\r\n      };\r\n    }, []);\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n\r\n  //NOTE: There are still occaisionally some weird bugs where the user will receive double notifications,\r\n  //but to fix could comment out the following lines. However, the trade-off is that the user will not\r\n  //have their notifications renewed unless they actually click a button on the home page. May make more\r\n  //updates in the next few days (4/12/2022)\r\n\r\n  if(Date.now() % 5 == 0) {\r\n    schedulePushNotification();  \r\n  }\r\n  //END NOTIFICATION STUFF\r\n\r\n  // useState variables to track whether to render the create pantry button\r\n  // the value of the pantry items, and if a user has a pantry.\r\n  const [createPantryButton, setCreatePantryButton] = useState(null);\r\n  const [items, setItems] = useState([]);\r\n  const [pantryExists, setPantryExists] = useState(false);\r\n  const [pantryName, setPantryName] = useState(\"\");\r\n  const [nameText, setNameText] = useState(\"\");\r\n  const [weightText, setWeightText] = useState(\"\");\r\n  const [quantityText, setQuantityText] = useState(\"\");\r\n  const [itemId, setItemId] = useState(null);\r\n\r\n   const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n   const handleModal = () => setIsModalVisible(() => !isModalVisible);\r\n\r\n  // Loads when you come back to this screen\r\n  // refreshes each time you go back to the screen\r\n  // Checks if a pantry exists and fetches the user's items on every load\r\n  useEffect(() => {\r\n    const unsubscribe = navigation.addListener(\"focus\", () => {\r\n      checkIfPantryExists();\r\n      fetchItems();\r\n    });\r\n    return unsubscribe;\r\n  }, [navigation, items]);\r\n\r\n  // fetches just the items of the pantry that belongs to the current authenticated user\r\n  const fetchItems = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // returns cognito user JSON\r\n\r\n      // Performs the getPantry query based on the id, which is the user's username\r\n      const pantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      // if the getPantry query does not return a null value, sets pantry exists to true\r\n      // otherwise sets it to false because they don't have a pantry yet\r\n      if (pantryData.data.getPantry == null) {\r\n        setPantryExists(false);\r\n      } else {\r\n        setPantryExists(true);\r\n        setPantryName(pantryData.data.getPantry.name);\r\n\r\n        // Grabs the id field from the pantry data\r\n        const pantryId = pantryData.data.getPantry.id;\r\n\r\n        // Grabs the items that are related to the id of the pantry\r\n        const itemsList = await API.graphql(\r\n          graphqlOperation(listItems, {\r\n            filter: {\r\n              pantryItemsId: {\r\n                eq: pantryId.toString(),\r\n              },\r\n            },\r\n          })\r\n        );\r\n\r\n        // stores the value of the items returned\r\n        const b = itemsList.data.listItems.items;\r\n\r\n        // changes the value of useState items value\r\n        setItems(b);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // Update item\r\n  const updatePantryItem = async () => {\r\n\r\n    const item = await API.graphql(graphqlOperation(getItem, {id: itemId}));\r\n\r\n    // if item is updated to have 0 or less quantity, the item will automatically be deleted\r\n    if (!(item.data.getItem.quantity == null) && parseInt(quantityText) <= 0) {\r\n      deletePantryItem(itemId);\r\n      handleModal();\r\n      return;\r\n    }\r\n\r\n    // if item percentage goes to 0 or below, item automatically delete\r\n    if (\r\n      !(item.data.getItem.weight == null) &&\r\n      (parseFloat(weightText) / parseFloat(item.data.getItem.weight)) <= 0\r\n    )\r\n    {\r\n      deletePantryItem(itemId);\r\n      handleModal();\r\n      return;\r\n    }\r\n      try {\r\n        // Perform\r\n        const update = {\r\n          id: itemId,\r\n          name: nameText ? nameText : item.name,\r\n          currWeight: weightText\r\n            ? parseFloat(weightText)\r\n            : item.data.getItem.weight,\r\n          quantity: quantityText\r\n            ? parseInt(quantityText)\r\n            : item.data.getItem.quantity,\r\n        };\r\n\r\n        const u = await API.graphql(\r\n          graphqlOperation(updateItem, { input: update })\r\n        );\r\n        setNameText(\"\");\r\n        setWeightText(\"\");\r\n        setQuantityText(\"\");\r\n        fetchItems();\r\n        handleModal();\r\n      } catch (err) {}\r\n  }\r\n\r\n  // delete item\r\n  const deletePantryItem = async (deleteId) => {\r\n    try {\r\n      const id = {\r\n        id: deleteId\r\n      }\r\n      const d = await API.graphql(graphqlOperation(deleteItem,{input: id} ));\r\n      fetchItems();\r\n    } catch (err) { \r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  // add an item to the shopping list upon deleting it from the pantry, if the user wishes\r\n  const addToShoppingList = async (itemID, name) => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser();\r\n\r\n      const id = {\r\n        id: itemID,\r\n        name: name,\r\n        imagePath: \"default_img\",\r\n        shoppingListItemsId: user.username.toString()\r\n      }\r\n      const d = await API.graphql(graphqlOperation(createItem,{input: id} ));\r\n    } catch (err) { \r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const modalScreen = (\r\n    <Modal visible={isModalVisible} animationType=\"slide\">\r\n      <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n        <Text style={{fontSize: 25, fontWeight: \"bold\", margin: 10}}>Edit your item</Text>\r\n        <Input\r\n          placeholder=\"Name\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setNameText(value)}\r\n        />\r\n        <Input\r\n          placeholder=\"Current Weight (optional)\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setWeightText(value)}\r\n        />\r\n        <Input\r\n          placeholder=\"Quantity (optional)\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setQuantityText(value)}\r\n        />\r\n        <Button\r\n          buttonStyle={{ width: 200, margin: 20}}\r\n          title=\"Submit\"\r\n          onPress={() => {\r\n            updatePantryItem();\r\n          }}\r\n        ></Button>\r\n        <Button buttonStyle={{width: 200}} title=\"Go back\" onPress={handleModal}></Button>\r\n      </View>\r\n    </Modal>\r\n  );\r\n\r\n  // list of items from pantry\r\n  const listOfItems = items.map((item) => {\r\n    let percentage = (parseFloat(item.currWeight) / parseFloat(item.weight) * 100).toFixed(2);\r\n    return (\r\n      <View key={item.id}>\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            paddingHorizontal: 20,\r\n            paddingBottom: 20,\r\n            paddingTop: 20,\r\n          }}\r\n        >\r\n          <Text\r\n            style={{paddingLeft: 15, width: \"50%\", flexDirection: \"column\", fontSize: 18 }}\r\n          >\r\n            {item.name + '\\n'}\r\n            {item.quantity && <Text style={{fontSize: 15, fontWeight: 'bold'}}>Quantity: {item.quantity}</Text>}\r\n            {item.weight && <Text style={{fontSize: 15, fontWeight: \"bold\"}}>Percentage left: {percentage}%</Text>}\r\n            {item.expDate && <Text style={{fontSize: 15, fontWeight: \"bold\"}}>Expiration date: {item.expDate.substring(item.expDate.length - 8, item.expDate.length - 6) + \"/\" + item.expDate.substring(item.expDate.length - 6, item.expDate.length - 4) + \"/\" + item.expDate.substring(item.expDate.length - 4, item.expDate.length)}</Text>}\r\n          </Text>\r\n          <Button buttonStyle={{ backgroundColor: 'grey', width: 75, marginRight: 5 }} title=\"update\" onPress={() => {\r\n            setItemId(item.id);\r\n            handleModal();\r\n            schedulePushNotification();\r\n          }}>\r\n          </Button>\r\n          <Button  buttonStyle={{backgroundColor: 'red', width: 75, marginRight: 5}} title=\"delete\" onPress={() => {\r\n             Alert.alert(\"Delete Item\", \"Are you sure you want to delete item?\", [\r\n               {\r\n                 text: \"Yes\",\r\n                 onPress: () => { \r\n                  schedulePushNotification();\r\n                   Alert.alert(\"Shopping List\", \"Would you like to add the item to your shopping list?\", [\r\n                     {\r\n                       text: \"Yes\",\r\n                       onPress: () => {\r\n                         const itemID = item.id;\r\n                         const name = item.name;\r\n                         Alert.alert(\"Shopping List\", \"Adding to shopping list: \" + name);\r\n                         deletePantryItem(item.id);\r\n                         addToShoppingList(itemID, name);\r\n                       }\r\n                     },\r\n                     {\r\n                      text: \"No\",\r\n                      onPress: () => {\r\n                        deletePantryItem(item.id);\r\n                      },\r\n                     },\r\n                 ] );\r\n                },\r\n               },\r\n               {\r\n                 text: \"No\",\r\n                 style: \"cancel\",\r\n               },\r\n               \r\n             ]);\r\n          }}></Button>\r\n        </View>\r\n        <View style={{ height: 1.2, backgroundColor: \"grey\" }} />\r\n      </View>\r\n    );\r\n  });\r\n\r\n\r\n  // checks whether or not a user has a pantry yet\r\n  const checkIfPantryExists = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // grabs current user's information\r\n\r\n      // Performs the getPantry query based on user's id\r\n      const pantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      // If it's null, we want to render the create pantry button\r\n      // otherwise, we want to hide it\r\n      if (pantryData.data.getPantry == null) {\r\n        setCreatePantryButton(true);\r\n      } else {\r\n        setCreatePantryButton(null);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <ScrollView\r\n        contentContainerStyle={{\r\n          // flexGrow: 1,\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        {/* Conditional render based on the value of createPantryButton and pantryExists */}\r\n        {createPantryButton && (\r\n          <Button\r\n            buttonStyle={{ margin: 15 }}\r\n            title=\"Create Pantry\"\r\n            onPress={() => {\r\n              navigation.navigate(\"CreatePantry\");\r\n              schedulePushNotification();\r\n            }}\r\n          ></Button>\r\n        )}\r\n        {!pantryExists && <Text>You don't have a pantry!</Text>}\r\n        {pantryExists && (\r\n          <View\r\n            style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}\r\n          >\r\n            <Text style={{ fontSize: 25, margin: 15 }}>{pantryName}</Text>\r\n            <Button\r\n              buttonStyle={{ width: 250 }}\r\n              title=\"Add Item\"\r\n              onPress={() => {\r\n                navigation.navigate(\"AddItem\");\r\n                schedulePushNotification();\r\n              }}\r\n            ></Button>\r\n            <View>{listOfItems}</View>\r\n            <View>{modalScreen}</View>\r\n          </View>\r\n        )}\r\n      </ScrollView>\r\n  );\r\n};\r\n\r\nasync function registerForPushNotificationsAsync() {\r\n  let token;\r\n  if (Constants.isDevice) {\r\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Notifications.requestPermissionsAsync();\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== 'granted') {\r\n      alert('Failed to get push token for push notification!');\r\n      return;\r\n    }\r\n    token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    console.log(token);\r\n  } else {\r\n    alert('Must use physical device for Push Notifications');\r\n  }\r\n\r\n  if (Platform.OS === 'android') {\r\n    Notifications.setNotificationChannelAsync('default', {\r\n      name: 'default',\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: '#FF231F7C',\r\n    });\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\nasync function schedulePushNotification() {\r\n\r\n  const user = await Auth.currentAuthenticatedUser(); // grabs current user's information\r\n\r\n  const pantryData = await API.graphql(\r\n    graphqlOperation(getPantry, { id: user.username.toString() })\r\n  );\r\n\r\n  if (pantryData.data.getPantry == null) {\r\n    console.log(\"User has no pantry\");\r\n  }\r\n  else {\r\n    //NOTE: The frequency update field stores the number of seconds between timestamps\r\n\r\n    //MAKE CHANGE HERE!!! Convert from string to long, then do Math.floor(notifTime / 1000)\r\n    if(Math.floor(parseInt(pantryData.data.getPantry.notifTime) / 1000) + pantryData.data.getPantry.notiffreq < Math.floor(Date.now() / 1000) && pantryData.data.getPantry.notifPending) {\r\n      console.log(\"Allowing notifications again\");\r\n      const pantryInput = {\r\n        id: user.username.toString(),\r\n        notifPending: false,\r\n        notifTime: Math.floor(Date.now() / 1000),\r\n      };\r\n      const p = await API.graphql(graphqlOperation(updatePantry, {input: pantryInput}))\r\n    }\r\n\r\n    let itemsExpiring = 0;\r\n    const today = new Date();\r\n\r\n    //HERE: Check if there are any items expiring in the current user's pantry\r\n    // Grabs the id field from the pantry data\r\n    const pantryId = pantryData.data.getPantry.id;\r\n\r\n    // Grabs the items that are related to the id of the pantry\r\n    const itemsList = await API.graphql(\r\n      graphqlOperation(listItems, {\r\n        filter: {\r\n          pantryItemsId: {\r\n            eq: pantryId.toString(),\r\n          },\r\n        },\r\n      })\r\n    );\r\n\r\n    const b = itemsList.data.listItems.items;\r\n\r\n    const checkExpirations = b.map( async (item) => {\r\n      //NOTE: For some reason, the JavaScipt Date function is outputting the wrong date for me. I can calibrate it to be accurate\r\n      //      but I don't want to do that until closer to when we demo our project.\r\n      // console.log(\"DATE: \" + item.expDate);\r\n      // console.log(\"MONTH: \" + today.getMonth() + \" \" + today.getDay() + \" \" + today.getFullYear());\r\n      const exp_date = item.expDate;\r\n      if(exp_date != null) {\r\n\r\n        let month = 0;\r\n        let day = 0;\r\n        let year = 0;\r\n        // console.log(\"EXP DATE: \" + exp_date);\r\n        if(exp_date.length == 7) {\r\n          month = parseInt(exp_date.charAt(0));\r\n          day = parseInt(exp_date.substring(1,3));\r\n          year = parseInt(exp_date.substring(3,7));\r\n          // console.log(month + \" \" + day + \" \" + year);\r\n        }\r\n        else if(exp_date.length == 8) {\r\n          month = parseInt(exp_date.substring(0,2));\r\n          day = parseInt(exp_date.substring(2,4));\r\n          year = parseInt(exp_date.substring(4,8));\r\n          // console.log(month + \" \" + day + \" \" + year);\r\n        }\r\n        // console.log(\"FULL YEAR\", today.getFullYear() + \" \" + year);\r\n\r\n        //Handle if at the end of a year\r\n        if(today.getMonth() == 12) {\r\n          if(month == 12) {\r\n            if(today.getDay() <= day) {\r\n              itemsExpiring += 1;\r\n            }\r\n          }\r\n          if(month == 1 && today.getFullYear() + 1 == year) {\r\n            if(day <= 15) {\r\n              itemsExpiring += 1;\r\n            }\r\n          }\r\n        }//Next handle the general case\r\n        else if(today.getFullYear() == year) {\r\n          if(today.getMonth() == month && today.getDay() <= day) {\r\n            itemsExpiring += 1;\r\n          }\r\n          else if(today.getMonth() + 1 == month && today.getDay() > 15 && day <= 15) {\r\n            itemsExpiring += 1;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    let runningLow = 0;\r\n\r\n    // console.log(\"CHECKING ITEMS\");\r\n    const checkRunningLow = b.map( async (item) => {\r\n      // console.log(\"ITEM: \" + item.name);\r\n      let alreadyCounted = false;\r\n\r\n      if(item.weight != null) {\r\n        if(item.currWeight < item.weight * 0.3) {\r\n          runningLow += 1;\r\n          alreadyCounted = true;\r\n          // console.log(\"WEIGHT RUNNING LOW\");\r\n        }\r\n      }\r\n      if(item.quantity != null && !alreadyCounted) {\r\n        if(item.quantity <= 2 || item.quantity < item.origQuantity * 0.3) {\r\n          runningLow += 1;\r\n          // console.log(\"QUANTITY RUNNING LOW\");\r\n        }\r\n      }\r\n    });\r\n\r\n    // if(itemsExpiring > 0) {\r\n    //   console.log(\"User has items expiring soon\");\r\n    // }\r\n    // else {\r\n    //   console.log(\"User has no items expiring soon\");\r\n    // }\r\n\r\n    // if(runningLow > 0) {\r\n    //   console.log(\"User has items running low\");\r\n    // }\r\n    // else {\r\n    //   console.log(\"User has no items running low\");\r\n    // }\r\n\r\n    if(!pantryData.data.getPantry.notifPending && (itemsExpiring > 0 || runningLow > 0)) {\r\n      console.log(\"Scheduling notification\");\r\n\r\n      const newestPantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      const curr_time = Date.now();\r\n\r\n      let test = \"\" + curr_time;\r\n\r\n      // console.log(\"curr_time: \" + test);\r\n\r\n      const pantryInput = {\r\n        id: user.username.toString(),\r\n        notifPending: true,\r\n        notifTime: test,\r\n      };\r\n\r\n      const old_time = newestPantryData.data.getPantry.notifTime\r\n      // console.log(\"OLD: \" + old_time + \" NEW: \" + test);\r\n\r\n      if(parseInt(old_time) + 1000 < curr_time) { // The purpose here is to prevent the user from getting multiple notifications at once\r\n        \r\n        const p = await API.graphql(graphqlOperation(updatePantry, {input: pantryInput}))\r\n        // console.log(\"NEW TIME: \" + test);\r\n        // console.log(\"ADDING\");\r\n        // console.log(\"Scheduling notification\");\r\n        // console.log(newestPantryData.data.getPantry.notifTime + ' ' + curr_time);\r\n\r\n        if(itemsExpiring > 0 && runningLow <= 0) {\r\n          await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n              title: \"SMART PANTRY\",\r\n              body: 'You have ' + itemsExpiring + ' item(s) expiring soon! Click here to view them.',\r\n              data: { data: 'View home menu' },\r\n            },\r\n            trigger: { seconds: pantryData.data.getPantry.notiffreq },\r\n          });\r\n        }\r\n        else if(itemsExpiring <= 0 && runningLow > 0) {\r\n          await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n              title: \"SMART PANTRY\",\r\n              body:\r\n                \"You have \" +\r\n                runningLow +\r\n                \" item(s) running low! Click here to view them.\",\r\n              data: { data: \"View home menu\" },\r\n            },\r\n            trigger: { seconds: pantryData.data.getPantry.notiffreq },\r\n          });\r\n        } else {\r\n          await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n              title: \"SMART PANTRY\",\r\n              body:\r\n                \"You have \" +\r\n                itemsExpiring +\r\n                \" item(s) expiring soon and \" +\r\n                runningLow +\r\n                \" item(s) running low! Click here to view them.\",\r\n              data: { data: \"View home menu\" },\r\n            },\r\n            trigger: { seconds: pantryData.data.getPantry.notiffreq },\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default HomeStackScreen;\r\n\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/Home.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "HomeStack",
    "memberof": "SmartPantry/screens/Home.js",
    "static": true,
    "longname": "SmartPantry/screens/Home.js~HomeStack",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "HomeScreen",
    "memberof": "SmartPantry/screens/Home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Home.js~HomeScreen",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "registerForPushNotificationsAsync",
    "memberof": "SmartPantry/screens/Home.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Home.js~registerForPushNotificationsAsync",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 409,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "schedulePushNotification",
    "memberof": "SmartPantry/screens/Home.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Home.js~schedulePushNotification",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 440,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "HomeStackScreen",
    "memberof": "SmartPantry/screens/Home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Home.js~HomeStackScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Home.js",
    "importStyle": "HomeStackScreen",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "SmartPantry/screens/ManualAdd.js",
    "content": "import React , {useState} from \"react\";\r\nimport {Input, Button} from \"react-native-elements\";\r\nimport { View, ScrollView} from \"react-native\";\r\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\r\nimport { createItem } from \"../mutations\";\r\n\r\n\r\nconst ManualAddScreen = ({ navigation }) => {\r\n\r\n    const [nameText, setNameText] = useState(\"\");\r\n    const [weightText, setWeightText] = useState(\"\");\r\n    const [quantityText, setQuantityText] = useState(\"\");\r\n\r\n    const addPantryItem = async () => {\r\n\r\n        if (nameText == \"\") {\r\n            return;\r\n        }\r\n\r\n        const user = await Auth.currentAuthenticatedUser();\r\n        const itemInput = {\r\n          name: nameText,\r\n          imagePath: \"default_img\",\r\n          weight: parseFloat(weightText),\r\n          quantity: parseInt(quantityText),\r\n          pantryItemsId: user.username.toString()\r\n        };\r\n        const inputItem = await API.graphql(graphqlOperation(createItem, {input: itemInput}));\r\n        navigation.navigate(\"AddItem\");\r\n    }\r\n\r\n    return (\r\n      <ScrollView contentContainerStyle={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n        <Input\r\n          placeholder=\"Name\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setNameText(value)}\r\n        />\r\n        <Input\r\n          placeholder=\"Weight (lbs.) (optional)\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setWeightText(value)}\r\n        />\r\n        <Input\r\n          placeholder=\"Quantity (optional)\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setQuantityText(value)}\r\n        />\r\n        <Button\r\n          buttonStyle={{ width: 200 }}\r\n          title=\"Submit\"\r\n          onPress={() => {\r\n            addPantryItem();\r\n          }}\r\n        ></Button>\r\n      </ScrollView>\r\n    );\r\n};\r\n\r\nexport default ManualAddScreen;\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/ManualAdd.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "ManualAddScreen",
    "memberof": "SmartPantry/screens/ManualAdd.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/ManualAdd.js~ManualAddScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/ManualAdd.js",
    "importStyle": "ManualAddScreen",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "SmartPantry/screens/MyInfo.js",
    "content": "import React, { Component } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  Button,\r\n  Alert,\r\n} from \"react-native\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport { getPantry, listItems } from \"../queries\";\r\n\r\n\r\nconst fetchInfo = async () => {\r\n    // alert(email);\r\n    try {\r\n        const user = await Auth.currentAuthenticatedUser();\r\n        // console.log(user);\r\n\r\n        const email = user.attributes.email;\r\n        const phone_number = user.attributes.phone_number;\r\n        // alert(phone_number);\r\n        const pantryStats = getPantryInfo(user);\r\n        \r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n\r\n    // alert(email);\r\n\r\n    return (\r\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n            <Text>\r\n                EMAIL\r\n            </Text>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst getPantryInfo = async (user) => {\r\n    try {\r\n        const pantryData = await API.graphql(\r\n            graphqlOperation(getPantry, { id: user.username.toString() })\r\n        );\r\n\r\n        if (pantryData.data.getPantry == null) {\r\n            const outputString = \"Email: \" + user.attributes.email + \"\\nPhone Number: \" + user.attributes.phone_number + \"\\nNo pantry information to display\"\r\n            Alert.alert(\"User Information\", outputString);\r\n            return null;\r\n        }\r\n        else {\r\n\r\n            const pantryName = pantryData.data.getPantry.name;\r\n            const dateCreated = pantryData.data.getPantry.createdAt;\r\n            const dateUpdated = pantryData.data.getPantry.updatedAt;\r\n\r\n            const pantryId = pantryData.data.getPantry.id;\r\n\r\n            const itemsList = await API.graphql(\r\n                graphqlOperation(listItems, {\r\n                filter: {\r\n                    pantryItemsId: {\r\n                    eq: pantryId.toString(),\r\n                    },\r\n                },\r\n                })\r\n            );\r\n\r\n            const b = itemsList.data.listItems.items;\r\n\r\n            let itemCount = 0;\r\n\r\n            const countItems = b.map( async (item) => {\r\n                itemCount += 1;\r\n            });\r\n\r\n            let outputString = \"Email: \" + user.attributes.email + \"\\nPhone Number: \" + user.attributes.phone_number + \"\\nPantry Name: \" + pantryName;\r\n            outputString += \"\\nPantry Create Date: \" + dateCreated + \"\\nLast Pantry Update: \" + dateUpdated + \"\\nSize of Pantry: \" + itemCount;\r\n\r\n            Alert.alert(\"User Information\", outputString)\r\n            //NOTE: Whenever this is finalized, it would probably be best to display a more user-friendly piece of data than a timestamp (basically just make it more legible)\r\n        }\r\n\r\n    } catch(err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nconst MyInfoScreen = ({ navigation }) => {\r\n    return (\r\n        <View>\r\n            <Text>The button below is a temporary solution until async text can be displayed to the screen. -Kollin</Text>\r\n            <Button\r\n            onPress={ async () => {\r\n                await fetchInfo();\r\n            }}\r\n            title=\"Click here to see your information\"\r\n            color=\"green\"\r\n            accessibilityLabel=\"Click here to see your information\"\r\n        />\r\n      </View>\r\n    );\r\n};\r\n\r\nexport default MyInfoScreen;",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/MyInfo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "fetchInfo",
    "memberof": "SmartPantry/screens/MyInfo.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/MyInfo.js~fetchInfo",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/MyInfo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "getPantryInfo",
    "memberof": "SmartPantry/screens/MyInfo.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/MyInfo.js~getPantryInfo",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/MyInfo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "MyInfoScreen",
    "memberof": "SmartPantry/screens/MyInfo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/MyInfo.js~MyInfoScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/MyInfo.js",
    "importStyle": "MyInfoScreen",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "SmartPantry/screens/Notifications.js",
    "content": "\r\nimport React, {useState, useRef, useEffect } from 'react';\r\nimport {\r\n  SafeAreaView,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Animated,\r\n  PanResponder,\r\n  Button,\r\n  Alert,\r\n  Platform,\r\n} from 'react-native';\r\n// import { Notifications } from 'expo';\r\nimport PushNotification from 'react-native-push-notification';\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport { getPantry } from \"../queries\";\r\nimport { deletePantry, updatePantry } from \"../mutations\";\r\nimport Constants from 'expo-constants';\r\nimport * as Notifications from 'expo-notifications';\r\n// import * as Permissions from 'expo-permissions';\r\n\r\nconst updateFrequency = async ( new_frequency ) => {\r\n    try {\r\n      \r\n\r\n      const user = await Auth.currentAuthenticatedUser(); // returns cognito user JSON\r\n\r\n      const pantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      if (pantryData.data.getPantry == null) {\r\n        Alert.alert(\"Notifications\", \"You must have a pantry to select a notification frequency\");\r\n        return null;\r\n      } else {\r\n\r\n        const pantryInput = {\r\n          notiffreq: new_frequency,\r\n        }\r\n\r\n        const update = {\r\n          id: user.username.toString(),\r\n          notiffreq: new_frequency,\r\n        }\r\n\r\n        const u = await API.graphql(graphqlOperation(updatePantry, {input: update}));\r\n\r\n      const pantryData2 = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      Alert.alert(\"Notifications\", \"Your notification frequency will be set to: \" + new_frequency);\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: false,\r\n    shouldSetBadge: false,\r\n  }),\r\n});\r\n\r\nconst NotificationsScreen = () => {\r\n  // fetchItems();\r\n  // ReceiveNotification();\r\n  try {\r\n    const [expoPushToken, setExpoPushToken] = useState('');\r\n    const [notification, setNotification] = useState(false);\r\n    const notificationListener = useRef();\r\n    const responseListener = useRef();\r\n\r\n    useEffect( () => {\r\n      registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n\r\n      notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n        setNotification(notification);\r\n      });\r\n\r\n      responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n        console.log(response);\r\n      });\r\n\r\n      return () => {\r\n        Notifications.removeNotificationSubscription(notificationListener.current);\r\n        Notifications.removeNotificationSubscription(responseListener.current);\r\n      };\r\n    }, []);\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n\r\n  const [sliderDimensions, setSliderDimensions] = useState({\r\n    height: null,\r\n    top: null,\r\n    bottom: null,\r\n  });\r\n\r\n  const stepperAnim = useRef(new Animated.Value(0)).current;\r\n  const railFillAnim = useRef(new Animated.Value(0)).current;\r\n\r\n  const stepperResponder = PanResponder.create({\r\n    onStartShouldSetPanResponder: () => true,\r\n    onPanResponderGrant: () => {\r\n      stepperAnim.setOffset(stepperAnim._value);\r\n      railFillAnim.setOffset(railFillAnim._value);\r\n    },\r\n    onPanResponderMove: (evt, {dy, moveY}) => {\r\n      if (moveY > sliderDimensions.top && moveY < sliderDimensions.bottom) {\r\n        stepperAnim.setValue(dy);\r\n        railFillAnim.setValue(-dy);\r\n      }\r\n    },\r\n    onPanResponderRelease: () => {\r\n      stepperAnim.flattenOffset();\r\n      railFillAnim.flattenOffset();\r\n    },\r\n  });\r\n\r\n  let outer_y = 200;\r\n\r\n  return (\r\n    // The following code was used for the slider, which at the moment we are no longer using\r\n    // <SafeAreaView>\r\n    //   <Text style={styles.title}>How often would you like to receive notifications?</Text>\r\n    //   <View\r\n    //     style={styles.slider}\r\n    //     onLayout={(evt) => {\r\n    //       let {height, y} = evt.nativeEvent.layout;\r\n    //       outer_y = y;\r\n\r\n    //       setSliderDimensions({\r\n    //         height: height,\r\n    //         top: y,\r\n    //         bottom: y + height,\r\n    //       });\r\n\r\n    //     //   UpdatePreference(y);\r\n    //     }}>\r\n    //     <View style={styles.rail}>\r\n    //       <Animated.View style={[styles.railFill, {height: railFillAnim}]}>\r\n    //         {sliderDimensions.height\r\n    //           ? Array.apply(\r\n    //               null,\r\n    //               Array(Math.floor(sliderDimensions.height / 10)),\r\n    //             ).map((item, index) => (\r\n    //               <View\r\n    //                 key={index}\r\n    //                 style={[styles.railFillSpace, {bottom: index * 10}]}\r\n    //               />\r\n    //             ))\r\n    //           : null}\r\n    //       </Animated.View>\r\n    //     </View>\r\n    //     <Animated.View\r\n    //       {...stepperResponder.panHandlers}\r\n    //       style={[\r\n    //         styles.stepper,\r\n    //         {\r\n    //           transform: [{translateY: stepperAnim}],\r\n    //         },\r\n    //       ]}\r\n\r\n    //     //   { ...outer_y += 10 }\r\n    //     />\r\n    //   </View>\r\n    <SafeAreaView>\r\n      <Text>Please select how often you would like to receive notifications about your pantry:</Text>\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(60);\r\n        }}\r\n        title=\"1 Minute\"\r\n        color=\"black\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 / 24);\r\n        }}\r\n        title=\"1 Hour\"\r\n        color=\"#431005\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 / 12);\r\n        }}\r\n        title=\"2 Hours\"\r\n        color=\"#571607\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 / 3);\r\n        }}\r\n        title=\"8 Hours\"\r\n        color=\"#671B0B\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 / 2);\r\n        }}\r\n        title=\"12 Hours\"\r\n        color=\"#79220F\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400);\r\n        }}\r\n        title=\"1 Day\"\r\n        color=\"#8E2913\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 * 2);\r\n        }}\r\n        title=\"2 Days\"\r\n        color=\"#A32E15\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 * 7);\r\n        }}\r\n        title=\"1 Week\"\r\n        color=\"#B33216\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 * 14);\r\n        }}\r\n        title=\"2 Weeks\"\r\n        color=\"#DA330F\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 * 30);\r\n        }}\r\n        title=\"1 Month\"\r\n        color=\"#F3330A\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={() => {\r\n            updateFrequency(86400 * 90);\r\n        }}\r\n        title=\"3 Months\"\r\n        color=\"#FF4C26\"\r\n        accessibilityLabel=\"Click here to confirm your notification preference\"\r\n      />\r\n      <Button\r\n        onPress={ async () => {\r\n            alert(\"You will receive a notification in a few seconds\")\r\n            await schedulePushNotification();\r\n        }}\r\n        title=\"Click here to test notifications\"\r\n        color=\"blue\"\r\n        accessibilityLabel=\"Click here to test notifications\"\r\n      />\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  title: {\r\n    textAlign: 'center',\r\n    fontSize: 20,\r\n    marginVertical: 50,\r\n    marginBottom: 100,\r\n  },\r\n  slider: {\r\n    marginVertical: 50,\r\n    width: 50,\r\n    height: '40%',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    position: 'relative',\r\n    marginBottom: 0,\r\n  },\r\n  rail: {\r\n    width: 20,\r\n    height: '50%',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    backgroundColor: '#DBDBDB',\r\n  },\r\n  stepper: {\r\n    width: '100%',\r\n    height: 15,\r\n    backgroundColor: 'gray',\r\n  },\r\n  railFill: {\r\n    width: '100%',\r\n    backgroundColor: 'lightgreen',\r\n    position: 'absolute',\r\n    bottom: 0,\r\n  },\r\n  railFillSpace: {\r\n    height: 5,\r\n    width: '100%',\r\n    backgroundColor: 'white',\r\n    position: 'absolute',\r\n  },\r\n});\r\n\r\nasync function schedulePushNotification() {\r\n  await Notifications.scheduleNotificationAsync({\r\n    content: {\r\n      title: \"SMART PANTRY\",\r\n      body: 'Don\\'t forget to keep your pantry up to date!',\r\n      data: { data: 'goes here' },\r\n    },\r\n    trigger: { seconds: 20 },\r\n  });\r\n}\r\n\r\nasync function registerForPushNotificationsAsync() {\r\n  let token;\r\n  if (Constants.isDevice) {\r\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Notifications.requestPermissionsAsync();\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== 'granted') {\r\n      alert('Failed to get push token for push notification!');\r\n      return;\r\n    }\r\n    token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    console.log(token);\r\n  } else {\r\n    alert('Must use physical device for Push Notifications');\r\n  }\r\n\r\n  if (Platform.OS === 'android') {\r\n    Notifications.setNotificationChannelAsync('default', {\r\n      name: 'default',\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: '#FF231F7C',\r\n    });\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\nexport default NotificationsScreen;\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/Notifications.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "updateFrequency",
    "memberof": "SmartPantry/screens/Notifications.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Notifications.js~updateFrequency",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Notifications.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "new_frequency",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "styles",
    "memberof": "SmartPantry/screens/Notifications.js",
    "static": true,
    "longname": "SmartPantry/screens/Notifications.js~styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Notifications.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "schedulePushNotification",
    "memberof": "SmartPantry/screens/Notifications.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Notifications.js~schedulePushNotification",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Notifications.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 316,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "registerForPushNotificationsAsync",
    "memberof": "SmartPantry/screens/Notifications.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Notifications.js~registerForPushNotificationsAsync",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Notifications.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 327,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "NotificationsScreen",
    "memberof": "SmartPantry/screens/Notifications.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Notifications.js~NotificationsScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Notifications.js",
    "importStyle": "NotificationsScreen",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "SmartPantry/screens/OtherPantry.js",
    "content": "import { getPantry, listPantries } from \"../queries\";\r\n// import { Button } from \"react-native-elements\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\n\r\nimport React, { useState, useEffect, Component } from \"react\";\r\nimport {Text,View, SafeAreaView, StyleSheet ,ScrollView, Modal, Alert, Button } from \"react-native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport {Icon, Input} from 'react-native-elements';\r\nimport CreatePantryScreen from \"./CreatePantry\";\r\nimport AddItemScreen from \"./AddItem\";\r\nimport ManualAddScreen from \"./ManualAdd\";\r\nimport { listItems, getItem } from \"../queries.js\";\r\nimport { createItem, deleteItem, updateItem, createShoppingList } from \"../mutations\";\r\nimport BarcodeAddScreen from \"./BarcodeAdd\";\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport { StatusBar } from \"expo-status-bar\";  \r\n\r\n\r\nconst OtherPantryScreen = ({ navigation }) => {\r\n    // viewOtherPantry();\r\n\r\n    // useState variables to track whether to render the create pantry button\r\n  // the value of the pantry items, and if a user has a pantry.\r\n  const [createPantryButton, setCreatePantryButton] = useState(null);\r\n  const [items, setItems] = useState([]);\r\n  const [pantryExists, setPantryExists] = useState(false);\r\n  const [pantryName, setPantryName] = useState(\"\");\r\n  const [nameText, setNameText] = useState(\"\");\r\n  const [weightText, setWeightText] = useState(\"\");\r\n  const [quantityText, setQuantityText] = useState(\"\");\r\n  const [itemId, setItemId] = useState(null);\r\n\r\n   const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n   const handleModal = () => setIsModalVisible(() => !isModalVisible);\r\n\r\n  // Loads when you come back to this screen\r\n  // refreshes each time you go back to the screen\r\n  // Checks if a pantry exists and fetches the user's items on every load\r\n  useEffect(() => {\r\n    const unsubscribe = navigation.addListener(\"focus\", () => {\r\n      checkIfPantryExists();\r\n      fetchItems();\r\n    });\r\n    return unsubscribe;\r\n  }, [navigation, items]);\r\n\r\n  // fetches just the items of the pantry that belongs to the current authenticated user\r\n  const fetchItems = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // returns cognito user JSON\r\n\r\n      // Performs the getPantry query based on the id, which is the user's username\r\n\r\n    //   const user = await Auth.currentAuthenticatedUser();\r\n  \r\n      const pantriesList = await API.graphql(\r\n        graphqlOperation(listPantries, {\r\n        filter: {\r\n            collabId: {\r\n            eq: user.attributes.email,\r\n            },\r\n        },\r\n        })\r\n      );\r\n\r\n      const c = pantriesList.data.listPantries.items;\r\n\r\n    //   console.log(c[0].name);\r\n\r\n      if(c.length > 0) {\r\n        //NOTE: As of 3/27/2022, it may be the case that a collaborator can view multiple pantries\r\n\r\n        //   const collabPantries = c.map( async (pantry) => {\r\n        const pantryData = await API.graphql(graphqlOperation(getPantry, { id: c[0].id }));\r\n\r\n            //  console.log(pantryData.data.getPantry.name);\r\n\r\n        if (pantryData.data.getPantry != null) {\r\n            setPantryExists(true);\r\n            setPantryName(pantryData.data.getPantry.name);\r\n        } else {\r\n            setPantryExists(false);\r\n        }\r\n        \r\n            //   // Grabs the id field from the pantry data\r\n              const pantryId = pantryData.data.getPantry.id;\r\n        \r\n              // Grabs the items that are related to the id of the pantry\r\n              const itemsList = await API.graphql(\r\n                graphqlOperation(listItems, {\r\n                  filter: {\r\n                    pantryItemsId: {\r\n                      eq: pantryId.toString(),\r\n                    },\r\n                  },\r\n                })\r\n              );\r\n        \r\n            //   // stores the value of the items returned\r\n              const b = itemsList.data.listItems.items;\r\n        \r\n            //   // changes the value of useState items value\r\n              setItems(b);\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n\r\n  // add an item to the shopping list upon deleting it from the pantry, if the user wishes\r\n  const addToShoppingList = async (itemID, name) => {\r\n    try {\r\n        // console.log(itemID, name);\r\n\r\n      const user = await Auth.currentAuthenticatedUser();\r\n    //   console.log(user.username.toString());\r\n      const pantryData = await API.graphql(\r\n          graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      if (pantryData.data.getPantry == null) {\r\n        Alert.alert(\"Shopping List Error\", \"You must create a pantry before you can add items to your shopping list\");\r\n        return null;\r\n      }\r\n\r\n      const id = {\r\n        name: name,\r\n        imagePath: \"default_img\",\r\n        shoppingListItemsId: user.username.toString()\r\n      }\r\n      const d = await API.graphql(graphqlOperation(createItem,{input: id} ));\r\n\r\n      Alert.alert(\"Add to Shopping List\", \"Added \\\"\" + name + \"\\\" to shopping list\");\r\n\r\n    } catch (err) { \r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  // list of items from pantry\r\n  const listOfItems = items.map((item) => {\r\n    let percentage = (parseFloat(item.currWeight) / parseFloat(item.weight) * 100).toFixed(2);\r\n    return (\r\n      <View key={item.id}>\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            paddingHorizontal: 20,\r\n            paddingBottom: 20,\r\n            paddingTop: 20,\r\n          }}\r\n        >\r\n          <Text\r\n            style={{paddingLeft: 15, width: \"50%\", flexDirection: \"column\", fontSize: 18 }}\r\n          >\r\n            {item.name + '\\n'}\r\n            {item.quantity && <Text style={{fontSize: 15, fontWeight: 'bold'}}>Quantity: {item.quantity}</Text>}\r\n            {item.weight && <Text style={{fontSize: 15, fontWeight: \"bold\"}}>Percentage left: {percentage}%</Text>}\r\n          </Text>\r\n          <Button buttonStyle={{ backgroundColor: 'grey', width: 75, marginRight: 5 }} title=\"add to shopping list\" onPress={() => {\r\n            addToShoppingList(item.id, item.name);\r\n          }}>\r\n          </Button>\r\n        </View>\r\n        <View style={{ height: 1.2, backgroundColor: \"grey\" }} />\r\n      </View>\r\n    );\r\n  });\r\n\r\n\r\n  // checks whether or not a user has a pantry yet\r\n  const checkIfPantryExists = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // grabs current user's information\r\n\r\n      // Performs the getPantry query based on user's id\r\n      const pantryData = await API.graphql(\r\n        graphqlOperation(getPantry, { id: user.username.toString() })\r\n      );\r\n\r\n      // If it's null, we want to render the create pantry button\r\n      // otherwise, we want to hide it\r\n      if (pantryData.data.getPantry == null) {\r\n        setCreatePantryButton(true);\r\n      } else {\r\n        setCreatePantryButton(null);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <ScrollView\r\n        contentContainerStyle={{\r\n          flexGrow: 1,\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        {!pantryExists && <Text>You are not a collaborator for any pantries</Text>}\r\n        {pantryExists && (\r\n          <View\r\n            style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}\r\n          >\r\n            <Text style={{ fontSize: 25, marginBottom: 15 }}>{pantryName}</Text>\r\n\r\n            <View>{listOfItems}</View>\r\n          </View>\r\n        )}\r\n      </ScrollView>\r\n  );\r\n  \r\n    return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n      \r\n    </View>\r\n  );\r\n};\r\n\r\nexport default OtherPantryScreen;",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/OtherPantry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "OtherPantryScreen",
    "memberof": "SmartPantry/screens/OtherPantry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/OtherPantry.js~OtherPantryScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/OtherPantry.js",
    "importStyle": "OtherPantryScreen",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "SmartPantry/screens/PatchNotes.js",
    "content": "import React, { Component } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n} from \"react-native\";\r\n\r\nconst PatchNotesScreen = ({ navigation }) => {\r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n      <Text>This app is currently in its alpha testing phase</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default PatchNotesScreen;",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/PatchNotes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "PatchNotesScreen",
    "memberof": "SmartPantry/screens/PatchNotes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/PatchNotes.js~PatchNotesScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/PatchNotes.js",
    "importStyle": "PatchNotesScreen",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "SmartPantry/screens/Profile.js",
    "content": "import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  ScrollView,\r\n  Dimensions,\r\n  ImageBackground,\r\n  StyleSheet,\r\n  Platform,\r\n  Image\r\n} from \"react-native\";\r\nimport GalleryComponent from './../src/components/GalleryComponent';\r\n\r\n\r\n\r\n\r\nconst ProfileScreen = ({ navigation }) => {\r\n  return (\r\n    <ScrollView\r\n      style={{ flex: 1, backgroundColor: \"#fff\" }}\r\n      showsVerticalScrollIndicator={false}\r\n    >\r\n      <ImageBackground\r\n        source={require(\"../assets/images/bg.jpg\")}\r\n        style={{ height: Dimensions.get(\"window\").height / 4 }}\r\n      >\r\n        <View style={Styles.brandView}>\r\n          <Text style={Styles.brandViewText}></Text>\r\n        </View>\r\n      </ImageBackground>\r\n      <View style={Styles.bottomView}>\r\n        <View style={{ padding: 40 }}>\r\n          <View style={{ margin: 20 }}>\r\n            <Text>Profile Photo</Text>\r\n            <GalleryComponent></GalleryComponent>\r\n          </View>\r\n\r\n          <View style={Styles.forgotPassView}>\r\n            <View style={{ flex: 1, marginLeft: -20 }}></View>\r\n            <View style={{ flex: 1, marginRight: 0 }}></View>\r\n          </View>\r\n\r\n          <View\r\n            style={{\r\n              height: 100,\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          ></View>\r\n          <View\r\n            style={{ marginBottom: 0, flex: 1, alignItems: \"center\" }}\r\n          ></View>\r\n        </View>\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default ProfileScreen;\r\n\r\nconst Styles = StyleSheet.create({\r\n  brandView: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  brandViewText: {\r\n    color: \"black\",\r\n    fontSize: 45,\r\n    fontWeight: \"bold\",\r\n    textTransform: \"uppercase\",\r\n    backgroundColor: \"white\",\r\n    padding: 5,\r\n    borderRadius: 20,\r\n  },\r\n  bottomView: {\r\n    flex: 1.5,\r\n    backgroundColor: \"white\",\r\n    bottom: 50,\r\n    borderTopStartRadius: 60,\r\n    borderTopEndRadius: 60,\r\n  },\r\n  textInputs: {\r\n    height: 40,\r\n    width: 250,\r\n    margin: 10,\r\n    borderWidth: 1,\r\n    padding: 10,\r\n    borderRadius: 15,\r\n  },\r\n  forgotPassView: {\r\n    height: 50,\r\n    marginTop: 5,\r\n    flexDirection: \"row\",\r\n  },\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/Profile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "Styles",
    "memberof": "SmartPantry/screens/Profile.js",
    "static": true,
    "longname": "SmartPantry/screens/Profile.js~Styles",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Profile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "ProfileScreen",
    "memberof": "SmartPantry/screens/Profile.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Profile.js~ProfileScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Profile.js",
    "importStyle": "ProfileScreen",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "SmartPantry/screens/Settings.js",
    "content": "import React, { Component, useState } from \"react\";\r\nimport {Text,View, Switch, Alert, ScrollView } from \"react-native\";\r\nimport {Icon, Button} from \"react-native-elements\";\r\nimport {Auth, API, graphqlOperation } from 'aws-amplify';\r\nimport MyInfoScreen from \"./MyInfo\";\r\nimport AccountsScreen from \"./Accounts\";\r\nimport NotificationsScreen from \"./Notifications\";\r\nimport HelpScreen from \"./Help\";\r\nimport AboutScreen from \"./About\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport { deletePantry, deleteShoppingList, deleteItem } from \"../mutations\";\r\nimport { getPantry, listItems, getShoppingList } from \"../queries\";\r\nimport OtherPantryScreen from \"./OtherPantry\";\r\nimport CreditsScreen from \"./Credits\";\r\nimport PatchNotesScreen from \"./PatchNotes\";\r\n\r\nconst handleSignOut = () => {\r\n    Alert.alert(\"Sign Out\", \"Do you want to sign out?\", [\r\n      {\r\n        text: \"Yes\",\r\n        onPress: () => Auth.signOut(),\r\n      },\r\n      {\r\n        text: \"No\",\r\n        style: \"cancel\",\r\n      },\r\n    ]);\r\n}\r\n\r\nconst SettingsStack = createStackNavigator();\r\n\r\nconst SettingsStackScreen = () => {\r\n  return (\r\n    <SettingsStack.Navigator screenOptions={{\r\n      headerBackTitleVisible: false\r\n    }}>\r\n      <SettingsStack.Screen options={{headerShown: false}}name=\"SettingsStack\" component={Settings} />\r\n      <SettingsStack.Screen name=\"Collaborator Pantry\" component={OtherPantryScreen} />\r\n      <SettingsStack.Screen name=\"My Info\" component={MyInfoScreen} />\r\n      <SettingsStack.Screen name=\"Accounts\" component={AccountsScreen} />\r\n      <SettingsStack.Screen name=\"Notifications\" component={NotificationsScreen} />\r\n      <SettingsStack.Screen name=\"Help\" component={HelpScreen} />\r\n      <SettingsStack.Screen name=\"About\" component={AboutScreen} />\r\n      <SettingsStack.Screen name=\"Credits\" component={CreditsScreen} />\r\n      <SettingsStack.Screen name=\"PatchNotes\" component={PatchNotesScreen} />\r\n    </SettingsStack.Navigator>\r\n  );\r\n};\r\n\r\nconst Settings = ({navigation}) => {\r\n\r\n\r\n    // Contains the settings options, each has a title, subtitle, and what to do when pressed\r\n    const settingsOptions = [\r\n      { title: \"Collaborator Pantry\",\r\n        subTitle: \"View another user's pantry\",\r\n         onPress: () => {\r\n          navigation.navigate(\"Collaborator Pantry\");\r\n      } },\r\n      { title: \"My Info\", subTitle: \"Setup your profile\", onPress: () => {\r\n          navigation.navigate(\"My Info\");\r\n      } },\r\n      { title: \"Accounts\",\r\n        subTitle: \"View other pantries and manage who can view yours\",\r\n         onPress: () => {\r\n          navigation.navigate(\"Accounts\");\r\n      } },\r\n      {\r\n        title: \"Notifications\",\r\n        subTitle: \"Manage your notifications\",\r\n        onPress: () => {\r\n          navigation.navigate(\"Notifications\");\r\n        },\r\n      },\r\n      { title: \"Help\", subTitle: \"Help page\", onPress: () => {\r\n          navigation.navigate(\"Help\");\r\n      } },\r\n      { title: \"About\",\r\n        subTitle: \"Learn about your Smart Pantry app\", \r\n        onPress: () => {\r\n          navigation.navigate(\"About\");\r\n      } },\r\n      { title: \"Credits\",\r\n        subTitle: \"About the creators\",\r\n        onPress: () => {\r\n        navigation.navigate(\"Credits\");\r\n      } },\r\n      { title: \"Patch Notes\",\r\n      subTitle: \"See what's new in the latest update\",\r\n      onPress: () => {\r\n      navigation.navigate(\"PatchNotes\");\r\n    } },\r\n      {\r\n        title: \"Sign Out\",\r\n        subTitle: \"Sign out of app\",\r\n        onPress: () => {\r\n          Alert.alert(\"Sign Out\", \"Do you want to sign out?\", [\r\n            {\r\n              text: \"Yes\",\r\n              onPress: () => Auth.signOut(),\r\n            },\r\n            {\r\n              text: \"No\",\r\n              style: \"cancel\",\r\n            },\r\n          ]);\r\n        },\r\n      },\r\n      {\r\n        title: \"Delete Pantry\",\r\n        subTitle: \"Delete your pantry\",\r\n        onPress: () => {\r\n          Alert.alert(\"Delete Pantry\", \"Would you like to delete your pantry? Doing so will also delete your Shopping List\", [\r\n            {\r\n              text: \"Yes\",\r\n              onPress: () => {\r\n                  deleteUserPantry();\r\n              }\r\n            },\r\n            {\r\n              text: \"No\",\r\n              style: \"cancel\",\r\n            }\r\n          ])\r\n        }\r\n      }\r\n    ];\r\n    return (\r\n        <ScrollView style={{backgroundColor: 'white'}}>\r\n            {settingsOptions.map(({title,subTitle,onPress}) => \r\n            <TouchableOpacity key={title} onPress={onPress}>\r\n                <View style={{\r\n                    paddingHorizontal: 20,\r\n                    paddingBottom: 20,\r\n                    paddingTop: 20\r\n                }}>\r\n                    <Text style={{fontSize: 17}}>{title}</Text>\r\n                    {subTitle && <Text style={{fontSize:13, color:'grey', paddingTop:5}}>{subTitle}</Text>}\r\n                </View>\r\n                <View style={{height: 1.2, backgroundColor: 'grey'}}/>\r\n            </TouchableOpacity>)}\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nconst deleteUserPantry = async () => {\r\n  try {\r\n    const user = await Auth.currentAuthenticatedUser();\r\n\r\n    const pantryData = await API.graphql(\r\n      graphqlOperation(getPantry, { id: user.username.toString() })\r\n    );\r\n\r\n      // if the getPantry query does not return a null value, sets pantry exists to true\r\n      // otherwise sets it to false because they don't have a pantry yet\r\n      if (pantryData.data.getPantry == null) {\r\n        Alert.alert(\"Delete Pantry\", \"You do not have a pantry\");\r\n      }\r\n      else {\r\n\r\n      // Grabs the id field from the pantry data\r\n      const pantryId = pantryData.data.getPantry.id;\r\n\r\n      // Grabs the items that are related to the id of the pantry\r\n      const itemsList = await API.graphql(\r\n        graphqlOperation(listItems, {\r\n          filter: {\r\n            pantryItemsId: {\r\n              eq: pantryId.toString(),\r\n            },\r\n          },\r\n        })\r\n      );\r\n\r\n      // stores the value of the items returned\r\n      const b = itemsList.data.listItems.items;\r\n      // alert(JSON.stringify(itemsList.data.listItems.items));\r\n      const deleteAllItems = b.map( async (item) => {\r\n        const deletionId = {\r\n          id: item.id,\r\n        };\r\n        const delPantryItem = await API.graphql(graphqlOperation(deleteItem, { input: deletionId }));\r\n      });\r\n\r\n      const shoppingListData = await API.graphql(\r\n        graphqlOperation(getShoppingList, { id: user.username.toString() })\r\n      );\r\n\r\n      const shoppingListId = shoppingListData.data.getShoppingList.id;\r\n\r\n      const shoppingItemsList = await API.graphql(\r\n        graphqlOperation(listItems, {\r\n          filter: {\r\n            shoppingListItemsId: {\r\n              eq: shoppingListId.toString(),\r\n            },\r\n          },\r\n        })\r\n      );\r\n\r\n      const c = shoppingItemsList.data.listItems.items;\r\n\r\n      const deleteAllShoppingItems = c.map( async (item) => {\r\n        const deletionId = {\r\n          id: item.id,\r\n        };\r\n        const delPantryItem = await API.graphql(graphqlOperation(deleteItem, { input: deletionId }));\r\n      });\r\n\r\n      const delId = {\r\n        id: user.username.toString()\r\n      }\r\n\r\n      const delPantry = await API.graphql(graphqlOperation(deletePantry, { input: delId }));\r\n\r\n      const delShopping = await API.graphql(graphqlOperation(deleteShoppingList, { input: delId }));\r\n\r\n      Alert.alert(\"Delete Pantry\", \"Your pantry and has been deleted\");\r\n    }\r\n\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport default SettingsStackScreen;",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/Settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "handleSignOut",
    "memberof": "SmartPantry/screens/Settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Settings.js~handleSignOut",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "SettingsStack",
    "memberof": "SmartPantry/screens/Settings.js",
    "static": true,
    "longname": "SmartPantry/screens/Settings.js~SettingsStack",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "Settings",
    "memberof": "SmartPantry/screens/Settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Settings.js~Settings",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "deleteUserPantry",
    "memberof": "SmartPantry/screens/Settings.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "SmartPantry/screens/Settings.js~deleteUserPantry",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "SettingsStackScreen",
    "memberof": "SmartPantry/screens/Settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Settings.js~SettingsStackScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Settings.js",
    "importStyle": "SettingsStackScreen",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "SmartPantry/screens/Shopping.js",
    "content": "import React, { useState, useEffect, Component } from \"react\";\r\nimport { Text, View, Switch, Alert, ScrollView, Modal, StyleSheet, SafeAreaView } from \"react-native\";\r\nimport { Icon, Button, Input } from \"react-native-elements\";\r\nimport AboutScreen from \"./About\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport CreatePantryScreen from \"./CreatePantry\";\r\nimport { getShoppingList, listItems, getItem } from \"../queries\";\r\nimport { createItem, deleteItem, updateItem, createShoppingList } from \"../mutations\";\r\nimport AddShoppingListItemScreen from \"./AddShoppingListItem\";\r\nimport {Auth, API, graphqlOperation} from 'aws-amplify';\r\nimport ManualAddScreen from \"./ManualAdd\";\r\nimport BarcodeAddScreen from \"./BarcodeAdd\";\r\nimport { StatusBar } from \"expo-status-bar\";\r\n\r\n\r\nconst ShoppingStack = createStackNavigator();\r\n\r\nconst ShoppingStackScreen = () => {\r\n  return (\r\n    <ShoppingStack.Navigator>\r\n      <ShoppingStack.Screen\r\n        options={{ headerShown: false }}\r\n        name=\"SettingsStack\"\r\n        component={Shopping}\r\n      />\r\n      <ShoppingStack.Screen\r\n          options={{ headerShown: true, title: \"Add Item\" }}\r\n          name=\"AddShoppingListItem\"\r\n          component={AddShoppingListItemScreen}\r\n        />\r\n    </ShoppingStack.Navigator>\r\n  );\r\n};\r\n\r\nconst Shopping = ({navigation}) => {\r\n  const [shoppingListButton, setShoppingListButton] = useState(null);\r\n  const [items, setItems] = useState([]);\r\n  const [shoppingListExists, setShoppingListExists] = useState(false);\r\n  const [shoppingListName, setShoppingListName] = useState(\"\");\r\n  const [nameText, setNameText] = useState(\"\");\r\n  const [itemId, setItemId] = useState(null);\r\n\r\n   const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n   const handleModal = () => setIsModalVisible(() => !isModalVisible);\r\n\r\n  // Loads when you come back to this screen\r\n  // refreshes each time you go back to the screen\r\n  // Checks if a shopping list exists and fetches the user's items on every load\r\n  useEffect(() => {\r\n    const unsubscribe = navigation.addListener(\"focus\", () => {\r\n      checkIfShoppingListExists();\r\n      fetchItems();\r\n    });\r\n    return unsubscribe;\r\n  }, [navigation, items]);\r\n\r\n  // fetches just the items of the shopping list that belongs to the current authenticated user\r\n  const fetchItems = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // returns cognito user JSON\r\n\r\n      // Performs the getShoppingList query based on the id, which is the user's username\r\n      const shoppingListData = await API.graphql(\r\n        graphqlOperation(getShoppingList, { id: user.username.toString() })\r\n      );\r\n\r\n      // if the getShoppingList query does not return a null value, sets shopping list exists to true\r\n      // otherwise sets it to false because they don't have a shopping list yet\r\n      if (shoppingListData.data.getShoppingList != null) {\r\n        setShoppingListExists(true);\r\n        setShoppingListName(shoppingListData.data.getShoppingList.name);\r\n      } else {\r\n        setShoppingListExists(false);\r\n      }\r\n\r\n      // Grabs the id field from the shopping list data\r\n      const shoppingListId = shoppingListData.data.getShoppingList.id;\r\n\r\n      // Grabs the items that are related to the id of the shopping list\r\n      const itemsList = await API.graphql(\r\n        graphqlOperation(listItems, {\r\n          filter: {\r\n            shoppingListItemsId: {\r\n              eq: shoppingListId.toString(),\r\n            },\r\n          },\r\n        })\r\n      );\r\n\r\n      // stores the value of the items returned\r\n      const b = itemsList.data.listItems.items;\r\n\r\n      // changes the value of useState items value\r\n      setItems(b);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // Update item\r\n  const updateShoppingListItem = async () => {\r\n\r\n    const item = await API.graphql(graphqlOperation(getItem, {id: itemId}));\r\n    // if item is updated to have 0 or less quantity, the item will automatically be deleted\r\n    if (!(item.quantity == null) && parseInt(quantityText) <= 0) {\r\n      deleteShoppingListItem(itemId);\r\n      handleModal();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Perform\r\n      const update = {\r\n        id: itemId,\r\n        name: nameText ? nameText : item.name,\r\n      }\r\n\r\n      const u = await API.graphql(graphqlOperation(updateItem, {input: update}));\r\n      setNameText(\"\");\r\n      fetchItems();\r\n      handleModal();\r\n    } catch (err) {\r\n\r\n    }\r\n  }\r\n\r\n  // delete item\r\n  const deleteShoppingListItem = async (deleteId) => {\r\n    try {\r\n      const id = {\r\n        id: deleteId\r\n      }\r\n      const d = await API.graphql(graphqlOperation(deleteItem,{input: id} ));\r\n      fetchItems();\r\n    } catch (err) { \r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const modalScreen = (\r\n    <Modal visible={isModalVisible} animationType=\"slide\">\r\n      <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n        <Text style={{fontSize: 25, fontWeight: \"bold\", margin: 10}}>Edit your item</Text>\r\n        <Input\r\n          placeholder=\"Name\"\r\n          containerStyle={{ width: 250 }}\r\n          onChangeText={(value) => setNameText(value)}\r\n        />\r\n        <Button\r\n          buttonStyle={{ width: 200, margin: 20}}\r\n          title=\"Submit\"\r\n          onPress={() => {\r\n            updatePantryItem();\r\n          }}\r\n        ></Button>\r\n        <Button buttonStyle={{width: 200}} title=\"Go back\" onPress={handleModal}></Button>\r\n      </View>\r\n    </Modal>\r\n  );\r\n\r\n  // list of items from shopping list\r\n  const listOfItems = items.map((item) => {\r\n    return (\r\n      <View key={item.id}>\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            paddingHorizontal: 20,\r\n            paddingBottom: 20,\r\n            paddingTop: 20,\r\n          }}\r\n        >\r\n          <Text\r\n            style={{paddingLeft: 15, width: \"50%\", flexDirection: \"column\", fontSize: 18 }}\r\n          >\r\n            {item.name + '\\n'}\r\n          </Text>\r\n          <Button  buttonStyle={{backgroundColor: 'red', width: 75, marginRight: 5}} title=\"delete\" onPress={() => {\r\n             Alert.alert(\"Delete Item\", \"Are you sure you want to delete item?\", [\r\n               {\r\n                 text: \"Yes\",\r\n                 onPress: () => { \r\n                    deleteShoppingListItem(item.id); // Uses amplify Auth library and signOut() method\r\n                },\r\n               },\r\n               {\r\n                 text: \"No\",\r\n                 style: \"cancel\",\r\n               },\r\n             ]);\r\n          }}></Button>\r\n        </View>\r\n        <View style={{ height: 1.2, backgroundColor: \"grey\" }} />\r\n      </View>\r\n    );\r\n  });\r\n\r\n\r\n  // checks whether or not a user has a shopping list yet\r\n  const checkIfShoppingListExists = async () => {\r\n    try {\r\n      const user = await Auth.currentAuthenticatedUser(); // grabs current user's information\r\n\r\n      // Performs the getShoppingList query based on user's id\r\n      const shoppingListData = await API.graphql(\r\n        graphqlOperation(getShoppingList, { id: user.username.toString() })\r\n      );\r\n\r\n      // If it's null, we want to render the create shopping list button\r\n      // otherwise, we want to hide it\r\n      if (shoppingListData.data.getShoppingList == null) {\r\n        setShoppingListButton(true);\r\n      } else {\r\n        setShoppingListButton(null);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <ScrollView\r\n        contentContainerStyle={{\r\n          flexGrow: 1,\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        {/* Conditional render based on the value of shoppingListButton and shoppingListExists */}\r\n        {/* {shoppingListButton && (\r\n          // <Button\r\n          //   buttonStyle={{ margin: 15 }}\r\n          //   title=\"Create Pantry\"\r\n          //   onPress={() => {\r\n          //     navigation.navigate(\"CreatePantry\");\r\n          //   }}\r\n          // ></Button>\r\n        )} */}\r\n        {!shoppingListExists && <Text>You must make a pantry before you make a shopping list</Text>}\r\n        {shoppingListExists && (\r\n          <View\r\n            style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}\r\n          >\r\n            <Text style={{ fontSize: 25, marginBottom: 15 }}>Shopping List</Text>\r\n            <Button\r\n              buttonStyle={{ width: 250 }}\r\n              title=\"Add Item\"\r\n              onPress={() => {\r\n                navigation.navigate(\"AddShoppingListItem\");\r\n              }}\r\n            ></Button>\r\n            <View>{listOfItems}</View>\r\n            <View>{modalScreen}</View>\r\n          </View>\r\n        )}\r\n      </ScrollView>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default ShoppingStackScreen;\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/screens/Shopping.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "ShoppingStack",
    "memberof": "SmartPantry/screens/Shopping.js",
    "static": true,
    "longname": "SmartPantry/screens/Shopping.js~ShoppingStack",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Shopping.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "Shopping",
    "memberof": "SmartPantry/screens/Shopping.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Shopping.js~Shopping",
    "access": "public",
    "export": false,
    "importPath": "smartpantry/SmartPantry/screens/Shopping.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"navigation\": *}"
        ],
        "defaultRaw": {
          "navigation": null
        },
        "defaultValue": "{\"navigation\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "ShoppingStackScreen",
    "memberof": "SmartPantry/screens/Shopping.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "SmartPantry/screens/Shopping.js~ShoppingStackScreen",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/screens/Shopping.js",
    "importStyle": "ShoppingStackScreen",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "SmartPantry/subscriptions.js",
    "content": "/* eslint-disable */\r\n// this is an auto generated file. This will be overwritten\r\n\r\nexport const onCreatePantry = /* GraphQL */ `\r\n  subscription OnCreatePantry {\r\n    onCreatePantry {\r\n      id\r\n      name\r\n      owner\r\n      items {\r\n        nextToken\r\n      }\r\n      notiffreq\r\n      collabId\r\n      notifPending\r\n      notifTime\r\n      email\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const onUpdatePantry = /* GraphQL */ `\r\n  subscription OnUpdatePantry {\r\n    onUpdatePantry {\r\n      id\r\n      name\r\n      owner\r\n      items {\r\n        nextToken\r\n      }\r\n      notiffreq\r\n      collabId\r\n      notifPending\r\n      notifTime\r\n      email\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const onDeletePantry = /* GraphQL */ `\r\n  subscription OnDeletePantry {\r\n    onDeletePantry {\r\n      id\r\n      name\r\n      owner\r\n      items {\r\n        nextToken\r\n      }\r\n      notiffreq\r\n      collabId\r\n      notifPending\r\n      notifTime\r\n      email\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const onCreateItem = /* GraphQL */ `\r\n  subscription OnCreateItem {\r\n    onCreateItem {\r\n      id\r\n      name\r\n      pantry {\r\n        id\r\n        name\r\n        owner\r\n        notiffreq\r\n        collabId\r\n        notifPending\r\n        notifTime\r\n        email\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      list {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      imagePath\r\n      weight\r\n      currWeight\r\n      quantity\r\n      origQuantity\r\n      expDate\r\n      createdAt\r\n      updatedAt\r\n      pantryItemsId\r\n      shoppingListItemsId\r\n    }\r\n  }\r\n`;\r\nexport const onUpdateItem = /* GraphQL */ `\r\n  subscription OnUpdateItem {\r\n    onUpdateItem {\r\n      id\r\n      name\r\n      pantry {\r\n        id\r\n        name\r\n        owner\r\n        notiffreq\r\n        collabId\r\n        notifPending\r\n        notifTime\r\n        email\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      list {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      imagePath\r\n      weight\r\n      currWeight\r\n      quantity\r\n      origQuantity\r\n      expDate\r\n      createdAt\r\n      updatedAt\r\n      pantryItemsId\r\n      shoppingListItemsId\r\n    }\r\n  }\r\n`;\r\nexport const onDeleteItem = /* GraphQL */ `\r\n  subscription OnDeleteItem {\r\n    onDeleteItem {\r\n      id\r\n      name\r\n      pantry {\r\n        id\r\n        name\r\n        owner\r\n        notiffreq\r\n        collabId\r\n        notifPending\r\n        notifTime\r\n        email\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      list {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      imagePath\r\n      weight\r\n      currWeight\r\n      quantity\r\n      origQuantity\r\n      expDate\r\n      createdAt\r\n      updatedAt\r\n      pantryItemsId\r\n      shoppingListItemsId\r\n    }\r\n  }\r\n`;\r\nexport const onCreateShoppingList = /* GraphQL */ `\r\n  subscription OnCreateShoppingList {\r\n    onCreateShoppingList {\r\n      id\r\n      items {\r\n        nextToken\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const onUpdateShoppingList = /* GraphQL */ `\r\n  subscription OnUpdateShoppingList {\r\n    onUpdateShoppingList {\r\n      id\r\n      items {\r\n        nextToken\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const onDeleteShoppingList = /* GraphQL */ `\r\n  subscription OnDeleteShoppingList {\r\n    onDeleteShoppingList {\r\n      id\r\n      items {\r\n        nextToken\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n",
    "static": true,
    "longname": "C:/Users/Ryan Mraz/Documents/SmartPantry/subscriptions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "onCreatePantry",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onCreatePantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onCreatePantry}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "onUpdatePantry",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onUpdatePantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onUpdatePantry}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "onDeletePantry",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onDeletePantry",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onDeletePantry}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "onCreateItem",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onCreateItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onCreateItem}",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "onUpdateItem",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onUpdateItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onUpdateItem}",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "onDeleteItem",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onDeleteItem",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onDeleteItem}",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "onCreateShoppingList",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onCreateShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onCreateShoppingList}",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "onUpdateShoppingList",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onUpdateShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onUpdateShoppingList}",
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "onDeleteShoppingList",
    "memberof": "SmartPantry/subscriptions.js",
    "static": true,
    "longname": "SmartPantry/subscriptions.js~onDeleteShoppingList",
    "access": "public",
    "export": true,
    "importPath": "smartpantry/SmartPantry/subscriptions.js",
    "importStyle": "{onDeleteShoppingList}",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# React Native Smart Pantry Application\r\n\r\n",
    "longname": "C:\\Users\\Ryan Mraz\\Documents\\SmartPantry\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"smartpantry\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"node_modules/expo/AppEntry.js\",\r\n  \"scripts\": {\r\n    \"start\": \"expo start\",\r\n    \"android\": \"expo start --android\",\r\n    \"ios\": \"expo start --ios\",\r\n    \"web\": \"expo start --web\",\r\n    \"eject\": \"expo eject\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@aws-amplify/ui-react\": \"^2.2.0\",\r\n    \"@react-native-async-storage/async-storage\": \"~1.15.0\",\r\n    \"@react-native-community/checkbox\": \"^0.5.9\",\r\n    \"@react-native-community/netinfo\": \"^7.1.9\",\r\n    \"@react-native-picker/picker\": \"^2.2.1\",\r\n    \"@react-navigation/bottom-tabs\": \"^6.1.0\",\r\n    \"@react-navigation/native\": \"^6.0.7\",\r\n    \"@react-navigation/stack\": \"^6.1.0\",\r\n    \"amazon-cognito-identity-js\": \"^5.2.5\",\r\n    \"aws-amplify\": \"^4.3.13\",\r\n    \"aws-amplify-react-native\": \"^6.0.2\",\r\n    \"barcode-reader\": \"^1.6.1\",\r\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\r\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\r\n    \"expo\": \"~44.0.0\",\r\n    \"expo-barcode-scanner\": \"^11.2.1\",\r\n    \"expo-image-picker\": \"^12.0.2\",\r\n    \"expo-notifications\": \"~0.14.0\",\r\n    \"expo-status-bar\": \"~1.2.0\",\r\n    \"native-base\": \"^3.3.4\",\r\n    \"qrcode\": \"^1.5.0\",\r\n    \"qs\": \"^6.10.3\",\r\n    \"react\": \"17.0.1\",\r\n    \"react-docgen\": \"^5.4.0\",\r\n    \"react-dom\": \"^17.0.1\",\r\n    \"react-native\": \"0.64.3\",\r\n    \"react-native-bluetooth-classic\": \"^1.60.0-rc.20\",\r\n    \"react-native-camera\": \"^4.2.1\",\r\n    \"react-native-elements\": \"^3.4.2\",\r\n    \"react-native-floating-label-input\": \"^1.3.11\",\r\n    \"react-native-gesture-handler\": \"^2.2.0\",\r\n    \"react-native-image-picker\": \"^4.7.3\",\r\n    \"react-native-label\": \"0.0.1-alpha.1\",\r\n    \"react-native-modal\": \"^13.0.0\",\r\n    \"react-native-push-notification\": \"^8.1.1\",\r\n    \"react-native-reanimated\": \"^2.3.1\",\r\n    \"react-native-safe-area-context\": \"3.3.2\",\r\n    \"react-native-screens\": \"~3.10.1\",\r\n    \"react-native-settings-screen\": \"^2.2.1\",\r\n    \"react-native-svg\": \"^12.3.0\",\r\n    \"react-native-vector-icons\": \"^9.0.0\",\r\n    \"react-native-video\": \"^5.2.0\",\r\n    \"react-native-web\": \"0.17.1\",\r\n    \"react-native-webview\": \"^11.17.1\",\r\n    \"react-qr-code\": \"^2.0.3\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.12.9\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"typescript\": \"~4.3.5\"\r\n  },\r\n  \"private\": true\r\n}\r\n",
    "longname": "C:\\Users\\Ryan Mraz\\Documents\\SmartPantry\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]